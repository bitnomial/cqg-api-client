// CQG Customer Management System API Markets metadata extend protocol.

syntax = "proto2";

package metadata_1;

import "common/shared_1.proto";
import "CMS/common_1.proto";

message MetadataScopeRequest
{
    // [required] Request identifier.
    // It should be unique to match with request result.
    optional uint32 id = 1;

    // Allows to search supported contracts.
    optional ContractSearchRequest contract_search_request = 2;
}

message MetadataScopeResult
{
    // ID of a corresponding request.
    optional uint32 request_id = 1;

    // Request tracking number generated by CMS API
    // Used by client to cancel deferred request
    optional uint64 tracking_number = 2;

    // Operation status.
    // This field is associated with common_1.OperationStatus enum.
    optional uint32 operation_status = 3;

    // Failure details.
    optional shared_1.Text error_message = 4;

    optional ContractSearchResult contract_search_result = 5;
}

message ContractSearchRequest
{
    // List of possible search refine criteria.
    enum SearchCriteria
    {
        // Display name (like EPZ16).
        CONTRACT_NAME = 1;

        FUNGIBLE_COMMODITY_ID = 2;

        INSTRUMENT_TYPE_ID = 3;

        CONTRACT_ID = 4;

        COMMODITY_ID = 5;
    }

    // Optionally restrict matched results by returning the first 'top' records.
    optional uint32 top = 1;

    // List of search options. Each option has its own search text, criteria and matching rule.
    repeated common_1.SearchOption search_options = 2;

    // Indicates, whether all criteria must match at once.
    // By default any criteria must match.
    optional bool all_match_mode = 3 [default = false];

    // Indicates weather include tradable contracts or not.
    // By default, only tradable contracts are returned.
    optional bool include_non_tradable = 4 [default = false];
}

message ContractSearchResult
{
    // List of found contracts.
    repeated ContractSearchResultRecord contract_record = 1;

    // This flag is set to true if all results are sent
    // and nothing was filtered out by 'top' parameter.
    optional bool is_complete = 2 [default = true];
}

// Information about one of the found contracts.
message ContractSearchResultRecord
{
    optional string contract_id = 1;

    // Short (display) version of the name.
    // Example: EPZ16
    optional string contract_name = 2;

    // Example: F.US.EP.Z16
    optional string contract_full_name = 3;

    // XBit.
    optional string commodity_id = 4;

    // Instrument type.
    optional string instrument_type_id = 5;

    // Fungible commodity id.
    optional string fungible_commodity_id = 6;

    // Contract description.
    optional string description = 7;
}