// CQG Customer Management System API Profile entity Protocol.

syntax = "proto2";

package profile_1;

import "CMS/common_1.proto";
import "common/shared_1.proto";

message ProfileScopeRequest
{
    // [required] Request identifier.
    // It should be unique to match with operation result.
    optional uint32 id = 1;

    // Request profile - login links.
    optional ProfileLoginLinksRequest profile_login_links_request = 14;

    // Request profile - profile links.
    optional common_1.EntityDataRequest profile_to_profile_links_request = 15;

    // Update profile - login links.
    optional UpdateProfileLoginLinks update_profile_login_links = 16;

    // Update profile - profile links.
    optional UpdateProfileToProfileLinks update_profile_to_profile_links = 17;

    // Request of profile's service prices overrides.
    // Supported profile types: brokerage.
    optional common_1.EntityDataRequest profile_entitlement_service_price_override_request = 18;
}

message ProfileScopeResult
{
    // ID of a corresponding request.
    optional uint32 request_id = 1;

    // Request tracking number generated by CMS API
    // Used by client to cancel deferred request
    optional uint64 tracking_number = 2;

    // Operation status.
    // This field is associated with common_1.OperationStatus enum.
    optional uint32 operation_status = 3;

    // Failure details.
    optional shared_1.Text error_message = 4;

    optional ProfileLoginLinksResult profile_login_links_result = 12;

    optional ProfileToProfileLinksResult profile_to_profile_result = 13;

    optional ProfileEntitlementServicePriceOverrideResult profile_entitlement_service_price_override_result = 14;
}

// Profile to Login links request message.
// Either profile_id or login_id is required (mutually exclusive).
message ProfileLoginLinksRequest
{
    // Profile ID.
    // Supported profile types: admin, customer.
    optional string profile_id = 1;

    // Login ID.
    optional string login_id = 2;
}

// Profile to Login link.
message ProfileLoginLink
{
    // [required] Profile ID.
    optional string profile_id = 1;

    // Login ID.
    // During set, if given, then link is automatically approved.
    optional string login_id = 2;

    // Login user name.
    // If given during set, has priority over login_id field.
    optional string login_user_name = 3;

    // Approve link.
    // Update only by CQG scope.
    optional bool approved = 4;

    extensions 100 to 199;
}

message ProfileLoginLinksResult
{
    extend ProfileLoginLink
    {
        // Profile name.
        optional string profile_name = 100;

        // Date of link approval.
        optional sint64 approved_date = 101;
    }

    // List of customer to login links.
    repeated ProfileLoginLink profile_login_links = 1;
}

// Update customer to login links.
message UpdateProfileLoginLinks
{
    // Links to add.
    // Link is added if it does not exist with this customer and login id.
    repeated ProfileLoginLink links_to_set = 1;

    // Links to remove. First - customer id (profile id), second - login id.
    repeated common_1.Tuple links_to_remove = 2;
}

message ProfileToProfileLinksResult
{
    // List profile to profile links.
    // First - parent profile id, second - child id.
    repeated ProfileToProfileLink links = 1;
}

// Profile to Profile link.
// First - parent profile id, second - child id.

// Brokerage profile can be parent of any profile.
// Sales series profile can be parent of customer/admin profile only.
// Non individual customer can be parent of individual customer.
// Individual customer/admin can't be parent.
message ProfileToProfileLink
{
    // Parent Profile.
    optional common_1.NamedEntity parent_profile = 1;

    // Child Profile.
    optional common_1.NamedEntity child_profile = 2;
}

message UpdateProfileToProfileLinks
{
    // Links to add/update.
    repeated ProfileToProfileLink links_to_set = 1;

    // Links to remove. first - parent profile ID, second child profile id.
    repeated common_1.Tuple links_to_remove = 2;
}

message ProfileEntitlementServicePriceOverrideResult
{
    // Service prices overrides per brokerage.
    repeated common_1.ServicePriceOverride service_price_overrides = 1;
}