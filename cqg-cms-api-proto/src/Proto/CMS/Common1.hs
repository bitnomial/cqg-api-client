{- This file was auto-generated from CMS/common_1.proto by the proto-lens-protoc program. -}
{-# LANGUAGE ScopedTypeVariables, DataKinds, TypeFamilies, UndecidableInstances, GeneralizedNewtypeDeriving, MultiParamTypeClasses, FlexibleContexts, FlexibleInstances, PatternSynonyms, MagicHash, NoImplicitPrelude, DataKinds, BangPatterns, TypeApplications, OverloadedStrings, DerivingStrategies#-}
{-# OPTIONS_GHC -Wno-unused-imports#-}
{-# OPTIONS_GHC -Wno-duplicate-exports#-}
{-# OPTIONS_GHC -Wno-dodgy-exports#-}
module Proto.CMS.Common1 (
        ActivateLogin(), ActivateLoginResult(), Address(),
        Address'AddressStatus(..), Address'AddressStatus(),
        AdminLoginScope(..), AdminLoginScope(), AuthActivityType(..),
        AuthActivityType(), AuthServerSpecialOperation(..),
        AuthServerSpecialOperation(), CloneUser(), CloneUserResult(),
        CommonLookupPropertyType(..), CommonLookupPropertyType(),
        ContactInformation(), CreateUser(), CreateUserResult(),
        CredentialType(..), CredentialType(), Credentials(),
        CustomerSalesSeriesAuthorizationListRequest(),
        CustomerSalesSeriesAuthorizationListResult(),
        CustomerSalesSeriesLink(), DataRequest(), DeactivateLogin(),
        DeactivateLoginResult(), Email(), EntitiesDataRequest(),
        EntitlementCategory(), EntitlementCategoryListRequest(),
        EntitlementConstraint(), EntitlementConstraint'Type(..),
        EntitlementConstraint'Type(), EntitlementService(),
        EntitlementService'AuthorizationType(..),
        EntitlementService'AuthorizationType(),
        EntitlementService'ServiceOption(..),
        EntitlementService'ServiceOption(), EntitlementServiceItem(),
        EntitlementServiceItemType(), EntitlementServiceListRequest(),
        EntitlementServiceRequest(), EntityDataRequest(), EntityType(..),
        EntityType(), EraseCurrentCredentials(),
        EraseCurrentCredentialsResult(), ExternalAuth(),
        InternalEntityType(..), InternalEntityType(), LegalType(..),
        LegalType(), LinkedEntityListRequest(), LinkedEntityListResult(),
        LoggedOff(), LoginBillingCustomData(),
        LoginBillingCustomDataRequest(), LoginBillingCustomDataResult(),
        LoginDomain(..), LoginDomain(), LoginExchangeMemberId(),
        LoginExchangeMemberIdListRequest(),
        LoginExchangeMemberIdListResult(), LoginSettings(),
        LoginSettings'DisconnectAction(..),
        LoginSettings'DisconnectAction(), LoginSettingsRequest(),
        LoginSettingsResult(), Logoff(), Logon(), Logon'SessionSetting(..),
        Logon'SessionSetting(), LogonResult(), LogonResultCode(..),
        LogonResultCode(), LookupProperty(), LookupPropertyListRequest(),
        LookupPropertyListResult(), NamedEntity(), OperationStatus(..),
        OperationStatus(), PasswordPolicy(), Phone(), Price(), Profile(),
        ProfileType(..), ProfileType(), RemoveUser(), RemoveUserResult(),
        RestoreOrJoinSession(), RestoreOrJoinSession'OperationType(..),
        RestoreOrJoinSession'OperationType(), RestoreOrJoinSessionResult(),
        RestoreUser(), RestoreUserResult(), SalesSeriesInfo(),
        SalesSeriesListResult(), SalesSeriesSearchRequest(),
        SalesSeriesSearchRequest'SearchCriteria(..),
        SalesSeriesSearchRequest'SearchCriteria(),
        SalesSeriesSearchResultRecord(), SearchOption(),
        SearchOption'MatchingRule(..), SearchOption'MatchingRule(),
        ServicePriceOverride(), TradingFeaturesRequest(),
        TradingFeaturesResult(), TradingInterfaceElement(), Tuple(),
        UpdateCustomerSalesSeriesAuthorizationList(),
        UpdateCustomerSalesSeriesAuthorizationListResult(),
        UpdateEntityLinks(), UpdateEntityLinksResult(),
        UpdateLoginBillingCustomData(),
        UpdateLoginBillingCustomDataResult(),
        UpdateLoginExchangeMemberIdList(),
        UpdateLoginExchangeMemberIdListResult(), UpdateLoginSettings(),
        UpdateLoginSettingsResult(), UpdateUser(), UpdateUserResult(),
        User(), User'LoginClass(..), User'LoginClass(),
        User'SubscriberType(..), User'SubscriberType(), UserInfoRequest(),
        UserMessage(), UserMessage'MessageType(..),
        UserMessage'MessageType(), UserSearchRequest(),
        UserSearchRequest'SearchCriteria(..),
        UserSearchRequest'SearchCriteria(), UserSearchResultRecord()
    ) where
import qualified Data.ProtoLens.Runtime.Control.DeepSeq as Control.DeepSeq
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Prism as Data.ProtoLens.Prism
import qualified Data.ProtoLens.Runtime.Prelude as Prelude
import qualified Data.ProtoLens.Runtime.Data.Int as Data.Int
import qualified Data.ProtoLens.Runtime.Data.Monoid as Data.Monoid
import qualified Data.ProtoLens.Runtime.Data.Word as Data.Word
import qualified Data.ProtoLens.Runtime.Data.ProtoLens as Data.ProtoLens
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Bytes as Data.ProtoLens.Encoding.Bytes
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Growing as Data.ProtoLens.Encoding.Growing
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Parser.Unsafe as Data.ProtoLens.Encoding.Parser.Unsafe
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Wire as Data.ProtoLens.Encoding.Wire
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Field as Data.ProtoLens.Field
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Message.Enum as Data.ProtoLens.Message.Enum
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Service.Types as Data.ProtoLens.Service.Types
import qualified Data.ProtoLens.Runtime.Lens.Family2 as Lens.Family2
import qualified Data.ProtoLens.Runtime.Lens.Family2.Unchecked as Lens.Family2.Unchecked
import qualified Data.ProtoLens.Runtime.Data.Text as Data.Text
import qualified Data.ProtoLens.Runtime.Data.Map as Data.Map
import qualified Data.ProtoLens.Runtime.Data.ByteString as Data.ByteString
import qualified Data.ProtoLens.Runtime.Data.ByteString.Char8 as Data.ByteString.Char8
import qualified Data.ProtoLens.Runtime.Data.Text.Encoding as Data.Text.Encoding
import qualified Data.ProtoLens.Runtime.Data.Vector as Data.Vector
import qualified Data.ProtoLens.Runtime.Data.Vector.Generic as Data.Vector.Generic
import qualified Data.ProtoLens.Runtime.Data.Vector.Unboxed as Data.Vector.Unboxed
import qualified Data.ProtoLens.Runtime.Text.Read as Text.Read
import qualified Proto.Common.Shared1
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginId' @:: Lens' ActivateLogin Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'loginId' @:: Lens' ActivateLogin (Prelude.Maybe Data.Text.Text)@ -}
data ActivateLogin
  = ActivateLogin'_constructor {_ActivateLogin'loginId :: !(Prelude.Maybe Data.Text.Text),
                                _ActivateLogin'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ActivateLogin where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ActivateLogin "loginId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActivateLogin'loginId
           (\ x__ y__ -> x__ {_ActivateLogin'loginId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ActivateLogin "maybe'loginId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ActivateLogin'loginId
           (\ x__ y__ -> x__ {_ActivateLogin'loginId = y__}))
        Prelude.id
instance Data.ProtoLens.Message ActivateLogin where
  messageName _ = Data.Text.pack "common_1.ActivateLogin"
  packedMessageDescriptor _
    = "\n\
      \\rActivateLogin\DC2\EM\n\
      \\blogin_id\CAN\SOH \SOH(\tR\aloginId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'loginId")) ::
              Data.ProtoLens.FieldDescriptor ActivateLogin
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ActivateLogin'_unknownFields
        (\ x__ y__ -> x__ {_ActivateLogin'_unknownFields = y__})
  defMessage
    = ActivateLogin'_constructor
        {_ActivateLogin'loginId = Prelude.Nothing,
         _ActivateLogin'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ActivateLogin -> Data.ProtoLens.Encoding.Bytes.Parser ActivateLogin
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "login_id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"loginId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ActivateLogin"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'loginId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData ActivateLogin where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ActivateLogin'_unknownFields x__)
             (Control.DeepSeq.deepseq (_ActivateLogin'loginId x__) ())
{- | Fields :
      -}
data ActivateLoginResult
  = ActivateLoginResult'_constructor {_ActivateLoginResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ActivateLoginResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message ActivateLoginResult where
  messageName _ = Data.Text.pack "common_1.ActivateLoginResult"
  packedMessageDescriptor _
    = "\n\
      \\DC3ActivateLoginResult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ActivateLoginResult'_unknownFields
        (\ x__ y__ -> x__ {_ActivateLoginResult'_unknownFields = y__})
  defMessage
    = ActivateLoginResult'_constructor
        {_ActivateLoginResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ActivateLoginResult
          -> Data.ProtoLens.Encoding.Bytes.Parser ActivateLoginResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ActivateLoginResult"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData ActivateLoginResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ActivateLoginResult'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.clearedFields' @:: Lens' Address [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'clearedFields' @:: Lens' Address (Data.Vector.Unboxed.Vector Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.country' @:: Lens' Address Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'country' @:: Lens' Address (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.state' @:: Lens' Address Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'state' @:: Lens' Address (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.city' @:: Lens' Address Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'city' @:: Lens' Address (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.zip' @:: Lens' Address Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'zip' @:: Lens' Address (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.address' @:: Lens' Address Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'address' @:: Lens' Address (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.address2' @:: Lens' Address Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'address2' @:: Lens' Address (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.name' @:: Lens' Address Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'name' @:: Lens' Address (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.addressStatus' @:: Lens' Address Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'addressStatus' @:: Lens' Address (Prelude.Maybe Data.Word.Word32)@ -}
data Address
  = Address'_constructor {_Address'clearedFields :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                          _Address'country :: !(Prelude.Maybe Data.Text.Text),
                          _Address'state :: !(Prelude.Maybe Data.Text.Text),
                          _Address'city :: !(Prelude.Maybe Data.Text.Text),
                          _Address'zip :: !(Prelude.Maybe Data.Text.Text),
                          _Address'address :: !(Prelude.Maybe Data.Text.Text),
                          _Address'address2 :: !(Prelude.Maybe Data.Text.Text),
                          _Address'name :: !(Prelude.Maybe Data.Text.Text),
                          _Address'addressStatus :: !(Prelude.Maybe Data.Word.Word32),
                          _Address'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Address where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Address "clearedFields" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'clearedFields
           (\ x__ y__ -> x__ {_Address'clearedFields = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField Address "vec'clearedFields" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'clearedFields
           (\ x__ y__ -> x__ {_Address'clearedFields = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Address "country" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'country (\ x__ y__ -> x__ {_Address'country = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Address "maybe'country" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'country (\ x__ y__ -> x__ {_Address'country = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Address "state" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'state (\ x__ y__ -> x__ {_Address'state = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Address "maybe'state" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'state (\ x__ y__ -> x__ {_Address'state = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Address "city" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'city (\ x__ y__ -> x__ {_Address'city = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Address "maybe'city" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'city (\ x__ y__ -> x__ {_Address'city = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Address "zip" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'zip (\ x__ y__ -> x__ {_Address'zip = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Address "maybe'zip" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'zip (\ x__ y__ -> x__ {_Address'zip = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Address "address" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'address (\ x__ y__ -> x__ {_Address'address = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Address "maybe'address" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'address (\ x__ y__ -> x__ {_Address'address = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Address "address2" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'address2 (\ x__ y__ -> x__ {_Address'address2 = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Address "maybe'address2" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'address2 (\ x__ y__ -> x__ {_Address'address2 = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Address "name" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'name (\ x__ y__ -> x__ {_Address'name = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Address "maybe'name" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'name (\ x__ y__ -> x__ {_Address'name = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Address "addressStatus" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'addressStatus
           (\ x__ y__ -> x__ {_Address'addressStatus = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Address "maybe'addressStatus" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Address'addressStatus
           (\ x__ y__ -> x__ {_Address'addressStatus = y__}))
        Prelude.id
instance Data.ProtoLens.Message Address where
  messageName _ = Data.Text.pack "common_1.Address"
  packedMessageDescriptor _
    = "\n\
      \\aAddress\DC2%\n\
      \\SOcleared_fields\CAN\t \ETX(\rR\rclearedFields\DC2\CAN\n\
      \\acountry\CAN\SOH \SOH(\tR\acountry\DC2\DC4\n\
      \\ENQstate\CAN\STX \SOH(\tR\ENQstate\DC2\DC2\n\
      \\EOTcity\CAN\ETX \SOH(\tR\EOTcity\DC2\DLE\n\
      \\ETXzip\CAN\EOT \SOH(\tR\ETXzip\DC2\CAN\n\
      \\aaddress\CAN\ENQ \SOH(\tR\aaddress\DC2\ESC\n\
      \\taddress_2\CAN\ACK \SOH(\tR\baddress2\DC2\DC2\n\
      \\EOTname\CAN\a \SOH(\tR\EOTname\DC2%\n\
      \\SOaddress_status\CAN\b \SOH(\rR\raddressStatus\"C\n\
      \\rAddressStatus\DC2\v\n\
      \\aINVALID\DLE\NUL\DC2\t\n\
      \\ENQVALID\DLE\SOH\DC2\DC1\n\
      \\rNO_VALIDATION\DLE\STX\DC2\a\n\
      \\ETXNEW\DLE\ETX"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        clearedFields__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cleared_fields"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"clearedFields")) ::
              Data.ProtoLens.FieldDescriptor Address
        country__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "country"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'country")) ::
              Data.ProtoLens.FieldDescriptor Address
        state__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "state"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'state")) ::
              Data.ProtoLens.FieldDescriptor Address
        city__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "city"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'city")) ::
              Data.ProtoLens.FieldDescriptor Address
        zip__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "zip"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'zip")) ::
              Data.ProtoLens.FieldDescriptor Address
        address__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "address"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'address")) ::
              Data.ProtoLens.FieldDescriptor Address
        address2__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "address_2"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'address2")) ::
              Data.ProtoLens.FieldDescriptor Address
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'name")) ::
              Data.ProtoLens.FieldDescriptor Address
        addressStatus__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "address_status"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'addressStatus")) ::
              Data.ProtoLens.FieldDescriptor Address
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 9, clearedFields__field_descriptor),
           (Data.ProtoLens.Tag 1, country__field_descriptor),
           (Data.ProtoLens.Tag 2, state__field_descriptor),
           (Data.ProtoLens.Tag 3, city__field_descriptor),
           (Data.ProtoLens.Tag 4, zip__field_descriptor),
           (Data.ProtoLens.Tag 5, address__field_descriptor),
           (Data.ProtoLens.Tag 6, address2__field_descriptor),
           (Data.ProtoLens.Tag 7, name__field_descriptor),
           (Data.ProtoLens.Tag 8, addressStatus__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Address'_unknownFields
        (\ x__ y__ -> x__ {_Address'_unknownFields = y__})
  defMessage
    = Address'_constructor
        {_Address'clearedFields = Data.Vector.Generic.empty,
         _Address'country = Prelude.Nothing,
         _Address'state = Prelude.Nothing, _Address'city = Prelude.Nothing,
         _Address'zip = Prelude.Nothing, _Address'address = Prelude.Nothing,
         _Address'address2 = Prelude.Nothing,
         _Address'name = Prelude.Nothing,
         _Address'addressStatus = Prelude.Nothing,
         _Address'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Address
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
             -> Data.ProtoLens.Encoding.Bytes.Parser Address
        loop x mutable'clearedFields
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'clearedFields <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                   mutable'clearedFields)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'clearedFields")
                              frozen'clearedFields x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        72
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "cleared_fields"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'clearedFields y)
                                loop x v
                        74
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "cleared_fields"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'clearedFields)
                                loop x y
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "country"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"country") y x)
                                  mutable'clearedFields
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "state"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"state") y x)
                                  mutable'clearedFields
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "city"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"city") y x)
                                  mutable'clearedFields
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "zip"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"zip") y x)
                                  mutable'clearedFields
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "address"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"address") y x)
                                  mutable'clearedFields
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "address_2"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"address2") y x)
                                  mutable'clearedFields
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                                  mutable'clearedFields
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "address_status"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"addressStatus") y x)
                                  mutable'clearedFields
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'clearedFields
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'clearedFields <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'clearedFields)
          "Address"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                        ((Prelude..)
                           Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'clearedFields") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'country") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'state") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'city") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8 _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'zip") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8 _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'address") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.Text.Encoding.encodeUtf8 _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'address2") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.Text.Encoding.encodeUtf8 _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'name") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                            ((Prelude..)
                                               (\ bs
                                                  -> (Data.Monoid.<>)
                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                          (Prelude.fromIntegral
                                                             (Data.ByteString.length bs)))
                                                       (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                               Data.Text.Encoding.encodeUtf8 _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'addressStatus") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral _v))
                                     (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                        (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))))
instance Control.DeepSeq.NFData Address where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Address'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Address'clearedFields x__)
                (Control.DeepSeq.deepseq
                   (_Address'country x__)
                   (Control.DeepSeq.deepseq
                      (_Address'state x__)
                      (Control.DeepSeq.deepseq
                         (_Address'city x__)
                         (Control.DeepSeq.deepseq
                            (_Address'zip x__)
                            (Control.DeepSeq.deepseq
                               (_Address'address x__)
                               (Control.DeepSeq.deepseq
                                  (_Address'address2 x__)
                                  (Control.DeepSeq.deepseq
                                     (_Address'name x__)
                                     (Control.DeepSeq.deepseq
                                        (_Address'addressStatus x__) ())))))))))
data Address'AddressStatus
  = Address'INVALID |
    Address'VALID |
    Address'NO_VALIDATION |
    Address'NEW
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum Address'AddressStatus where
  maybeToEnum 0 = Prelude.Just Address'INVALID
  maybeToEnum 1 = Prelude.Just Address'VALID
  maybeToEnum 2 = Prelude.Just Address'NO_VALIDATION
  maybeToEnum 3 = Prelude.Just Address'NEW
  maybeToEnum _ = Prelude.Nothing
  showEnum Address'INVALID = "INVALID"
  showEnum Address'VALID = "VALID"
  showEnum Address'NO_VALIDATION = "NO_VALIDATION"
  showEnum Address'NEW = "NEW"
  readEnum k
    | (Prelude.==) k "INVALID" = Prelude.Just Address'INVALID
    | (Prelude.==) k "VALID" = Prelude.Just Address'VALID
    | (Prelude.==) k "NO_VALIDATION"
    = Prelude.Just Address'NO_VALIDATION
    | (Prelude.==) k "NEW" = Prelude.Just Address'NEW
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded Address'AddressStatus where
  minBound = Address'INVALID
  maxBound = Address'NEW
instance Prelude.Enum Address'AddressStatus where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum AddressStatus: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum Address'INVALID = 0
  fromEnum Address'VALID = 1
  fromEnum Address'NO_VALIDATION = 2
  fromEnum Address'NEW = 3
  succ Address'NEW
    = Prelude.error
        "Address'AddressStatus.succ: bad argument Address'NEW. This value would be out of bounds."
  succ Address'INVALID = Address'VALID
  succ Address'VALID = Address'NO_VALIDATION
  succ Address'NO_VALIDATION = Address'NEW
  pred Address'INVALID
    = Prelude.error
        "Address'AddressStatus.pred: bad argument Address'INVALID. This value would be out of bounds."
  pred Address'VALID = Address'INVALID
  pred Address'NO_VALIDATION = Address'VALID
  pred Address'NEW = Address'NO_VALIDATION
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault Address'AddressStatus where
  fieldDefault = Address'INVALID
instance Control.DeepSeq.NFData Address'AddressStatus where
  rnf x__ = Prelude.seq x__ ()
data AdminLoginScope
  = CQG | BROKERAGE | SALES_REP | TRADER
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum AdminLoginScope where
  maybeToEnum 1 = Prelude.Just CQG
  maybeToEnum 2 = Prelude.Just BROKERAGE
  maybeToEnum 3 = Prelude.Just SALES_REP
  maybeToEnum 4 = Prelude.Just TRADER
  maybeToEnum _ = Prelude.Nothing
  showEnum CQG = "CQG"
  showEnum BROKERAGE = "BROKERAGE"
  showEnum SALES_REP = "SALES_REP"
  showEnum TRADER = "TRADER"
  readEnum k
    | (Prelude.==) k "CQG" = Prelude.Just CQG
    | (Prelude.==) k "BROKERAGE" = Prelude.Just BROKERAGE
    | (Prelude.==) k "SALES_REP" = Prelude.Just SALES_REP
    | (Prelude.==) k "TRADER" = Prelude.Just TRADER
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded AdminLoginScope where
  minBound = CQG
  maxBound = TRADER
instance Prelude.Enum AdminLoginScope where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum AdminLoginScope: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum CQG = 1
  fromEnum BROKERAGE = 2
  fromEnum SALES_REP = 3
  fromEnum TRADER = 4
  succ TRADER
    = Prelude.error
        "AdminLoginScope.succ: bad argument TRADER. This value would be out of bounds."
  succ CQG = BROKERAGE
  succ BROKERAGE = SALES_REP
  succ SALES_REP = TRADER
  pred CQG
    = Prelude.error
        "AdminLoginScope.pred: bad argument CQG. This value would be out of bounds."
  pred BROKERAGE = CQG
  pred SALES_REP = BROKERAGE
  pred TRADER = SALES_REP
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault AdminLoginScope where
  fieldDefault = CQG
instance Control.DeepSeq.NFData AdminLoginScope where
  rnf x__ = Prelude.seq x__ ()
data AuthActivityType
  = LOGIN |
    PASSWORD_CHANGE |
    CLEAR_LOCKOUT |
    CHANGE_2FA |
    ERASE_2FA |
    ERASE_PASSWORD
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum AuthActivityType where
  maybeToEnum 1 = Prelude.Just LOGIN
  maybeToEnum 2 = Prelude.Just PASSWORD_CHANGE
  maybeToEnum 3 = Prelude.Just CLEAR_LOCKOUT
  maybeToEnum 4 = Prelude.Just CHANGE_2FA
  maybeToEnum 5 = Prelude.Just ERASE_2FA
  maybeToEnum 6 = Prelude.Just ERASE_PASSWORD
  maybeToEnum _ = Prelude.Nothing
  showEnum LOGIN = "LOGIN"
  showEnum PASSWORD_CHANGE = "PASSWORD_CHANGE"
  showEnum CLEAR_LOCKOUT = "CLEAR_LOCKOUT"
  showEnum CHANGE_2FA = "CHANGE_2FA"
  showEnum ERASE_2FA = "ERASE_2FA"
  showEnum ERASE_PASSWORD = "ERASE_PASSWORD"
  readEnum k
    | (Prelude.==) k "LOGIN" = Prelude.Just LOGIN
    | (Prelude.==) k "PASSWORD_CHANGE" = Prelude.Just PASSWORD_CHANGE
    | (Prelude.==) k "CLEAR_LOCKOUT" = Prelude.Just CLEAR_LOCKOUT
    | (Prelude.==) k "CHANGE_2FA" = Prelude.Just CHANGE_2FA
    | (Prelude.==) k "ERASE_2FA" = Prelude.Just ERASE_2FA
    | (Prelude.==) k "ERASE_PASSWORD" = Prelude.Just ERASE_PASSWORD
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded AuthActivityType where
  minBound = LOGIN
  maxBound = ERASE_PASSWORD
instance Prelude.Enum AuthActivityType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum AuthActivityType: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum LOGIN = 1
  fromEnum PASSWORD_CHANGE = 2
  fromEnum CLEAR_LOCKOUT = 3
  fromEnum CHANGE_2FA = 4
  fromEnum ERASE_2FA = 5
  fromEnum ERASE_PASSWORD = 6
  succ ERASE_PASSWORD
    = Prelude.error
        "AuthActivityType.succ: bad argument ERASE_PASSWORD. This value would be out of bounds."
  succ LOGIN = PASSWORD_CHANGE
  succ PASSWORD_CHANGE = CLEAR_LOCKOUT
  succ CLEAR_LOCKOUT = CHANGE_2FA
  succ CHANGE_2FA = ERASE_2FA
  succ ERASE_2FA = ERASE_PASSWORD
  pred LOGIN
    = Prelude.error
        "AuthActivityType.pred: bad argument LOGIN. This value would be out of bounds."
  pred PASSWORD_CHANGE = LOGIN
  pred CLEAR_LOCKOUT = PASSWORD_CHANGE
  pred CHANGE_2FA = CLEAR_LOCKOUT
  pred ERASE_2FA = CHANGE_2FA
  pred ERASE_PASSWORD = ERASE_2FA
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault AuthActivityType where
  fieldDefault = LOGIN
instance Control.DeepSeq.NFData AuthActivityType where
  rnf x__ = Prelude.seq x__ ()
data AuthServerSpecialOperation
  = COMPLETE_LOGON |
    SET_PASSWORD |
    SETUP_SECOND_FACTOR |
    CHANGE_EXPIRED_PASSWORD |
    SIGN_AGREEMENT |
    VERIFY_PHONE |
    PASS_CERTIFICATION
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum AuthServerSpecialOperation where
  maybeToEnum 0 = Prelude.Just COMPLETE_LOGON
  maybeToEnum 1 = Prelude.Just SET_PASSWORD
  maybeToEnum 2 = Prelude.Just SETUP_SECOND_FACTOR
  maybeToEnum 3 = Prelude.Just CHANGE_EXPIRED_PASSWORD
  maybeToEnum 4 = Prelude.Just SIGN_AGREEMENT
  maybeToEnum 5 = Prelude.Just VERIFY_PHONE
  maybeToEnum 6 = Prelude.Just PASS_CERTIFICATION
  maybeToEnum _ = Prelude.Nothing
  showEnum COMPLETE_LOGON = "COMPLETE_LOGON"
  showEnum SET_PASSWORD = "SET_PASSWORD"
  showEnum SETUP_SECOND_FACTOR = "SETUP_SECOND_FACTOR"
  showEnum CHANGE_EXPIRED_PASSWORD = "CHANGE_EXPIRED_PASSWORD"
  showEnum SIGN_AGREEMENT = "SIGN_AGREEMENT"
  showEnum VERIFY_PHONE = "VERIFY_PHONE"
  showEnum PASS_CERTIFICATION = "PASS_CERTIFICATION"
  readEnum k
    | (Prelude.==) k "COMPLETE_LOGON" = Prelude.Just COMPLETE_LOGON
    | (Prelude.==) k "SET_PASSWORD" = Prelude.Just SET_PASSWORD
    | (Prelude.==) k "SETUP_SECOND_FACTOR"
    = Prelude.Just SETUP_SECOND_FACTOR
    | (Prelude.==) k "CHANGE_EXPIRED_PASSWORD"
    = Prelude.Just CHANGE_EXPIRED_PASSWORD
    | (Prelude.==) k "SIGN_AGREEMENT" = Prelude.Just SIGN_AGREEMENT
    | (Prelude.==) k "VERIFY_PHONE" = Prelude.Just VERIFY_PHONE
    | (Prelude.==) k "PASS_CERTIFICATION"
    = Prelude.Just PASS_CERTIFICATION
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded AuthServerSpecialOperation where
  minBound = COMPLETE_LOGON
  maxBound = PASS_CERTIFICATION
instance Prelude.Enum AuthServerSpecialOperation where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum AuthServerSpecialOperation: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum COMPLETE_LOGON = 0
  fromEnum SET_PASSWORD = 1
  fromEnum SETUP_SECOND_FACTOR = 2
  fromEnum CHANGE_EXPIRED_PASSWORD = 3
  fromEnum SIGN_AGREEMENT = 4
  fromEnum VERIFY_PHONE = 5
  fromEnum PASS_CERTIFICATION = 6
  succ PASS_CERTIFICATION
    = Prelude.error
        "AuthServerSpecialOperation.succ: bad argument PASS_CERTIFICATION. This value would be out of bounds."
  succ COMPLETE_LOGON = SET_PASSWORD
  succ SET_PASSWORD = SETUP_SECOND_FACTOR
  succ SETUP_SECOND_FACTOR = CHANGE_EXPIRED_PASSWORD
  succ CHANGE_EXPIRED_PASSWORD = SIGN_AGREEMENT
  succ SIGN_AGREEMENT = VERIFY_PHONE
  succ VERIFY_PHONE = PASS_CERTIFICATION
  pred COMPLETE_LOGON
    = Prelude.error
        "AuthServerSpecialOperation.pred: bad argument COMPLETE_LOGON. This value would be out of bounds."
  pred SET_PASSWORD = COMPLETE_LOGON
  pred SETUP_SECOND_FACTOR = SET_PASSWORD
  pred CHANGE_EXPIRED_PASSWORD = SETUP_SECOND_FACTOR
  pred SIGN_AGREEMENT = CHANGE_EXPIRED_PASSWORD
  pred VERIFY_PHONE = SIGN_AGREEMENT
  pred PASS_CERTIFICATION = VERIFY_PHONE
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault AuthServerSpecialOperation where
  fieldDefault = COMPLETE_LOGON
instance Control.DeepSeq.NFData AuthServerSpecialOperation where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.sourceUserId' @:: Lens' CloneUser Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'sourceUserId' @:: Lens' CloneUser (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.newUserUsername' @:: Lens' CloneUser Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'newUserUsername' @:: Lens' CloneUser (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.obsoleteNewUserFirstName' @:: Lens' CloneUser Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteNewUserFirstName' @:: Lens' CloneUser (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.obsoleteNewUserLastName' @:: Lens' CloneUser Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteNewUserLastName' @:: Lens' CloneUser (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.obsoleteNewUserAddress' @:: Lens' CloneUser Address@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteNewUserAddress' @:: Lens' CloneUser (Prelude.Maybe Address)@
         * 'Proto.CMS.Common1_Fields.newUserContactInformation' @:: Lens' CloneUser ContactInformation@
         * 'Proto.CMS.Common1_Fields.maybe'newUserContactInformation' @:: Lens' CloneUser (Prelude.Maybe ContactInformation)@
         * 'Proto.CMS.Common1_Fields.obsoleteNewUserMiddleInitial' @:: Lens' CloneUser Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteNewUserMiddleInitial' @:: Lens' CloneUser (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.targetProfileId' @:: Lens' CloneUser Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'targetProfileId' @:: Lens' CloneUser (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.noWelcomeEmail' @:: Lens' CloneUser Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'noWelcomeEmail' @:: Lens' CloneUser (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.newProfileBrokerageId' @:: Lens' CloneUser Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'newProfileBrokerageId' @:: Lens' CloneUser (Prelude.Maybe Data.Text.Text)@ -}
data CloneUser
  = CloneUser'_constructor {_CloneUser'sourceUserId :: !(Prelude.Maybe Data.Text.Text),
                            _CloneUser'newUserUsername :: !(Prelude.Maybe Data.Text.Text),
                            _CloneUser'obsoleteNewUserFirstName :: !(Prelude.Maybe Data.Text.Text),
                            _CloneUser'obsoleteNewUserLastName :: !(Prelude.Maybe Data.Text.Text),
                            _CloneUser'obsoleteNewUserAddress :: !(Prelude.Maybe Address),
                            _CloneUser'newUserContactInformation :: !(Prelude.Maybe ContactInformation),
                            _CloneUser'obsoleteNewUserMiddleInitial :: !(Prelude.Maybe Data.Text.Text),
                            _CloneUser'targetProfileId :: !(Prelude.Maybe Data.Text.Text),
                            _CloneUser'noWelcomeEmail :: !(Prelude.Maybe Prelude.Bool),
                            _CloneUser'newProfileBrokerageId :: !(Prelude.Maybe Data.Text.Text),
                            _CloneUser'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CloneUser where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CloneUser "sourceUserId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'sourceUserId
           (\ x__ y__ -> x__ {_CloneUser'sourceUserId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CloneUser "maybe'sourceUserId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'sourceUserId
           (\ x__ y__ -> x__ {_CloneUser'sourceUserId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CloneUser "newUserUsername" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'newUserUsername
           (\ x__ y__ -> x__ {_CloneUser'newUserUsername = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CloneUser "maybe'newUserUsername" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'newUserUsername
           (\ x__ y__ -> x__ {_CloneUser'newUserUsername = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CloneUser "obsoleteNewUserFirstName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'obsoleteNewUserFirstName
           (\ x__ y__ -> x__ {_CloneUser'obsoleteNewUserFirstName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CloneUser "maybe'obsoleteNewUserFirstName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'obsoleteNewUserFirstName
           (\ x__ y__ -> x__ {_CloneUser'obsoleteNewUserFirstName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CloneUser "obsoleteNewUserLastName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'obsoleteNewUserLastName
           (\ x__ y__ -> x__ {_CloneUser'obsoleteNewUserLastName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CloneUser "maybe'obsoleteNewUserLastName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'obsoleteNewUserLastName
           (\ x__ y__ -> x__ {_CloneUser'obsoleteNewUserLastName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CloneUser "obsoleteNewUserAddress" Address where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'obsoleteNewUserAddress
           (\ x__ y__ -> x__ {_CloneUser'obsoleteNewUserAddress = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CloneUser "maybe'obsoleteNewUserAddress" (Prelude.Maybe Address) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'obsoleteNewUserAddress
           (\ x__ y__ -> x__ {_CloneUser'obsoleteNewUserAddress = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CloneUser "newUserContactInformation" ContactInformation where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'newUserContactInformation
           (\ x__ y__ -> x__ {_CloneUser'newUserContactInformation = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField CloneUser "maybe'newUserContactInformation" (Prelude.Maybe ContactInformation) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'newUserContactInformation
           (\ x__ y__ -> x__ {_CloneUser'newUserContactInformation = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CloneUser "obsoleteNewUserMiddleInitial" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'obsoleteNewUserMiddleInitial
           (\ x__ y__ -> x__ {_CloneUser'obsoleteNewUserMiddleInitial = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CloneUser "maybe'obsoleteNewUserMiddleInitial" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'obsoleteNewUserMiddleInitial
           (\ x__ y__ -> x__ {_CloneUser'obsoleteNewUserMiddleInitial = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CloneUser "targetProfileId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'targetProfileId
           (\ x__ y__ -> x__ {_CloneUser'targetProfileId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CloneUser "maybe'targetProfileId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'targetProfileId
           (\ x__ y__ -> x__ {_CloneUser'targetProfileId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CloneUser "noWelcomeEmail" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'noWelcomeEmail
           (\ x__ y__ -> x__ {_CloneUser'noWelcomeEmail = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CloneUser "maybe'noWelcomeEmail" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'noWelcomeEmail
           (\ x__ y__ -> x__ {_CloneUser'noWelcomeEmail = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CloneUser "newProfileBrokerageId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'newProfileBrokerageId
           (\ x__ y__ -> x__ {_CloneUser'newProfileBrokerageId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CloneUser "maybe'newProfileBrokerageId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUser'newProfileBrokerageId
           (\ x__ y__ -> x__ {_CloneUser'newProfileBrokerageId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CloneUser where
  messageName _ = Data.Text.pack "common_1.CloneUser"
  packedMessageDescriptor _
    = "\n\
      \\tCloneUser\DC2$\n\
      \\SOsource_user_id\CAN\SOH \SOH(\tR\fsourceUserId\DC2*\n\
      \\DC1new_user_username\CAN\STX \SOH(\tR\SInewUserUsername\DC2B\n\
      \\FSobsolete_new_user_first_name\CAN\ETX \SOH(\tR\CANobsoleteNewUserFirstNameB\STX\CAN\SOH\DC2@\n\
      \\ESCobsolete_new_user_last_name\CAN\EOT \SOH(\tR\ETBobsoleteNewUserLastNameB\STX\CAN\SOH\DC2P\n\
      \\EMobsolete_new_user_address\CAN\ENQ \SOH(\v2\DC1.common_1.AddressR\SYNobsoleteNewUserAddressB\STX\CAN\SOH\DC2]\n\
      \\FSnew_user_contact_information\CAN\ACK \SOH(\v2\FS.common_1.ContactInformationR\EMnewUserContactInformation\DC2J\n\
      \ obsolete_new_user_middle_initial\CAN\a \SOH(\tR\FSobsoleteNewUserMiddleInitialB\STX\CAN\SOH\DC2*\n\
      \\DC1target_profile_id\CAN\b \SOH(\tR\SItargetProfileId\DC2(\n\
      \\DLEno_welcome_email\CAN\t \SOH(\bR\SOnoWelcomeEmail\DC27\n\
      \\CANnew_profile_brokerage_id\CAN\n\
      \ \SOH(\tR\NAKnewProfileBrokerageId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        sourceUserId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "source_user_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sourceUserId")) ::
              Data.ProtoLens.FieldDescriptor CloneUser
        newUserUsername__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "new_user_username"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'newUserUsername")) ::
              Data.ProtoLens.FieldDescriptor CloneUser
        obsoleteNewUserFirstName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_new_user_first_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsoleteNewUserFirstName")) ::
              Data.ProtoLens.FieldDescriptor CloneUser
        obsoleteNewUserLastName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_new_user_last_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsoleteNewUserLastName")) ::
              Data.ProtoLens.FieldDescriptor CloneUser
        obsoleteNewUserAddress__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_new_user_address"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Address)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsoleteNewUserAddress")) ::
              Data.ProtoLens.FieldDescriptor CloneUser
        newUserContactInformation__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "new_user_contact_information"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ContactInformation)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'newUserContactInformation")) ::
              Data.ProtoLens.FieldDescriptor CloneUser
        obsoleteNewUserMiddleInitial__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_new_user_middle_initial"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'obsoleteNewUserMiddleInitial")) ::
              Data.ProtoLens.FieldDescriptor CloneUser
        targetProfileId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "target_profile_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'targetProfileId")) ::
              Data.ProtoLens.FieldDescriptor CloneUser
        noWelcomeEmail__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "no_welcome_email"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'noWelcomeEmail")) ::
              Data.ProtoLens.FieldDescriptor CloneUser
        newProfileBrokerageId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "new_profile_brokerage_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'newProfileBrokerageId")) ::
              Data.ProtoLens.FieldDescriptor CloneUser
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, sourceUserId__field_descriptor),
           (Data.ProtoLens.Tag 2, newUserUsername__field_descriptor),
           (Data.ProtoLens.Tag 3, obsoleteNewUserFirstName__field_descriptor),
           (Data.ProtoLens.Tag 4, obsoleteNewUserLastName__field_descriptor),
           (Data.ProtoLens.Tag 5, obsoleteNewUserAddress__field_descriptor),
           (Data.ProtoLens.Tag 6, 
            newUserContactInformation__field_descriptor),
           (Data.ProtoLens.Tag 7, 
            obsoleteNewUserMiddleInitial__field_descriptor),
           (Data.ProtoLens.Tag 8, targetProfileId__field_descriptor),
           (Data.ProtoLens.Tag 9, noWelcomeEmail__field_descriptor),
           (Data.ProtoLens.Tag 10, newProfileBrokerageId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CloneUser'_unknownFields
        (\ x__ y__ -> x__ {_CloneUser'_unknownFields = y__})
  defMessage
    = CloneUser'_constructor
        {_CloneUser'sourceUserId = Prelude.Nothing,
         _CloneUser'newUserUsername = Prelude.Nothing,
         _CloneUser'obsoleteNewUserFirstName = Prelude.Nothing,
         _CloneUser'obsoleteNewUserLastName = Prelude.Nothing,
         _CloneUser'obsoleteNewUserAddress = Prelude.Nothing,
         _CloneUser'newUserContactInformation = Prelude.Nothing,
         _CloneUser'obsoleteNewUserMiddleInitial = Prelude.Nothing,
         _CloneUser'targetProfileId = Prelude.Nothing,
         _CloneUser'noWelcomeEmail = Prelude.Nothing,
         _CloneUser'newProfileBrokerageId = Prelude.Nothing,
         _CloneUser'_unknownFields = []}
  parseMessage
    = let
        loop :: CloneUser -> Data.ProtoLens.Encoding.Bytes.Parser CloneUser
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "source_user_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"sourceUserId") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "new_user_username"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"newUserUsername") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "obsolete_new_user_first_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteNewUserFirstName") y x)
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "obsolete_new_user_last_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteNewUserLastName") y x)
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "obsolete_new_user_address"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteNewUserAddress") y x)
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "new_user_contact_information"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"newUserContactInformation") y x)
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "obsolete_new_user_middle_initial"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteNewUserMiddleInitial") y
                                     x)
                        66
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "target_profile_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"targetProfileId") y x)
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "no_welcome_email"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"noWelcomeEmail") y x)
                        82
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "new_profile_brokerage_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"newProfileBrokerageId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "CloneUser"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'sourceUserId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'newUserUsername") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'obsoleteNewUserFirstName") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'obsoleteNewUserLastName") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8 _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'obsoleteNewUserAddress") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.ProtoLens.encodeMessage _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'newUserContactInformation")
                                   _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.ProtoLens.encodeMessage _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field
                                         @"maybe'obsoleteNewUserMiddleInitial")
                                      _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.Text.Encoding.encodeUtf8 _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'targetProfileId") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                                            ((Prelude..)
                                               (\ bs
                                                  -> (Data.Monoid.<>)
                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                          (Prelude.fromIntegral
                                                             (Data.ByteString.length bs)))
                                                       (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                               Data.Text.Encoding.encodeUtf8 _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'noWelcomeEmail") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (\ b -> if b then 1 else 0) _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field
                                                  @"maybe'newProfileBrokerageId")
                                               _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                                                  ((Prelude..)
                                                     (\ bs
                                                        -> (Data.Monoid.<>)
                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                (Prelude.fromIntegral
                                                                   (Data.ByteString.length bs)))
                                                             (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                bs))
                                                     Data.Text.Encoding.encodeUtf8 _v))
                                        (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                           (Lens.Family2.view
                                              Data.ProtoLens.unknownFields _x)))))))))))
instance Control.DeepSeq.NFData CloneUser where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CloneUser'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CloneUser'sourceUserId x__)
                (Control.DeepSeq.deepseq
                   (_CloneUser'newUserUsername x__)
                   (Control.DeepSeq.deepseq
                      (_CloneUser'obsoleteNewUserFirstName x__)
                      (Control.DeepSeq.deepseq
                         (_CloneUser'obsoleteNewUserLastName x__)
                         (Control.DeepSeq.deepseq
                            (_CloneUser'obsoleteNewUserAddress x__)
                            (Control.DeepSeq.deepseq
                               (_CloneUser'newUserContactInformation x__)
                               (Control.DeepSeq.deepseq
                                  (_CloneUser'obsoleteNewUserMiddleInitial x__)
                                  (Control.DeepSeq.deepseq
                                     (_CloneUser'targetProfileId x__)
                                     (Control.DeepSeq.deepseq
                                        (_CloneUser'noWelcomeEmail x__)
                                        (Control.DeepSeq.deepseq
                                           (_CloneUser'newProfileBrokerageId x__) ()))))))))))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.newUserId' @:: Lens' CloneUserResult Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.newProfileId' @:: Lens' CloneUserResult Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'newProfileId' @:: Lens' CloneUserResult (Prelude.Maybe Data.Text.Text)@ -}
data CloneUserResult
  = CloneUserResult'_constructor {_CloneUserResult'newUserId :: !Data.Text.Text,
                                  _CloneUserResult'newProfileId :: !(Prelude.Maybe Data.Text.Text),
                                  _CloneUserResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CloneUserResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CloneUserResult "newUserId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUserResult'newUserId
           (\ x__ y__ -> x__ {_CloneUserResult'newUserId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CloneUserResult "newProfileId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUserResult'newProfileId
           (\ x__ y__ -> x__ {_CloneUserResult'newProfileId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CloneUserResult "maybe'newProfileId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CloneUserResult'newProfileId
           (\ x__ y__ -> x__ {_CloneUserResult'newProfileId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CloneUserResult where
  messageName _ = Data.Text.pack "common_1.CloneUserResult"
  packedMessageDescriptor _
    = "\n\
      \\SICloneUserResult\DC2\RS\n\
      \\vnew_user_id\CAN\SOH \STX(\tR\tnewUserId\DC2$\n\
      \\SOnew_profile_id\CAN\STX \SOH(\tR\fnewProfileId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        newUserId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "new_user_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"newUserId")) ::
              Data.ProtoLens.FieldDescriptor CloneUserResult
        newProfileId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "new_profile_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'newProfileId")) ::
              Data.ProtoLens.FieldDescriptor CloneUserResult
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, newUserId__field_descriptor),
           (Data.ProtoLens.Tag 2, newProfileId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CloneUserResult'_unknownFields
        (\ x__ y__ -> x__ {_CloneUserResult'_unknownFields = y__})
  defMessage
    = CloneUserResult'_constructor
        {_CloneUserResult'newUserId = Data.ProtoLens.fieldDefault,
         _CloneUserResult'newProfileId = Prelude.Nothing,
         _CloneUserResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CloneUserResult
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser CloneUserResult
        loop x required'newUserId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'newUserId then (:) "new_user_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "new_user_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"newUserId") y x)
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "new_profile_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"newProfileId") y x)
                                  required'newUserId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'newUserId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "CloneUserResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"newUserId") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'newProfileId") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CloneUserResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CloneUserResult'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CloneUserResult'newUserId x__)
                (Control.DeepSeq.deepseq (_CloneUserResult'newProfileId x__) ()))
data CommonLookupPropertyType
  = AUTHENTICATION_SYSTEM |
    CONNECTION_POINT |
    EXCHANGE |
    COUNTRY |
    REGION |
    LOG_EVENT_TYPE |
    REGEX_VALIDATION_RULE
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum CommonLookupPropertyType where
  maybeToEnum 201 = Prelude.Just AUTHENTICATION_SYSTEM
  maybeToEnum 202 = Prelude.Just CONNECTION_POINT
  maybeToEnum 203 = Prelude.Just EXCHANGE
  maybeToEnum 204 = Prelude.Just COUNTRY
  maybeToEnum 205 = Prelude.Just REGION
  maybeToEnum 206 = Prelude.Just LOG_EVENT_TYPE
  maybeToEnum 207 = Prelude.Just REGEX_VALIDATION_RULE
  maybeToEnum _ = Prelude.Nothing
  showEnum AUTHENTICATION_SYSTEM = "AUTHENTICATION_SYSTEM"
  showEnum CONNECTION_POINT = "CONNECTION_POINT"
  showEnum EXCHANGE = "EXCHANGE"
  showEnum COUNTRY = "COUNTRY"
  showEnum REGION = "REGION"
  showEnum LOG_EVENT_TYPE = "LOG_EVENT_TYPE"
  showEnum REGEX_VALIDATION_RULE = "REGEX_VALIDATION_RULE"
  readEnum k
    | (Prelude.==) k "AUTHENTICATION_SYSTEM"
    = Prelude.Just AUTHENTICATION_SYSTEM
    | (Prelude.==) k "CONNECTION_POINT" = Prelude.Just CONNECTION_POINT
    | (Prelude.==) k "EXCHANGE" = Prelude.Just EXCHANGE
    | (Prelude.==) k "COUNTRY" = Prelude.Just COUNTRY
    | (Prelude.==) k "REGION" = Prelude.Just REGION
    | (Prelude.==) k "LOG_EVENT_TYPE" = Prelude.Just LOG_EVENT_TYPE
    | (Prelude.==) k "REGEX_VALIDATION_RULE"
    = Prelude.Just REGEX_VALIDATION_RULE
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded CommonLookupPropertyType where
  minBound = AUTHENTICATION_SYSTEM
  maxBound = REGEX_VALIDATION_RULE
instance Prelude.Enum CommonLookupPropertyType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum CommonLookupPropertyType: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum AUTHENTICATION_SYSTEM = 201
  fromEnum CONNECTION_POINT = 202
  fromEnum EXCHANGE = 203
  fromEnum COUNTRY = 204
  fromEnum REGION = 205
  fromEnum LOG_EVENT_TYPE = 206
  fromEnum REGEX_VALIDATION_RULE = 207
  succ REGEX_VALIDATION_RULE
    = Prelude.error
        "CommonLookupPropertyType.succ: bad argument REGEX_VALIDATION_RULE. This value would be out of bounds."
  succ AUTHENTICATION_SYSTEM = CONNECTION_POINT
  succ CONNECTION_POINT = EXCHANGE
  succ EXCHANGE = COUNTRY
  succ COUNTRY = REGION
  succ REGION = LOG_EVENT_TYPE
  succ LOG_EVENT_TYPE = REGEX_VALIDATION_RULE
  pred AUTHENTICATION_SYSTEM
    = Prelude.error
        "CommonLookupPropertyType.pred: bad argument AUTHENTICATION_SYSTEM. This value would be out of bounds."
  pred CONNECTION_POINT = AUTHENTICATION_SYSTEM
  pred EXCHANGE = CONNECTION_POINT
  pred COUNTRY = EXCHANGE
  pred REGION = COUNTRY
  pred LOG_EVENT_TYPE = REGION
  pred REGEX_VALIDATION_RULE = LOG_EVENT_TYPE
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault CommonLookupPropertyType where
  fieldDefault = AUTHENTICATION_SYSTEM
instance Control.DeepSeq.NFData CommonLookupPropertyType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.email' @:: Lens' ContactInformation [Email]@
         * 'Proto.CMS.Common1_Fields.vec'email' @:: Lens' ContactInformation (Data.Vector.Vector Email)@
         * 'Proto.CMS.Common1_Fields.phone' @:: Lens' ContactInformation [Phone]@
         * 'Proto.CMS.Common1_Fields.vec'phone' @:: Lens' ContactInformation (Data.Vector.Vector Phone)@
         * 'Proto.CMS.Common1_Fields.fax' @:: Lens' ContactInformation [Phone]@
         * 'Proto.CMS.Common1_Fields.vec'fax' @:: Lens' ContactInformation (Data.Vector.Vector Phone)@
         * 'Proto.CMS.Common1_Fields.firstName' @:: Lens' ContactInformation Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'firstName' @:: Lens' ContactInformation (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.lastName' @:: Lens' ContactInformation Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'lastName' @:: Lens' ContactInformation (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.address' @:: Lens' ContactInformation [Address]@
         * 'Proto.CMS.Common1_Fields.vec'address' @:: Lens' ContactInformation (Data.Vector.Vector Address)@ -}
data ContactInformation
  = ContactInformation'_constructor {_ContactInformation'email :: !(Data.Vector.Vector Email),
                                     _ContactInformation'phone :: !(Data.Vector.Vector Phone),
                                     _ContactInformation'fax :: !(Data.Vector.Vector Phone),
                                     _ContactInformation'firstName :: !(Prelude.Maybe Data.Text.Text),
                                     _ContactInformation'lastName :: !(Prelude.Maybe Data.Text.Text),
                                     _ContactInformation'address :: !(Data.Vector.Vector Address),
                                     _ContactInformation'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ContactInformation where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ContactInformation "email" [Email] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ContactInformation'email
           (\ x__ y__ -> x__ {_ContactInformation'email = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ContactInformation "vec'email" (Data.Vector.Vector Email) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ContactInformation'email
           (\ x__ y__ -> x__ {_ContactInformation'email = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ContactInformation "phone" [Phone] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ContactInformation'phone
           (\ x__ y__ -> x__ {_ContactInformation'phone = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ContactInformation "vec'phone" (Data.Vector.Vector Phone) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ContactInformation'phone
           (\ x__ y__ -> x__ {_ContactInformation'phone = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ContactInformation "fax" [Phone] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ContactInformation'fax
           (\ x__ y__ -> x__ {_ContactInformation'fax = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ContactInformation "vec'fax" (Data.Vector.Vector Phone) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ContactInformation'fax
           (\ x__ y__ -> x__ {_ContactInformation'fax = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ContactInformation "firstName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ContactInformation'firstName
           (\ x__ y__ -> x__ {_ContactInformation'firstName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ContactInformation "maybe'firstName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ContactInformation'firstName
           (\ x__ y__ -> x__ {_ContactInformation'firstName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ContactInformation "lastName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ContactInformation'lastName
           (\ x__ y__ -> x__ {_ContactInformation'lastName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ContactInformation "maybe'lastName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ContactInformation'lastName
           (\ x__ y__ -> x__ {_ContactInformation'lastName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ContactInformation "address" [Address] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ContactInformation'address
           (\ x__ y__ -> x__ {_ContactInformation'address = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField ContactInformation "vec'address" (Data.Vector.Vector Address) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ContactInformation'address
           (\ x__ y__ -> x__ {_ContactInformation'address = y__}))
        Prelude.id
instance Data.ProtoLens.Message ContactInformation where
  messageName _ = Data.Text.pack "common_1.ContactInformation"
  packedMessageDescriptor _
    = "\n\
      \\DC2ContactInformation\DC2%\n\
      \\ENQemail\CAN\SOH \ETX(\v2\SI.common_1.EmailR\ENQemail\DC2%\n\
      \\ENQphone\CAN\STX \ETX(\v2\SI.common_1.PhoneR\ENQphone\DC2!\n\
      \\ETXfax\CAN\ETX \ETX(\v2\SI.common_1.PhoneR\ETXfax\DC2\GS\n\
      \\n\
      \first_name\CAN\EOT \SOH(\tR\tfirstName\DC2\ESC\n\
      \\tlast_name\CAN\ENQ \SOH(\tR\blastName\DC2+\n\
      \\aaddress\CAN\ACK \ETX(\v2\DC1.common_1.AddressR\aaddress"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        email__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "email"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Email)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"email")) ::
              Data.ProtoLens.FieldDescriptor ContactInformation
        phone__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "phone"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Phone)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"phone")) ::
              Data.ProtoLens.FieldDescriptor ContactInformation
        fax__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "fax"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Phone)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"fax")) ::
              Data.ProtoLens.FieldDescriptor ContactInformation
        firstName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "first_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'firstName")) ::
              Data.ProtoLens.FieldDescriptor ContactInformation
        lastName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "last_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lastName")) ::
              Data.ProtoLens.FieldDescriptor ContactInformation
        address__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "address"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Address)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"address")) ::
              Data.ProtoLens.FieldDescriptor ContactInformation
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, email__field_descriptor),
           (Data.ProtoLens.Tag 2, phone__field_descriptor),
           (Data.ProtoLens.Tag 3, fax__field_descriptor),
           (Data.ProtoLens.Tag 4, firstName__field_descriptor),
           (Data.ProtoLens.Tag 5, lastName__field_descriptor),
           (Data.ProtoLens.Tag 6, address__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ContactInformation'_unknownFields
        (\ x__ y__ -> x__ {_ContactInformation'_unknownFields = y__})
  defMessage
    = ContactInformation'_constructor
        {_ContactInformation'email = Data.Vector.Generic.empty,
         _ContactInformation'phone = Data.Vector.Generic.empty,
         _ContactInformation'fax = Data.Vector.Generic.empty,
         _ContactInformation'firstName = Prelude.Nothing,
         _ContactInformation'lastName = Prelude.Nothing,
         _ContactInformation'address = Data.Vector.Generic.empty,
         _ContactInformation'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ContactInformation
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Address
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Email
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Phone
                   -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Phone
                      -> Data.ProtoLens.Encoding.Bytes.Parser ContactInformation
        loop x mutable'address mutable'email mutable'fax mutable'phone
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'address <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'address)
                      frozen'email <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'email)
                      frozen'fax <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'fax)
                      frozen'phone <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'phone)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'address") frozen'address
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'email") frozen'email
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'fax") frozen'fax
                                    (Lens.Family2.set
                                       (Data.ProtoLens.Field.field @"vec'phone") frozen'phone x)))))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "email"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'email y)
                                loop x mutable'address v mutable'fax mutable'phone
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "phone"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'phone y)
                                loop x mutable'address mutable'email mutable'fax v
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "fax"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'fax y)
                                loop x mutable'address mutable'email v mutable'phone
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "first_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"firstName") y x)
                                  mutable'address mutable'email mutable'fax mutable'phone
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "last_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"lastName") y x)
                                  mutable'address mutable'email mutable'fax mutable'phone
                        50
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "address"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'address y)
                                loop x v mutable'email mutable'fax mutable'phone
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'address mutable'email mutable'fax mutable'phone
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'address <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              mutable'email <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                 Data.ProtoLens.Encoding.Growing.new
              mutable'fax <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                               Data.ProtoLens.Encoding.Growing.new
              mutable'phone <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                 Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage mutable'address mutable'email mutable'fax
                mutable'phone)
          "ContactInformation"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'email") _x))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage _v))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'phone") _x))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                              ((Prelude..)
                                 (\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Data.ProtoLens.encodeMessage _v))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'fax") _x))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'firstName") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8 _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lastName") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8 _v))
                         ((Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                               (\ _v
                                  -> (Data.Monoid.<>)
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                       ((Prelude..)
                                          (\ bs
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (Prelude.fromIntegral
                                                        (Data.ByteString.length bs)))
                                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                          Data.ProtoLens.encodeMessage _v))
                               (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'address") _x))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData ContactInformation where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ContactInformation'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ContactInformation'email x__)
                (Control.DeepSeq.deepseq
                   (_ContactInformation'phone x__)
                   (Control.DeepSeq.deepseq
                      (_ContactInformation'fax x__)
                      (Control.DeepSeq.deepseq
                         (_ContactInformation'firstName x__)
                         (Control.DeepSeq.deepseq
                            (_ContactInformation'lastName x__)
                            (Control.DeepSeq.deepseq (_ContactInformation'address x__) ()))))))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.user' @:: Lens' CreateUser User@ -}
data CreateUser
  = CreateUser'_constructor {_CreateUser'user :: !User,
                             _CreateUser'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CreateUser where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CreateUser "user" User where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CreateUser'user (\ x__ y__ -> x__ {_CreateUser'user = y__}))
        Prelude.id
instance Data.ProtoLens.Message CreateUser where
  messageName _ = Data.Text.pack "common_1.CreateUser"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \CreateUser\DC2\"\n\
      \\EOTuser\CAN\SOH \STX(\v2\SO.common_1.UserR\EOTuser"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        user__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "user"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor User)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"user")) ::
              Data.ProtoLens.FieldDescriptor CreateUser
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, user__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CreateUser'_unknownFields
        (\ x__ y__ -> x__ {_CreateUser'_unknownFields = y__})
  defMessage
    = CreateUser'_constructor
        {_CreateUser'user = Data.ProtoLens.defMessage,
         _CreateUser'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CreateUser
          -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser CreateUser
        loop x required'user
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'user then (:) "user" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "user"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"user") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'user
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "CreateUser"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.ProtoLens.encodeMessage
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"user") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData CreateUser where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CreateUser'_unknownFields x__)
             (Control.DeepSeq.deepseq (_CreateUser'user x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' CreateUserResult Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'id' @:: Lens' CreateUserResult (Prelude.Maybe Data.Text.Text)@ -}
data CreateUserResult
  = CreateUserResult'_constructor {_CreateUserResult'id :: !(Prelude.Maybe Data.Text.Text),
                                   _CreateUserResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CreateUserResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CreateUserResult "id" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CreateUserResult'id
           (\ x__ y__ -> x__ {_CreateUserResult'id = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CreateUserResult "maybe'id" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CreateUserResult'id
           (\ x__ y__ -> x__ {_CreateUserResult'id = y__}))
        Prelude.id
instance Data.ProtoLens.Message CreateUserResult where
  messageName _ = Data.Text.pack "common_1.CreateUserResult"
  packedMessageDescriptor _
    = "\n\
      \\DLECreateUserResult\DC2\SO\n\
      \\STXid\CAN\SOH \SOH(\tR\STXid"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'id")) ::
              Data.ProtoLens.FieldDescriptor CreateUserResult
      in Data.Map.fromList [(Data.ProtoLens.Tag 1, id__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CreateUserResult'_unknownFields
        (\ x__ y__ -> x__ {_CreateUserResult'_unknownFields = y__})
  defMessage
    = CreateUserResult'_constructor
        {_CreateUserResult'id = Prelude.Nothing,
         _CreateUserResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CreateUserResult
          -> Data.ProtoLens.Encoding.Bytes.Parser CreateUserResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "CreateUserResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'id") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData CreateUserResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CreateUserResult'_unknownFields x__)
             (Control.DeepSeq.deepseq (_CreateUserResult'id x__) ())
data CredentialType
  = STATIC_PASSWORD | SECOND_FACTOR
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum CredentialType where
  maybeToEnum 1 = Prelude.Just STATIC_PASSWORD
  maybeToEnum 2 = Prelude.Just SECOND_FACTOR
  maybeToEnum _ = Prelude.Nothing
  showEnum STATIC_PASSWORD = "STATIC_PASSWORD"
  showEnum SECOND_FACTOR = "SECOND_FACTOR"
  readEnum k
    | (Prelude.==) k "STATIC_PASSWORD" = Prelude.Just STATIC_PASSWORD
    | (Prelude.==) k "SECOND_FACTOR" = Prelude.Just SECOND_FACTOR
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded CredentialType where
  minBound = STATIC_PASSWORD
  maxBound = SECOND_FACTOR
instance Prelude.Enum CredentialType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum CredentialType: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum STATIC_PASSWORD = 1
  fromEnum SECOND_FACTOR = 2
  succ SECOND_FACTOR
    = Prelude.error
        "CredentialType.succ: bad argument SECOND_FACTOR. This value would be out of bounds."
  succ STATIC_PASSWORD = SECOND_FACTOR
  pred STATIC_PASSWORD
    = Prelude.error
        "CredentialType.pred: bad argument STATIC_PASSWORD. This value would be out of bounds."
  pred SECOND_FACTOR = STATIC_PASSWORD
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault CredentialType where
  fieldDefault = STATIC_PASSWORD
instance Control.DeepSeq.NFData CredentialType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.userName' @:: Lens' Credentials Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.password' @:: Lens' Credentials Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'password' @:: Lens' Credentials (Prelude.Maybe Data.Text.Text)@ -}
data Credentials
  = Credentials'_constructor {_Credentials'userName :: !Data.Text.Text,
                              _Credentials'password :: !(Prelude.Maybe Data.Text.Text),
                              _Credentials'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Credentials where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Credentials "userName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Credentials'userName
           (\ x__ y__ -> x__ {_Credentials'userName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Credentials "password" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Credentials'password
           (\ x__ y__ -> x__ {_Credentials'password = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Credentials "maybe'password" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Credentials'password
           (\ x__ y__ -> x__ {_Credentials'password = y__}))
        Prelude.id
instance Data.ProtoLens.Message Credentials where
  messageName _ = Data.Text.pack "common_1.Credentials"
  packedMessageDescriptor _
    = "\n\
      \\vCredentials\DC2\ESC\n\
      \\tuser_name\CAN\SOH \STX(\tR\buserName\DC2\SUB\n\
      \\bpassword\CAN\STX \SOH(\tR\bpassword"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        userName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "user_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"userName")) ::
              Data.ProtoLens.FieldDescriptor Credentials
        password__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "password"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'password")) ::
              Data.ProtoLens.FieldDescriptor Credentials
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, userName__field_descriptor),
           (Data.ProtoLens.Tag 2, password__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Credentials'_unknownFields
        (\ x__ y__ -> x__ {_Credentials'_unknownFields = y__})
  defMessage
    = Credentials'_constructor
        {_Credentials'userName = Data.ProtoLens.fieldDefault,
         _Credentials'password = Prelude.Nothing,
         _Credentials'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Credentials
          -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser Credentials
        loop x required'userName
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'userName then (:) "user_name" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "user_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"userName") y x)
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "password"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"password") y x)
                                  required'userName
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'userName
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "Credentials"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"userName") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'password") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData Credentials where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Credentials'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Credentials'userName x__)
                (Control.DeepSeq.deepseq (_Credentials'password x__) ()))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.customerId' @:: Lens' CustomerSalesSeriesAuthorizationListRequest Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'customerId' @:: Lens' CustomerSalesSeriesAuthorizationListRequest (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.salesSeriesId' @:: Lens' CustomerSalesSeriesAuthorizationListRequest Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'salesSeriesId' @:: Lens' CustomerSalesSeriesAuthorizationListRequest (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.top' @:: Lens' CustomerSalesSeriesAuthorizationListRequest Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'top' @:: Lens' CustomerSalesSeriesAuthorizationListRequest (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.profileId' @:: Lens' CustomerSalesSeriesAuthorizationListRequest Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'profileId' @:: Lens' CustomerSalesSeriesAuthorizationListRequest (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.profileSalesSeriesId' @:: Lens' CustomerSalesSeriesAuthorizationListRequest Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'profileSalesSeriesId' @:: Lens' CustomerSalesSeriesAuthorizationListRequest (Prelude.Maybe Data.Text.Text)@ -}
data CustomerSalesSeriesAuthorizationListRequest
  = CustomerSalesSeriesAuthorizationListRequest'_constructor {_CustomerSalesSeriesAuthorizationListRequest'customerId :: !(Prelude.Maybe Data.Text.Text),
                                                              _CustomerSalesSeriesAuthorizationListRequest'salesSeriesId :: !(Prelude.Maybe Data.Text.Text),
                                                              _CustomerSalesSeriesAuthorizationListRequest'top :: !(Prelude.Maybe Data.Word.Word32),
                                                              _CustomerSalesSeriesAuthorizationListRequest'profileId :: !(Prelude.Maybe Data.Text.Text),
                                                              _CustomerSalesSeriesAuthorizationListRequest'profileSalesSeriesId :: !(Prelude.Maybe Data.Text.Text),
                                                              _CustomerSalesSeriesAuthorizationListRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CustomerSalesSeriesAuthorizationListRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListRequest "customerId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListRequest'customerId
           (\ x__ y__
              -> x__
                   {_CustomerSalesSeriesAuthorizationListRequest'customerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListRequest "maybe'customerId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListRequest'customerId
           (\ x__ y__
              -> x__
                   {_CustomerSalesSeriesAuthorizationListRequest'customerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListRequest "salesSeriesId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListRequest'salesSeriesId
           (\ x__ y__
              -> x__
                   {_CustomerSalesSeriesAuthorizationListRequest'salesSeriesId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListRequest "maybe'salesSeriesId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListRequest'salesSeriesId
           (\ x__ y__
              -> x__
                   {_CustomerSalesSeriesAuthorizationListRequest'salesSeriesId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListRequest "top" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListRequest'top
           (\ x__ y__
              -> x__ {_CustomerSalesSeriesAuthorizationListRequest'top = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListRequest "maybe'top" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListRequest'top
           (\ x__ y__
              -> x__ {_CustomerSalesSeriesAuthorizationListRequest'top = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListRequest "profileId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListRequest'profileId
           (\ x__ y__
              -> x__
                   {_CustomerSalesSeriesAuthorizationListRequest'profileId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListRequest "maybe'profileId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListRequest'profileId
           (\ x__ y__
              -> x__
                   {_CustomerSalesSeriesAuthorizationListRequest'profileId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListRequest "profileSalesSeriesId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListRequest'profileSalesSeriesId
           (\ x__ y__
              -> x__
                   {_CustomerSalesSeriesAuthorizationListRequest'profileSalesSeriesId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListRequest "maybe'profileSalesSeriesId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListRequest'profileSalesSeriesId
           (\ x__ y__
              -> x__
                   {_CustomerSalesSeriesAuthorizationListRequest'profileSalesSeriesId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CustomerSalesSeriesAuthorizationListRequest where
  messageName _
    = Data.Text.pack
        "common_1.CustomerSalesSeriesAuthorizationListRequest"
  packedMessageDescriptor _
    = "\n\
      \+CustomerSalesSeriesAuthorizationListRequest\DC2\US\n\
      \\vcustomer_id\CAN\SOH \SOH(\tR\n\
      \customerId\DC2&\n\
      \\SIsales_series_id\CAN\STX \SOH(\tR\rsalesSeriesId\DC2\DLE\n\
      \\ETXtop\CAN\ETX \SOH(\rR\ETXtop\DC2\GS\n\
      \\n\
      \profile_id\CAN\EOT \SOH(\tR\tprofileId\DC25\n\
      \\ETBprofile_sales_series_id\CAN\ENQ \SOH(\tR\DC4profileSalesSeriesId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        customerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "customer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'customerId")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesAuthorizationListRequest
        salesSeriesId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sales_series_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'salesSeriesId")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesAuthorizationListRequest
        top__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "top"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'top")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesAuthorizationListRequest
        profileId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "profile_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'profileId")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesAuthorizationListRequest
        profileSalesSeriesId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "profile_sales_series_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'profileSalesSeriesId")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesAuthorizationListRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, customerId__field_descriptor),
           (Data.ProtoLens.Tag 2, salesSeriesId__field_descriptor),
           (Data.ProtoLens.Tag 3, top__field_descriptor),
           (Data.ProtoLens.Tag 4, profileId__field_descriptor),
           (Data.ProtoLens.Tag 5, profileSalesSeriesId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CustomerSalesSeriesAuthorizationListRequest'_unknownFields
        (\ x__ y__
           -> x__
                {_CustomerSalesSeriesAuthorizationListRequest'_unknownFields = y__})
  defMessage
    = CustomerSalesSeriesAuthorizationListRequest'_constructor
        {_CustomerSalesSeriesAuthorizationListRequest'customerId = Prelude.Nothing,
         _CustomerSalesSeriesAuthorizationListRequest'salesSeriesId = Prelude.Nothing,
         _CustomerSalesSeriesAuthorizationListRequest'top = Prelude.Nothing,
         _CustomerSalesSeriesAuthorizationListRequest'profileId = Prelude.Nothing,
         _CustomerSalesSeriesAuthorizationListRequest'profileSalesSeriesId = Prelude.Nothing,
         _CustomerSalesSeriesAuthorizationListRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CustomerSalesSeriesAuthorizationListRequest
          -> Data.ProtoLens.Encoding.Bytes.Parser CustomerSalesSeriesAuthorizationListRequest
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "customer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"customerId") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "sales_series_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"salesSeriesId") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "top"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"top") y x)
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "profile_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"profileId") y x)
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "profile_sales_series_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"profileSalesSeriesId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "CustomerSalesSeriesAuthorizationListRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'customerId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'salesSeriesId") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'top") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'profileId") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8 _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'profileSalesSeriesId") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8 _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData CustomerSalesSeriesAuthorizationListRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CustomerSalesSeriesAuthorizationListRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CustomerSalesSeriesAuthorizationListRequest'customerId x__)
                (Control.DeepSeq.deepseq
                   (_CustomerSalesSeriesAuthorizationListRequest'salesSeriesId x__)
                   (Control.DeepSeq.deepseq
                      (_CustomerSalesSeriesAuthorizationListRequest'top x__)
                      (Control.DeepSeq.deepseq
                         (_CustomerSalesSeriesAuthorizationListRequest'profileId x__)
                         (Control.DeepSeq.deepseq
                            (_CustomerSalesSeriesAuthorizationListRequest'profileSalesSeriesId
                               x__)
                            ())))))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.customerSalesSeriesLinks' @:: Lens' CustomerSalesSeriesAuthorizationListResult [CustomerSalesSeriesLink]@
         * 'Proto.CMS.Common1_Fields.vec'customerSalesSeriesLinks' @:: Lens' CustomerSalesSeriesAuthorizationListResult (Data.Vector.Vector CustomerSalesSeriesLink)@
         * 'Proto.CMS.Common1_Fields.isComplete' @:: Lens' CustomerSalesSeriesAuthorizationListResult Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'isComplete' @:: Lens' CustomerSalesSeriesAuthorizationListResult (Prelude.Maybe Prelude.Bool)@ -}
data CustomerSalesSeriesAuthorizationListResult
  = CustomerSalesSeriesAuthorizationListResult'_constructor {_CustomerSalesSeriesAuthorizationListResult'customerSalesSeriesLinks :: !(Data.Vector.Vector CustomerSalesSeriesLink),
                                                             _CustomerSalesSeriesAuthorizationListResult'isComplete :: !(Prelude.Maybe Prelude.Bool),
                                                             _CustomerSalesSeriesAuthorizationListResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CustomerSalesSeriesAuthorizationListResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListResult "customerSalesSeriesLinks" [CustomerSalesSeriesLink] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListResult'customerSalesSeriesLinks
           (\ x__ y__
              -> x__
                   {_CustomerSalesSeriesAuthorizationListResult'customerSalesSeriesLinks = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListResult "vec'customerSalesSeriesLinks" (Data.Vector.Vector CustomerSalesSeriesLink) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListResult'customerSalesSeriesLinks
           (\ x__ y__
              -> x__
                   {_CustomerSalesSeriesAuthorizationListResult'customerSalesSeriesLinks = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListResult "isComplete" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListResult'isComplete
           (\ x__ y__
              -> x__
                   {_CustomerSalesSeriesAuthorizationListResult'isComplete = y__}))
        (Data.ProtoLens.maybeLens Prelude.True)
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesAuthorizationListResult "maybe'isComplete" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesAuthorizationListResult'isComplete
           (\ x__ y__
              -> x__
                   {_CustomerSalesSeriesAuthorizationListResult'isComplete = y__}))
        Prelude.id
instance Data.ProtoLens.Message CustomerSalesSeriesAuthorizationListResult where
  messageName _
    = Data.Text.pack
        "common_1.CustomerSalesSeriesAuthorizationListResult"
  packedMessageDescriptor _
    = "\n\
      \*CustomerSalesSeriesAuthorizationListResult\DC2`\n\
      \\ESCcustomer_sales_series_links\CAN\SOH \ETX(\v2!.common_1.CustomerSalesSeriesLinkR\CANcustomerSalesSeriesLinks\DC2%\n\
      \\vis_complete\CAN\STX \SOH(\b:\EOTtrueR\n\
      \isComplete"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        customerSalesSeriesLinks__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "customer_sales_series_links"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CustomerSalesSeriesLink)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"customerSalesSeriesLinks")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesAuthorizationListResult
        isComplete__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "is_complete"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'isComplete")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesAuthorizationListResult
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, 
            customerSalesSeriesLinks__field_descriptor),
           (Data.ProtoLens.Tag 2, isComplete__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CustomerSalesSeriesAuthorizationListResult'_unknownFields
        (\ x__ y__
           -> x__
                {_CustomerSalesSeriesAuthorizationListResult'_unknownFields = y__})
  defMessage
    = CustomerSalesSeriesAuthorizationListResult'_constructor
        {_CustomerSalesSeriesAuthorizationListResult'customerSalesSeriesLinks = Data.Vector.Generic.empty,
         _CustomerSalesSeriesAuthorizationListResult'isComplete = Prelude.Nothing,
         _CustomerSalesSeriesAuthorizationListResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CustomerSalesSeriesAuthorizationListResult
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld CustomerSalesSeriesLink
             -> Data.ProtoLens.Encoding.Bytes.Parser CustomerSalesSeriesAuthorizationListResult
        loop x mutable'customerSalesSeriesLinks
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'customerSalesSeriesLinks <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                              mutable'customerSalesSeriesLinks)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'customerSalesSeriesLinks")
                              frozen'customerSalesSeriesLinks x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "customer_sales_series_links"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'customerSalesSeriesLinks y)
                                loop x v
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "is_complete"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"isComplete") y x)
                                  mutable'customerSalesSeriesLinks
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'customerSalesSeriesLinks
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'customerSalesSeriesLinks <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                    Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'customerSalesSeriesLinks)
          "CustomerSalesSeriesAuthorizationListResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'customerSalesSeriesLinks") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'isComplete") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData CustomerSalesSeriesAuthorizationListResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CustomerSalesSeriesAuthorizationListResult'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CustomerSalesSeriesAuthorizationListResult'customerSalesSeriesLinks
                   x__)
                (Control.DeepSeq.deepseq
                   (_CustomerSalesSeriesAuthorizationListResult'isComplete x__) ()))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.customerId' @:: Lens' CustomerSalesSeriesLink Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'customerId' @:: Lens' CustomerSalesSeriesLink (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.salesSeriesId' @:: Lens' CustomerSalesSeriesLink Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'salesSeriesId' @:: Lens' CustomerSalesSeriesLink (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.salesSeriesName' @:: Lens' CustomerSalesSeriesLink Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'salesSeriesName' @:: Lens' CustomerSalesSeriesLink (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.salesSeriesNumber' @:: Lens' CustomerSalesSeriesLink Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'salesSeriesNumber' @:: Lens' CustomerSalesSeriesLink (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.profileId' @:: Lens' CustomerSalesSeriesLink Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'profileId' @:: Lens' CustomerSalesSeriesLink (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.profileSalesSeriesId' @:: Lens' CustomerSalesSeriesLink Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'profileSalesSeriesId' @:: Lens' CustomerSalesSeriesLink (Prelude.Maybe Data.Text.Text)@ -}
data CustomerSalesSeriesLink
  = CustomerSalesSeriesLink'_constructor {_CustomerSalesSeriesLink'customerId :: !(Prelude.Maybe Data.Text.Text),
                                          _CustomerSalesSeriesLink'salesSeriesId :: !(Prelude.Maybe Data.Text.Text),
                                          _CustomerSalesSeriesLink'salesSeriesName :: !(Prelude.Maybe Data.Text.Text),
                                          _CustomerSalesSeriesLink'salesSeriesNumber :: !(Prelude.Maybe Data.Text.Text),
                                          _CustomerSalesSeriesLink'profileId :: !(Prelude.Maybe Data.Text.Text),
                                          _CustomerSalesSeriesLink'profileSalesSeriesId :: !(Prelude.Maybe Data.Text.Text),
                                          _CustomerSalesSeriesLink'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CustomerSalesSeriesLink where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesLink "customerId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesLink'customerId
           (\ x__ y__ -> x__ {_CustomerSalesSeriesLink'customerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesLink "maybe'customerId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesLink'customerId
           (\ x__ y__ -> x__ {_CustomerSalesSeriesLink'customerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesLink "salesSeriesId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesLink'salesSeriesId
           (\ x__ y__ -> x__ {_CustomerSalesSeriesLink'salesSeriesId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesLink "maybe'salesSeriesId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesLink'salesSeriesId
           (\ x__ y__ -> x__ {_CustomerSalesSeriesLink'salesSeriesId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesLink "salesSeriesName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesLink'salesSeriesName
           (\ x__ y__
              -> x__ {_CustomerSalesSeriesLink'salesSeriesName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesLink "maybe'salesSeriesName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesLink'salesSeriesName
           (\ x__ y__
              -> x__ {_CustomerSalesSeriesLink'salesSeriesName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesLink "salesSeriesNumber" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesLink'salesSeriesNumber
           (\ x__ y__
              -> x__ {_CustomerSalesSeriesLink'salesSeriesNumber = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesLink "maybe'salesSeriesNumber" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesLink'salesSeriesNumber
           (\ x__ y__
              -> x__ {_CustomerSalesSeriesLink'salesSeriesNumber = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesLink "profileId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesLink'profileId
           (\ x__ y__ -> x__ {_CustomerSalesSeriesLink'profileId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesLink "maybe'profileId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesLink'profileId
           (\ x__ y__ -> x__ {_CustomerSalesSeriesLink'profileId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesLink "profileSalesSeriesId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesLink'profileSalesSeriesId
           (\ x__ y__
              -> x__ {_CustomerSalesSeriesLink'profileSalesSeriesId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CustomerSalesSeriesLink "maybe'profileSalesSeriesId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CustomerSalesSeriesLink'profileSalesSeriesId
           (\ x__ y__
              -> x__ {_CustomerSalesSeriesLink'profileSalesSeriesId = y__}))
        Prelude.id
instance Data.ProtoLens.Message CustomerSalesSeriesLink where
  messageName _ = Data.Text.pack "common_1.CustomerSalesSeriesLink"
  packedMessageDescriptor _
    = "\n\
      \\ETBCustomerSalesSeriesLink\DC2\US\n\
      \\vcustomer_id\CAN\SOH \SOH(\tR\n\
      \customerId\DC2&\n\
      \\SIsales_series_id\CAN\STX \SOH(\tR\rsalesSeriesId\DC2*\n\
      \\DC1sales_series_name\CAN\ETX \SOH(\tR\SIsalesSeriesName\DC2.\n\
      \\DC3sales_series_number\CAN\EOT \SOH(\tR\DC1salesSeriesNumber\DC2\GS\n\
      \\n\
      \profile_id\CAN\ENQ \SOH(\tR\tprofileId\DC25\n\
      \\ETBprofile_sales_series_id\CAN\ACK \SOH(\tR\DC4profileSalesSeriesId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        customerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "customer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'customerId")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesLink
        salesSeriesId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sales_series_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'salesSeriesId")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesLink
        salesSeriesName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sales_series_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'salesSeriesName")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesLink
        salesSeriesNumber__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sales_series_number"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'salesSeriesNumber")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesLink
        profileId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "profile_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'profileId")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesLink
        profileSalesSeriesId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "profile_sales_series_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'profileSalesSeriesId")) ::
              Data.ProtoLens.FieldDescriptor CustomerSalesSeriesLink
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, customerId__field_descriptor),
           (Data.ProtoLens.Tag 2, salesSeriesId__field_descriptor),
           (Data.ProtoLens.Tag 3, salesSeriesName__field_descriptor),
           (Data.ProtoLens.Tag 4, salesSeriesNumber__field_descriptor),
           (Data.ProtoLens.Tag 5, profileId__field_descriptor),
           (Data.ProtoLens.Tag 6, profileSalesSeriesId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CustomerSalesSeriesLink'_unknownFields
        (\ x__ y__ -> x__ {_CustomerSalesSeriesLink'_unknownFields = y__})
  defMessage
    = CustomerSalesSeriesLink'_constructor
        {_CustomerSalesSeriesLink'customerId = Prelude.Nothing,
         _CustomerSalesSeriesLink'salesSeriesId = Prelude.Nothing,
         _CustomerSalesSeriesLink'salesSeriesName = Prelude.Nothing,
         _CustomerSalesSeriesLink'salesSeriesNumber = Prelude.Nothing,
         _CustomerSalesSeriesLink'profileId = Prelude.Nothing,
         _CustomerSalesSeriesLink'profileSalesSeriesId = Prelude.Nothing,
         _CustomerSalesSeriesLink'_unknownFields = []}
  parseMessage
    = let
        loop ::
          CustomerSalesSeriesLink
          -> Data.ProtoLens.Encoding.Bytes.Parser CustomerSalesSeriesLink
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "customer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"customerId") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "sales_series_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"salesSeriesId") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "sales_series_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"salesSeriesName") y x)
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "sales_series_number"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"salesSeriesNumber") y x)
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "profile_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"profileId") y x)
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "profile_sales_series_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"profileSalesSeriesId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "CustomerSalesSeriesLink"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'customerId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'salesSeriesId") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'salesSeriesName") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'salesSeriesNumber") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8 _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'profileId") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8 _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'profileSalesSeriesId") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.Text.Encoding.encodeUtf8 _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData CustomerSalesSeriesLink where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CustomerSalesSeriesLink'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_CustomerSalesSeriesLink'customerId x__)
                (Control.DeepSeq.deepseq
                   (_CustomerSalesSeriesLink'salesSeriesId x__)
                   (Control.DeepSeq.deepseq
                      (_CustomerSalesSeriesLink'salesSeriesName x__)
                      (Control.DeepSeq.deepseq
                         (_CustomerSalesSeriesLink'salesSeriesNumber x__)
                         (Control.DeepSeq.deepseq
                            (_CustomerSalesSeriesLink'profileId x__)
                            (Control.DeepSeq.deepseq
                               (_CustomerSalesSeriesLink'profileSalesSeriesId x__) ()))))))
{- | Fields :
      -}
data DataRequest
  = DataRequest'_constructor {_DataRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DataRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message DataRequest where
  messageName _ = Data.Text.pack "common_1.DataRequest"
  packedMessageDescriptor _
    = "\n\
      \\vDataRequest"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _DataRequest'_unknownFields
        (\ x__ y__ -> x__ {_DataRequest'_unknownFields = y__})
  defMessage
    = DataRequest'_constructor {_DataRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          DataRequest -> Data.ProtoLens.Encoding.Bytes.Parser DataRequest
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "DataRequest"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData DataRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_DataRequest'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginId' @:: Lens' DeactivateLogin Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'loginId' @:: Lens' DeactivateLogin (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.expirationTime' @:: Lens' DeactivateLogin Data.Int.Int64@
         * 'Proto.CMS.Common1_Fields.maybe'expirationTime' @:: Lens' DeactivateLogin (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.CMS.Common1_Fields.cleanUpEventSubscriptions' @:: Lens' DeactivateLogin Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'cleanUpEventSubscriptions' @:: Lens' DeactivateLogin (Prelude.Maybe Prelude.Bool)@ -}
data DeactivateLogin
  = DeactivateLogin'_constructor {_DeactivateLogin'loginId :: !(Prelude.Maybe Data.Text.Text),
                                  _DeactivateLogin'expirationTime :: !(Prelude.Maybe Data.Int.Int64),
                                  _DeactivateLogin'cleanUpEventSubscriptions :: !(Prelude.Maybe Prelude.Bool),
                                  _DeactivateLogin'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DeactivateLogin where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField DeactivateLogin "loginId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DeactivateLogin'loginId
           (\ x__ y__ -> x__ {_DeactivateLogin'loginId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DeactivateLogin "maybe'loginId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DeactivateLogin'loginId
           (\ x__ y__ -> x__ {_DeactivateLogin'loginId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DeactivateLogin "expirationTime" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DeactivateLogin'expirationTime
           (\ x__ y__ -> x__ {_DeactivateLogin'expirationTime = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DeactivateLogin "maybe'expirationTime" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DeactivateLogin'expirationTime
           (\ x__ y__ -> x__ {_DeactivateLogin'expirationTime = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DeactivateLogin "cleanUpEventSubscriptions" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DeactivateLogin'cleanUpEventSubscriptions
           (\ x__ y__
              -> x__ {_DeactivateLogin'cleanUpEventSubscriptions = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField DeactivateLogin "maybe'cleanUpEventSubscriptions" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DeactivateLogin'cleanUpEventSubscriptions
           (\ x__ y__
              -> x__ {_DeactivateLogin'cleanUpEventSubscriptions = y__}))
        Prelude.id
instance Data.ProtoLens.Message DeactivateLogin where
  messageName _ = Data.Text.pack "common_1.DeactivateLogin"
  packedMessageDescriptor _
    = "\n\
      \\SIDeactivateLogin\DC2\EM\n\
      \\blogin_id\CAN\SOH \SOH(\tR\aloginId\DC2'\n\
      \\SIexpiration_time\CAN\STX \SOH(\DC2R\SOexpirationTime\DC2F\n\
      \\FSclean_up_event_subscriptions\CAN\ETX \SOH(\b:\ENQfalseR\EMcleanUpEventSubscriptions"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'loginId")) ::
              Data.ProtoLens.FieldDescriptor DeactivateLogin
        expirationTime__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "expiration_time"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'expirationTime")) ::
              Data.ProtoLens.FieldDescriptor DeactivateLogin
        cleanUpEventSubscriptions__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "clean_up_event_subscriptions"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'cleanUpEventSubscriptions")) ::
              Data.ProtoLens.FieldDescriptor DeactivateLogin
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginId__field_descriptor),
           (Data.ProtoLens.Tag 2, expirationTime__field_descriptor),
           (Data.ProtoLens.Tag 3, 
            cleanUpEventSubscriptions__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _DeactivateLogin'_unknownFields
        (\ x__ y__ -> x__ {_DeactivateLogin'_unknownFields = y__})
  defMessage
    = DeactivateLogin'_constructor
        {_DeactivateLogin'loginId = Prelude.Nothing,
         _DeactivateLogin'expirationTime = Prelude.Nothing,
         _DeactivateLogin'cleanUpEventSubscriptions = Prelude.Nothing,
         _DeactivateLogin'_unknownFields = []}
  parseMessage
    = let
        loop ::
          DeactivateLogin
          -> Data.ProtoLens.Encoding.Bytes.Parser DeactivateLogin
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "login_id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"loginId") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "expiration_time"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"expirationTime") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "clean_up_event_subscriptions"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"cleanUpEventSubscriptions") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "DeactivateLogin"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'loginId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'expirationTime") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                             Data.ProtoLens.Encoding.Bytes.signedInt64ToWord _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'cleanUpEventSubscriptions") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData DeactivateLogin where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_DeactivateLogin'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_DeactivateLogin'loginId x__)
                (Control.DeepSeq.deepseq
                   (_DeactivateLogin'expirationTime x__)
                   (Control.DeepSeq.deepseq
                      (_DeactivateLogin'cleanUpEventSubscriptions x__) ())))
{- | Fields :
      -}
data DeactivateLoginResult
  = DeactivateLoginResult'_constructor {_DeactivateLoginResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DeactivateLoginResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message DeactivateLoginResult where
  messageName _ = Data.Text.pack "common_1.DeactivateLoginResult"
  packedMessageDescriptor _
    = "\n\
      \\NAKDeactivateLoginResult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _DeactivateLoginResult'_unknownFields
        (\ x__ y__ -> x__ {_DeactivateLoginResult'_unknownFields = y__})
  defMessage
    = DeactivateLoginResult'_constructor
        {_DeactivateLoginResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          DeactivateLoginResult
          -> Data.ProtoLens.Encoding.Bytes.Parser DeactivateLoginResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "DeactivateLoginResult"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData DeactivateLoginResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_DeactivateLoginResult'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.email' @:: Lens' Email Data.Text.Text@ -}
data Email
  = Email'_constructor {_Email'email :: !Data.Text.Text,
                        _Email'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Email where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Email "email" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Email'email (\ x__ y__ -> x__ {_Email'email = y__}))
        Prelude.id
instance Data.ProtoLens.Message Email where
  messageName _ = Data.Text.pack "common_1.Email"
  packedMessageDescriptor _
    = "\n\
      \\ENQEmail\DC2\DC4\n\
      \\ENQemail\CAN\SOH \STX(\tR\ENQemail"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        email__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "email"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"email")) ::
              Data.ProtoLens.FieldDescriptor Email
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, email__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Email'_unknownFields
        (\ x__ y__ -> x__ {_Email'_unknownFields = y__})
  defMessage
    = Email'_constructor
        {_Email'email = Data.ProtoLens.fieldDefault,
         _Email'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Email -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser Email
        loop x required'email
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'email then (:) "email" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "email"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"email") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'email
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "Email"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"email") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData Email where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Email'_unknownFields x__)
             (Control.DeepSeq.deepseq (_Email'email x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.entityId' @:: Lens' EntitiesDataRequest [Data.Text.Text]@
         * 'Proto.CMS.Common1_Fields.vec'entityId' @:: Lens' EntitiesDataRequest (Data.Vector.Vector Data.Text.Text)@ -}
data EntitiesDataRequest
  = EntitiesDataRequest'_constructor {_EntitiesDataRequest'entityId :: !(Data.Vector.Vector Data.Text.Text),
                                      _EntitiesDataRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EntitiesDataRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EntitiesDataRequest "entityId" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitiesDataRequest'entityId
           (\ x__ y__ -> x__ {_EntitiesDataRequest'entityId = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField EntitiesDataRequest "vec'entityId" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitiesDataRequest'entityId
           (\ x__ y__ -> x__ {_EntitiesDataRequest'entityId = y__}))
        Prelude.id
instance Data.ProtoLens.Message EntitiesDataRequest where
  messageName _ = Data.Text.pack "common_1.EntitiesDataRequest"
  packedMessageDescriptor _
    = "\n\
      \\DC3EntitiesDataRequest\DC2\ESC\n\
      \\tentity_id\CAN\SOH \ETX(\tR\bentityId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        entityId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "entity_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"entityId")) ::
              Data.ProtoLens.FieldDescriptor EntitiesDataRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, entityId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EntitiesDataRequest'_unknownFields
        (\ x__ y__ -> x__ {_EntitiesDataRequest'_unknownFields = y__})
  defMessage
    = EntitiesDataRequest'_constructor
        {_EntitiesDataRequest'entityId = Data.Vector.Generic.empty,
         _EntitiesDataRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EntitiesDataRequest
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
             -> Data.ProtoLens.Encoding.Bytes.Parser EntitiesDataRequest
        loop x mutable'entityId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'entityId <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'entityId)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'entityId") frozen'entityId x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getText
                                              (Prelude.fromIntegral len))
                                        "entity_id"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'entityId y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'entityId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'entityId <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'entityId)
          "EntitiesDataRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.Text.Encoding.encodeUtf8 _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'entityId") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData EntitiesDataRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EntitiesDataRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq (_EntitiesDataRequest'entityId x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' EntitlementCategory Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.name' @:: Lens' EntitlementCategory Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.subCategory' @:: Lens' EntitlementCategory [EntitlementCategory]@
         * 'Proto.CMS.Common1_Fields.vec'subCategory' @:: Lens' EntitlementCategory (Data.Vector.Vector EntitlementCategory)@
         * 'Proto.CMS.Common1_Fields.brokerageAssignable' @:: Lens' EntitlementCategory Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'brokerageAssignable' @:: Lens' EntitlementCategory (Prelude.Maybe Prelude.Bool)@ -}
data EntitlementCategory
  = EntitlementCategory'_constructor {_EntitlementCategory'id :: !Data.Word.Word32,
                                      _EntitlementCategory'name :: !Proto.Common.Shared1.Text,
                                      _EntitlementCategory'subCategory :: !(Data.Vector.Vector EntitlementCategory),
                                      _EntitlementCategory'brokerageAssignable :: !(Prelude.Maybe Prelude.Bool),
                                      _EntitlementCategory'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EntitlementCategory where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EntitlementCategory "id" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementCategory'id
           (\ x__ y__ -> x__ {_EntitlementCategory'id = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementCategory "name" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementCategory'name
           (\ x__ y__ -> x__ {_EntitlementCategory'name = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementCategory "subCategory" [EntitlementCategory] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementCategory'subCategory
           (\ x__ y__ -> x__ {_EntitlementCategory'subCategory = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField EntitlementCategory "vec'subCategory" (Data.Vector.Vector EntitlementCategory) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementCategory'subCategory
           (\ x__ y__ -> x__ {_EntitlementCategory'subCategory = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementCategory "brokerageAssignable" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementCategory'brokerageAssignable
           (\ x__ y__
              -> x__ {_EntitlementCategory'brokerageAssignable = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementCategory "maybe'brokerageAssignable" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementCategory'brokerageAssignable
           (\ x__ y__
              -> x__ {_EntitlementCategory'brokerageAssignable = y__}))
        Prelude.id
instance Data.ProtoLens.Message EntitlementCategory where
  messageName _ = Data.Text.pack "common_1.EntitlementCategory"
  packedMessageDescriptor _
    = "\n\
      \\DC3EntitlementCategory\DC2\SO\n\
      \\STXid\CAN\SOH \STX(\rR\STXid\DC2\"\n\
      \\EOTname\CAN\STX \STX(\v2\SO.shared_1.TextR\EOTname\DC2@\n\
      \\fsub_category\CAN\ETX \ETX(\v2\GS.common_1.EntitlementCategoryR\vsubCategory\DC21\n\
      \\DC4brokerage_assignable\CAN\EOT \SOH(\bR\DC3brokerageAssignable"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"id")) ::
              Data.ProtoLens.FieldDescriptor EntitlementCategory
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"name")) ::
              Data.ProtoLens.FieldDescriptor EntitlementCategory
        subCategory__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sub_category"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor EntitlementCategory)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"subCategory")) ::
              Data.ProtoLens.FieldDescriptor EntitlementCategory
        brokerageAssignable__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "brokerage_assignable"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'brokerageAssignable")) ::
              Data.ProtoLens.FieldDescriptor EntitlementCategory
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, id__field_descriptor),
           (Data.ProtoLens.Tag 2, name__field_descriptor),
           (Data.ProtoLens.Tag 3, subCategory__field_descriptor),
           (Data.ProtoLens.Tag 4, brokerageAssignable__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EntitlementCategory'_unknownFields
        (\ x__ y__ -> x__ {_EntitlementCategory'_unknownFields = y__})
  defMessage
    = EntitlementCategory'_constructor
        {_EntitlementCategory'id = Data.ProtoLens.fieldDefault,
         _EntitlementCategory'name = Data.ProtoLens.defMessage,
         _EntitlementCategory'subCategory = Data.Vector.Generic.empty,
         _EntitlementCategory'brokerageAssignable = Prelude.Nothing,
         _EntitlementCategory'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EntitlementCategory
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld EntitlementCategory
                   -> Data.ProtoLens.Encoding.Bytes.Parser EntitlementCategory
        loop x required'id required'name mutable'subCategory
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'subCategory <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                 mutable'subCategory)
                      (let
                         missing
                           = (if required'id then (:) "id" else Prelude.id)
                               ((if required'name then (:) "name" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'subCategory") frozen'subCategory
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                                  Prelude.False required'name mutable'subCategory
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                                  required'id Prelude.False mutable'subCategory
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "sub_category"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'subCategory y)
                                loop x required'id required'name v
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "brokerage_assignable"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"brokerageAssignable") y x)
                                  required'id required'name mutable'subCategory
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'id required'name mutable'subCategory
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'subCategory <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True
                mutable'subCategory)
          "EntitlementCategory"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                ((Prelude..)
                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"id") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.ProtoLens.encodeMessage
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"name") _x)))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                              ((Prelude..)
                                 (\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Data.ProtoLens.encodeMessage _v))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'subCategory") _x))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'brokerageAssignable") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0) _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData EntitlementCategory where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EntitlementCategory'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_EntitlementCategory'id x__)
                (Control.DeepSeq.deepseq
                   (_EntitlementCategory'name x__)
                   (Control.DeepSeq.deepseq
                      (_EntitlementCategory'subCategory x__)
                      (Control.DeepSeq.deepseq
                         (_EntitlementCategory'brokerageAssignable x__) ()))))
{- | Fields :
      -}
data EntitlementCategoryListRequest
  = EntitlementCategoryListRequest'_constructor {_EntitlementCategoryListRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EntitlementCategoryListRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message EntitlementCategoryListRequest where
  messageName _
    = Data.Text.pack "common_1.EntitlementCategoryListRequest"
  packedMessageDescriptor _
    = "\n\
      \\RSEntitlementCategoryListRequest"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EntitlementCategoryListRequest'_unknownFields
        (\ x__ y__
           -> x__ {_EntitlementCategoryListRequest'_unknownFields = y__})
  defMessage
    = EntitlementCategoryListRequest'_constructor
        {_EntitlementCategoryListRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EntitlementCategoryListRequest
          -> Data.ProtoLens.Encoding.Bytes.Parser EntitlementCategoryListRequest
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "EntitlementCategoryListRequest"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData EntitlementCategoryListRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EntitlementCategoryListRequest'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.constraintType' @:: Lens' EntitlementConstraint Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.refServiceId' @:: Lens' EntitlementConstraint Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'refServiceId' @:: Lens' EntitlementConstraint (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.constraintGroup' @:: Lens' EntitlementConstraint Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'constraintGroup' @:: Lens' EntitlementConstraint (Prelude.Maybe Data.Text.Text)@ -}
data EntitlementConstraint
  = EntitlementConstraint'_constructor {_EntitlementConstraint'constraintType :: !Data.Word.Word32,
                                        _EntitlementConstraint'refServiceId :: !(Prelude.Maybe Data.Word.Word32),
                                        _EntitlementConstraint'constraintGroup :: !(Prelude.Maybe Data.Text.Text),
                                        _EntitlementConstraint'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EntitlementConstraint where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EntitlementConstraint "constraintType" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementConstraint'constraintType
           (\ x__ y__ -> x__ {_EntitlementConstraint'constraintType = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementConstraint "refServiceId" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementConstraint'refServiceId
           (\ x__ y__ -> x__ {_EntitlementConstraint'refServiceId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementConstraint "maybe'refServiceId" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementConstraint'refServiceId
           (\ x__ y__ -> x__ {_EntitlementConstraint'refServiceId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementConstraint "constraintGroup" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementConstraint'constraintGroup
           (\ x__ y__ -> x__ {_EntitlementConstraint'constraintGroup = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementConstraint "maybe'constraintGroup" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementConstraint'constraintGroup
           (\ x__ y__ -> x__ {_EntitlementConstraint'constraintGroup = y__}))
        Prelude.id
instance Data.ProtoLens.Message EntitlementConstraint where
  messageName _ = Data.Text.pack "common_1.EntitlementConstraint"
  packedMessageDescriptor _
    = "\n\
      \\NAKEntitlementConstraint\DC2'\n\
      \\SIconstraint_type\CAN\SOH \STX(\rR\SOconstraintType\DC2$\n\
      \\SOref_service_id\CAN\STX \SOH(\rR\frefServiceId\DC2)\n\
      \\DLEconstraint_group\CAN\ETX \SOH(\tR\SIconstraintGroup\"p\n\
      \\EOTType\DC2\v\n\
      \\aEXCLUDE\DLE\SOH\DC2\v\n\
      \\aWARNING\DLE\STX\DC2\SYN\n\
      \\DC2MANDATORY_ONLY_ONE\DLE\ETX\DC2\f\n\
      \\bPICK_ONE\DLE\EOT\DC2\NAK\n\
      \\DC1PRODUCT_WHITELIST\DLE\ENQ\DC2\DC1\n\
      \\rINCLUDE_ITEMS\DLE\ACK"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        constraintType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "constraint_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"constraintType")) ::
              Data.ProtoLens.FieldDescriptor EntitlementConstraint
        refServiceId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ref_service_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'refServiceId")) ::
              Data.ProtoLens.FieldDescriptor EntitlementConstraint
        constraintGroup__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "constraint_group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'constraintGroup")) ::
              Data.ProtoLens.FieldDescriptor EntitlementConstraint
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, constraintType__field_descriptor),
           (Data.ProtoLens.Tag 2, refServiceId__field_descriptor),
           (Data.ProtoLens.Tag 3, constraintGroup__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EntitlementConstraint'_unknownFields
        (\ x__ y__ -> x__ {_EntitlementConstraint'_unknownFields = y__})
  defMessage
    = EntitlementConstraint'_constructor
        {_EntitlementConstraint'constraintType = Data.ProtoLens.fieldDefault,
         _EntitlementConstraint'refServiceId = Prelude.Nothing,
         _EntitlementConstraint'constraintGroup = Prelude.Nothing,
         _EntitlementConstraint'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EntitlementConstraint
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser EntitlementConstraint
        loop x required'constraintType
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'constraintType then
                                  (:) "constraint_type"
                              else
                                  Prelude.id)
                               []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "constraint_type"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"constraintType") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ref_service_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"refServiceId") y x)
                                  required'constraintType
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "constraint_group"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"constraintGroup") y x)
                                  required'constraintType
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'constraintType
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "EntitlementConstraint"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                ((Prelude..)
                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"constraintType") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'refServiceId") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'constraintGroup") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData EntitlementConstraint where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EntitlementConstraint'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_EntitlementConstraint'constraintType x__)
                (Control.DeepSeq.deepseq
                   (_EntitlementConstraint'refServiceId x__)
                   (Control.DeepSeq.deepseq
                      (_EntitlementConstraint'constraintGroup x__) ())))
data EntitlementConstraint'Type
  = EntitlementConstraint'EXCLUDE |
    EntitlementConstraint'WARNING |
    EntitlementConstraint'MANDATORY_ONLY_ONE |
    EntitlementConstraint'PICK_ONE |
    EntitlementConstraint'PRODUCT_WHITELIST |
    EntitlementConstraint'INCLUDE_ITEMS
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum EntitlementConstraint'Type where
  maybeToEnum 1 = Prelude.Just EntitlementConstraint'EXCLUDE
  maybeToEnum 2 = Prelude.Just EntitlementConstraint'WARNING
  maybeToEnum 3
    = Prelude.Just EntitlementConstraint'MANDATORY_ONLY_ONE
  maybeToEnum 4 = Prelude.Just EntitlementConstraint'PICK_ONE
  maybeToEnum 5
    = Prelude.Just EntitlementConstraint'PRODUCT_WHITELIST
  maybeToEnum 6 = Prelude.Just EntitlementConstraint'INCLUDE_ITEMS
  maybeToEnum _ = Prelude.Nothing
  showEnum EntitlementConstraint'EXCLUDE = "EXCLUDE"
  showEnum EntitlementConstraint'WARNING = "WARNING"
  showEnum EntitlementConstraint'MANDATORY_ONLY_ONE
    = "MANDATORY_ONLY_ONE"
  showEnum EntitlementConstraint'PICK_ONE = "PICK_ONE"
  showEnum EntitlementConstraint'PRODUCT_WHITELIST
    = "PRODUCT_WHITELIST"
  showEnum EntitlementConstraint'INCLUDE_ITEMS = "INCLUDE_ITEMS"
  readEnum k
    | (Prelude.==) k "EXCLUDE"
    = Prelude.Just EntitlementConstraint'EXCLUDE
    | (Prelude.==) k "WARNING"
    = Prelude.Just EntitlementConstraint'WARNING
    | (Prelude.==) k "MANDATORY_ONLY_ONE"
    = Prelude.Just EntitlementConstraint'MANDATORY_ONLY_ONE
    | (Prelude.==) k "PICK_ONE"
    = Prelude.Just EntitlementConstraint'PICK_ONE
    | (Prelude.==) k "PRODUCT_WHITELIST"
    = Prelude.Just EntitlementConstraint'PRODUCT_WHITELIST
    | (Prelude.==) k "INCLUDE_ITEMS"
    = Prelude.Just EntitlementConstraint'INCLUDE_ITEMS
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded EntitlementConstraint'Type where
  minBound = EntitlementConstraint'EXCLUDE
  maxBound = EntitlementConstraint'INCLUDE_ITEMS
instance Prelude.Enum EntitlementConstraint'Type where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum Type: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum EntitlementConstraint'EXCLUDE = 1
  fromEnum EntitlementConstraint'WARNING = 2
  fromEnum EntitlementConstraint'MANDATORY_ONLY_ONE = 3
  fromEnum EntitlementConstraint'PICK_ONE = 4
  fromEnum EntitlementConstraint'PRODUCT_WHITELIST = 5
  fromEnum EntitlementConstraint'INCLUDE_ITEMS = 6
  succ EntitlementConstraint'INCLUDE_ITEMS
    = Prelude.error
        "EntitlementConstraint'Type.succ: bad argument EntitlementConstraint'INCLUDE_ITEMS. This value would be out of bounds."
  succ EntitlementConstraint'EXCLUDE = EntitlementConstraint'WARNING
  succ EntitlementConstraint'WARNING
    = EntitlementConstraint'MANDATORY_ONLY_ONE
  succ EntitlementConstraint'MANDATORY_ONLY_ONE
    = EntitlementConstraint'PICK_ONE
  succ EntitlementConstraint'PICK_ONE
    = EntitlementConstraint'PRODUCT_WHITELIST
  succ EntitlementConstraint'PRODUCT_WHITELIST
    = EntitlementConstraint'INCLUDE_ITEMS
  pred EntitlementConstraint'EXCLUDE
    = Prelude.error
        "EntitlementConstraint'Type.pred: bad argument EntitlementConstraint'EXCLUDE. This value would be out of bounds."
  pred EntitlementConstraint'WARNING = EntitlementConstraint'EXCLUDE
  pred EntitlementConstraint'MANDATORY_ONLY_ONE
    = EntitlementConstraint'WARNING
  pred EntitlementConstraint'PICK_ONE
    = EntitlementConstraint'MANDATORY_ONLY_ONE
  pred EntitlementConstraint'PRODUCT_WHITELIST
    = EntitlementConstraint'PICK_ONE
  pred EntitlementConstraint'INCLUDE_ITEMS
    = EntitlementConstraint'PRODUCT_WHITELIST
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault EntitlementConstraint'Type where
  fieldDefault = EntitlementConstraint'EXCLUDE
instance Control.DeepSeq.NFData EntitlementConstraint'Type where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' EntitlementService Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.name' @:: Lens' EntitlementService Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.categoryId' @:: Lens' EntitlementService [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'categoryId' @:: Lens' EntitlementService (Data.Vector.Unboxed.Vector Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.price' @:: Lens' EntitlementService [Price]@
         * 'Proto.CMS.Common1_Fields.vec'price' @:: Lens' EntitlementService (Data.Vector.Vector Price)@
         * 'Proto.CMS.Common1_Fields.description' @:: Lens' EntitlementService Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.authorizationType' @:: Lens' EntitlementService Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.constraint' @:: Lens' EntitlementService [EntitlementConstraint]@
         * 'Proto.CMS.Common1_Fields.vec'constraint' @:: Lens' EntitlementService (Data.Vector.Vector EntitlementConstraint)@
         * 'Proto.CMS.Common1_Fields.obsoleteAgreementRequired' @:: Lens' EntitlementService Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteAgreementRequired' @:: Lens' EntitlementService (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.obsoleteAgreement' @:: Lens' EntitlementService Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteAgreement' @:: Lens' EntitlementService (Prelude.Maybe Proto.Common.Shared1.Text)@
         * 'Proto.CMS.Common1_Fields.subscriberType' @:: Lens' EntitlementService Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'subscriberType' @:: Lens' EntitlementService (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.billingBrokerageRequired' @:: Lens' EntitlementService Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'billingBrokerageRequired' @:: Lens' EntitlementService (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.loginDomains' @:: Lens' EntitlementService [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'loginDomains' @:: Lens' EntitlementService (Data.Vector.Unboxed.Vector Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.options' @:: Lens' EntitlementService [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'options' @:: Lens' EntitlementService (Data.Vector.Unboxed.Vector Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.items' @:: Lens' EntitlementService [EntitlementServiceItem]@
         * 'Proto.CMS.Common1_Fields.vec'items' @:: Lens' EntitlementService (Data.Vector.Vector EntitlementServiceItem)@
         * 'Proto.CMS.Common1_Fields.brokerageAssignable' @:: Lens' EntitlementService Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'brokerageAssignable' @:: Lens' EntitlementService (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.brokerageAuthorizationRequired' @:: Lens' EntitlementService Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'brokerageAuthorizationRequired' @:: Lens' EntitlementService (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.default'' @:: Lens' EntitlementService Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'default'' @:: Lens' EntitlementService (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.visibleByCqgOnly' @:: Lens' EntitlementService Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'visibleByCqgOnly' @:: Lens' EntitlementService (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.contractType' @:: Lens' EntitlementService Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'contractType' @:: Lens' EntitlementService (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.retired' @:: Lens' EntitlementService Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'retired' @:: Lens' EntitlementService (Prelude.Maybe Prelude.Bool)@ -}
data EntitlementService
  = EntitlementService'_constructor {_EntitlementService'id :: !Data.Word.Word32,
                                     _EntitlementService'name :: !Proto.Common.Shared1.Text,
                                     _EntitlementService'categoryId :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                                     _EntitlementService'price :: !(Data.Vector.Vector Price),
                                     _EntitlementService'description :: !Proto.Common.Shared1.Text,
                                     _EntitlementService'authorizationType :: !Data.Word.Word32,
                                     _EntitlementService'constraint :: !(Data.Vector.Vector EntitlementConstraint),
                                     _EntitlementService'obsoleteAgreementRequired :: !(Prelude.Maybe Prelude.Bool),
                                     _EntitlementService'obsoleteAgreement :: !(Prelude.Maybe Proto.Common.Shared1.Text),
                                     _EntitlementService'subscriberType :: !(Prelude.Maybe Data.Word.Word32),
                                     _EntitlementService'billingBrokerageRequired :: !(Prelude.Maybe Prelude.Bool),
                                     _EntitlementService'loginDomains :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                                     _EntitlementService'options :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                                     _EntitlementService'items :: !(Data.Vector.Vector EntitlementServiceItem),
                                     _EntitlementService'brokerageAssignable :: !(Prelude.Maybe Prelude.Bool),
                                     _EntitlementService'brokerageAuthorizationRequired :: !(Prelude.Maybe Prelude.Bool),
                                     _EntitlementService'default' :: !(Prelude.Maybe Prelude.Bool),
                                     _EntitlementService'visibleByCqgOnly :: !(Prelude.Maybe Prelude.Bool),
                                     _EntitlementService'contractType :: !(Prelude.Maybe Data.Text.Text),
                                     _EntitlementService'retired :: !(Prelude.Maybe Prelude.Bool),
                                     _EntitlementService'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EntitlementService where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EntitlementService "id" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'id
           (\ x__ y__ -> x__ {_EntitlementService'id = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "name" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'name
           (\ x__ y__ -> x__ {_EntitlementService'name = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "categoryId" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'categoryId
           (\ x__ y__ -> x__ {_EntitlementService'categoryId = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField EntitlementService "vec'categoryId" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'categoryId
           (\ x__ y__ -> x__ {_EntitlementService'categoryId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "price" [Price] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'price
           (\ x__ y__ -> x__ {_EntitlementService'price = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField EntitlementService "vec'price" (Data.Vector.Vector Price) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'price
           (\ x__ y__ -> x__ {_EntitlementService'price = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "description" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'description
           (\ x__ y__ -> x__ {_EntitlementService'description = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "authorizationType" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'authorizationType
           (\ x__ y__ -> x__ {_EntitlementService'authorizationType = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "constraint" [EntitlementConstraint] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'constraint
           (\ x__ y__ -> x__ {_EntitlementService'constraint = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField EntitlementService "vec'constraint" (Data.Vector.Vector EntitlementConstraint) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'constraint
           (\ x__ y__ -> x__ {_EntitlementService'constraint = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "obsoleteAgreementRequired" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'obsoleteAgreementRequired
           (\ x__ y__
              -> x__ {_EntitlementService'obsoleteAgreementRequired = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementService "maybe'obsoleteAgreementRequired" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'obsoleteAgreementRequired
           (\ x__ y__
              -> x__ {_EntitlementService'obsoleteAgreementRequired = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "obsoleteAgreement" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'obsoleteAgreement
           (\ x__ y__ -> x__ {_EntitlementService'obsoleteAgreement = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField EntitlementService "maybe'obsoleteAgreement" (Prelude.Maybe Proto.Common.Shared1.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'obsoleteAgreement
           (\ x__ y__ -> x__ {_EntitlementService'obsoleteAgreement = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "subscriberType" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'subscriberType
           (\ x__ y__ -> x__ {_EntitlementService'subscriberType = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementService "maybe'subscriberType" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'subscriberType
           (\ x__ y__ -> x__ {_EntitlementService'subscriberType = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "billingBrokerageRequired" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'billingBrokerageRequired
           (\ x__ y__
              -> x__ {_EntitlementService'billingBrokerageRequired = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementService "maybe'billingBrokerageRequired" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'billingBrokerageRequired
           (\ x__ y__
              -> x__ {_EntitlementService'billingBrokerageRequired = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "loginDomains" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'loginDomains
           (\ x__ y__ -> x__ {_EntitlementService'loginDomains = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField EntitlementService "vec'loginDomains" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'loginDomains
           (\ x__ y__ -> x__ {_EntitlementService'loginDomains = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "options" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'options
           (\ x__ y__ -> x__ {_EntitlementService'options = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField EntitlementService "vec'options" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'options
           (\ x__ y__ -> x__ {_EntitlementService'options = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "items" [EntitlementServiceItem] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'items
           (\ x__ y__ -> x__ {_EntitlementService'items = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField EntitlementService "vec'items" (Data.Vector.Vector EntitlementServiceItem) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'items
           (\ x__ y__ -> x__ {_EntitlementService'items = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "brokerageAssignable" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'brokerageAssignable
           (\ x__ y__ -> x__ {_EntitlementService'brokerageAssignable = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementService "maybe'brokerageAssignable" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'brokerageAssignable
           (\ x__ y__ -> x__ {_EntitlementService'brokerageAssignable = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "brokerageAuthorizationRequired" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'brokerageAuthorizationRequired
           (\ x__ y__
              -> x__ {_EntitlementService'brokerageAuthorizationRequired = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementService "maybe'brokerageAuthorizationRequired" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'brokerageAuthorizationRequired
           (\ x__ y__
              -> x__ {_EntitlementService'brokerageAuthorizationRequired = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "default'" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'default'
           (\ x__ y__ -> x__ {_EntitlementService'default' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementService "maybe'default'" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'default'
           (\ x__ y__ -> x__ {_EntitlementService'default' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "visibleByCqgOnly" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'visibleByCqgOnly
           (\ x__ y__ -> x__ {_EntitlementService'visibleByCqgOnly = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementService "maybe'visibleByCqgOnly" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'visibleByCqgOnly
           (\ x__ y__ -> x__ {_EntitlementService'visibleByCqgOnly = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "contractType" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'contractType
           (\ x__ y__ -> x__ {_EntitlementService'contractType = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementService "maybe'contractType" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'contractType
           (\ x__ y__ -> x__ {_EntitlementService'contractType = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementService "retired" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'retired
           (\ x__ y__ -> x__ {_EntitlementService'retired = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementService "maybe'retired" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementService'retired
           (\ x__ y__ -> x__ {_EntitlementService'retired = y__}))
        Prelude.id
instance Data.ProtoLens.Message EntitlementService where
  messageName _ = Data.Text.pack "common_1.EntitlementService"
  packedMessageDescriptor _
    = "\n\
      \\DC2EntitlementService\DC2\SO\n\
      \\STXid\CAN\SOH \STX(\rR\STXid\DC2\"\n\
      \\EOTname\CAN\STX \STX(\v2\SO.shared_1.TextR\EOTname\DC2\US\n\
      \\vcategory_id\CAN\ETX \ETX(\rR\n\
      \categoryId\DC2%\n\
      \\ENQprice\CAN\EOT \ETX(\v2\SI.common_1.PriceR\ENQprice\DC20\n\
      \\vdescription\CAN\ENQ \STX(\v2\SO.shared_1.TextR\vdescription\DC2-\n\
      \\DC2authorization_type\CAN\ACK \STX(\rR\DC1authorizationType\DC2?\n\
      \\n\
      \constraint\CAN\a \ETX(\v2\US.common_1.EntitlementConstraintR\n\
      \constraint\DC2B\n\
      \\ESCobsolete_agreement_required\CAN\b \SOH(\bR\EMobsoleteAgreementRequiredB\STX\CAN\SOH\DC2A\n\
      \\DC2obsolete_agreement\CAN\t \SOH(\v2\SO.shared_1.TextR\DC1obsoleteAgreementB\STX\CAN\SOH\DC2'\n\
      \\SIsubscriber_type\CAN\n\
      \ \SOH(\rR\SOsubscriberType\DC2<\n\
      \\SUBbilling_brokerage_required\CAN\v \SOH(\bR\CANbillingBrokerageRequired\DC2#\n\
      \\rlogin_domains\CAN\f \ETX(\rR\floginDomains\DC2\CAN\n\
      \\aoptions\CAN\r \ETX(\rR\aoptions\DC26\n\
      \\ENQitems\CAN\SO \ETX(\v2 .common_1.EntitlementServiceItemR\ENQitems\DC21\n\
      \\DC4brokerage_assignable\CAN\SI \SOH(\bR\DC3brokerageAssignable\DC2H\n\
      \ brokerage_authorization_required\CAN\DLE \SOH(\bR\RSbrokerageAuthorizationRequired\DC2\CAN\n\
      \\adefault\CAN\DC1 \SOH(\bR\adefault\DC2-\n\
      \\DC3visible_by_cqg_only\CAN\DC2 \SOH(\bR\DLEvisibleByCqgOnly\DC2#\n\
      \\rcontract_type\CAN\DC3 \SOH(\tR\fcontractType\DC2\CAN\n\
      \\aretired\CAN\DC4 \SOH(\bR\aretired\"W\n\
      \\DC1AuthorizationType\DC2\DLE\n\
      \\fDISABLE_ONLY\DLE\SOH\DC2\r\n\
      \\tVIEW_ONLY\DLE\STX\DC2\SI\n\
      \\vENABLE_ONLY\DLE\ETX\DC2\DLE\n\
      \\fFULL_CONTROL\DLE\EOT\";\n\
      \\rServiceOption\DC2\DC4\n\
      \\DLEONLY_FOR_TRADERS\DLE\SOH\DC2\DC4\n\
      \\DLEFREE_FOR_TRADERS\DLE\STX"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"id")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"name")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        categoryId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "category_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"categoryId")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        price__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "price"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Price)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"price")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        description__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "description"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"description")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        authorizationType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "authorization_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"authorizationType")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        constraint__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "constraint"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor EntitlementConstraint)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"constraint")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        obsoleteAgreementRequired__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_agreement_required"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsoleteAgreementRequired")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        obsoleteAgreement__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_agreement"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsoleteAgreement")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        subscriberType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "subscriber_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'subscriberType")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        billingBrokerageRequired__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "billing_brokerage_required"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'billingBrokerageRequired")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        loginDomains__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_domains"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"loginDomains")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        options__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "options"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"options")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        items__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "items"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor EntitlementServiceItem)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"items")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        brokerageAssignable__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "brokerage_assignable"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'brokerageAssignable")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        brokerageAuthorizationRequired__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "brokerage_authorization_required"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'brokerageAuthorizationRequired")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        default'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "default"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'default'")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        visibleByCqgOnly__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "visible_by_cqg_only"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'visibleByCqgOnly")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        contractType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "contract_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'contractType")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
        retired__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "retired"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'retired")) ::
              Data.ProtoLens.FieldDescriptor EntitlementService
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, id__field_descriptor),
           (Data.ProtoLens.Tag 2, name__field_descriptor),
           (Data.ProtoLens.Tag 3, categoryId__field_descriptor),
           (Data.ProtoLens.Tag 4, price__field_descriptor),
           (Data.ProtoLens.Tag 5, description__field_descriptor),
           (Data.ProtoLens.Tag 6, authorizationType__field_descriptor),
           (Data.ProtoLens.Tag 7, constraint__field_descriptor),
           (Data.ProtoLens.Tag 8, 
            obsoleteAgreementRequired__field_descriptor),
           (Data.ProtoLens.Tag 9, obsoleteAgreement__field_descriptor),
           (Data.ProtoLens.Tag 10, subscriberType__field_descriptor),
           (Data.ProtoLens.Tag 11, 
            billingBrokerageRequired__field_descriptor),
           (Data.ProtoLens.Tag 12, loginDomains__field_descriptor),
           (Data.ProtoLens.Tag 13, options__field_descriptor),
           (Data.ProtoLens.Tag 14, items__field_descriptor),
           (Data.ProtoLens.Tag 15, brokerageAssignable__field_descriptor),
           (Data.ProtoLens.Tag 16, 
            brokerageAuthorizationRequired__field_descriptor),
           (Data.ProtoLens.Tag 17, default'__field_descriptor),
           (Data.ProtoLens.Tag 18, visibleByCqgOnly__field_descriptor),
           (Data.ProtoLens.Tag 19, contractType__field_descriptor),
           (Data.ProtoLens.Tag 20, retired__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EntitlementService'_unknownFields
        (\ x__ y__ -> x__ {_EntitlementService'_unknownFields = y__})
  defMessage
    = EntitlementService'_constructor
        {_EntitlementService'id = Data.ProtoLens.fieldDefault,
         _EntitlementService'name = Data.ProtoLens.defMessage,
         _EntitlementService'categoryId = Data.Vector.Generic.empty,
         _EntitlementService'price = Data.Vector.Generic.empty,
         _EntitlementService'description = Data.ProtoLens.defMessage,
         _EntitlementService'authorizationType = Data.ProtoLens.fieldDefault,
         _EntitlementService'constraint = Data.Vector.Generic.empty,
         _EntitlementService'obsoleteAgreementRequired = Prelude.Nothing,
         _EntitlementService'obsoleteAgreement = Prelude.Nothing,
         _EntitlementService'subscriberType = Prelude.Nothing,
         _EntitlementService'billingBrokerageRequired = Prelude.Nothing,
         _EntitlementService'loginDomains = Data.Vector.Generic.empty,
         _EntitlementService'options = Data.Vector.Generic.empty,
         _EntitlementService'items = Data.Vector.Generic.empty,
         _EntitlementService'brokerageAssignable = Prelude.Nothing,
         _EntitlementService'brokerageAuthorizationRequired = Prelude.Nothing,
         _EntitlementService'default' = Prelude.Nothing,
         _EntitlementService'visibleByCqgOnly = Prelude.Nothing,
         _EntitlementService'contractType = Prelude.Nothing,
         _EntitlementService'retired = Prelude.Nothing,
         _EntitlementService'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EntitlementService
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Prelude.Bool
                      -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
                         -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld EntitlementConstraint
                            -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld EntitlementServiceItem
                               -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
                                  -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
                                     -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Price
                                        -> Data.ProtoLens.Encoding.Bytes.Parser EntitlementService
        loop
          x
          required'authorizationType
          required'description
          required'id
          required'name
          mutable'categoryId
          mutable'constraint
          mutable'items
          mutable'loginDomains
          mutable'options
          mutable'price
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'categoryId <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'categoryId)
                      frozen'constraint <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'constraint)
                      frozen'items <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'items)
                      frozen'loginDomains <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                               (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                  mutable'loginDomains)
                      frozen'options <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'options)
                      frozen'price <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'price)
                      (let
                         missing
                           = (if required'authorizationType then
                                  (:) "authorization_type"
                              else
                                  Prelude.id)
                               ((if required'description then (:) "description" else Prelude.id)
                                  ((if required'id then (:) "id" else Prelude.id)
                                     ((if required'name then (:) "name" else Prelude.id) [])))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'categoryId") frozen'categoryId
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'constraint") frozen'constraint
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'items") frozen'items
                                    (Lens.Family2.set
                                       (Data.ProtoLens.Field.field @"vec'loginDomains")
                                       frozen'loginDomains
                                       (Lens.Family2.set
                                          (Data.ProtoLens.Field.field @"vec'options") frozen'options
                                          (Lens.Family2.set
                                             (Data.ProtoLens.Field.field @"vec'price") frozen'price
                                             x)))))))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                                  required'authorizationType required'description Prelude.False
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                                  required'authorizationType required'description required'id
                                  Prelude.False mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        24
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "category_id"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'categoryId y)
                                loop
                                  x required'authorizationType required'description required'id
                                  required'name v mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        26
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "category_id"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'categoryId)
                                loop
                                  x required'authorizationType required'description required'id
                                  required'name y mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        34
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "price"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'price y)
                                loop
                                  x required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options v
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "description"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"description") y x)
                                  required'authorizationType Prelude.False required'id required'name
                                  mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "authorization_type"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"authorizationType") y x)
                                  Prelude.False required'description required'id required'name
                                  mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        58
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "constraint"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'constraint y)
                                loop
                                  x required'authorizationType required'description required'id
                                  required'name mutable'categoryId v mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "obsolete_agreement_required"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteAgreementRequired") y x)
                                  required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        74
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "obsolete_agreement"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteAgreement") y x)
                                  required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "subscriber_type"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"subscriberType") y x)
                                  required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "billing_brokerage_required"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"billingBrokerageRequired") y x)
                                  required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        96
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "login_domains"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'loginDomains y)
                                loop
                                  x required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  v mutable'options mutable'price
                        98
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "login_domains"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'loginDomains)
                                loop
                                  x required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  y mutable'options mutable'price
                        104
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "options"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'options y)
                                loop
                                  x required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains v mutable'price
                        106
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "options"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'options)
                                loop
                                  x required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains y mutable'price
                        114
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "items"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'items y)
                                loop
                                  x required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint v
                                  mutable'loginDomains mutable'options mutable'price
                        120
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "brokerage_assignable"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"brokerageAssignable") y x)
                                  required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        128
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "brokerage_authorization_required"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"brokerageAuthorizationRequired")
                                     y x)
                                  required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        136
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "default"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"default'") y x)
                                  required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        144
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "visible_by_cqg_only"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"visibleByCqgOnly") y x)
                                  required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        154
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "contract_type"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"contractType") y x)
                                  required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        160
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "retired"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"retired") y x)
                                  required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'authorizationType required'description required'id
                                  required'name mutable'categoryId mutable'constraint mutable'items
                                  mutable'loginDomains mutable'options mutable'price
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'categoryId <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              mutable'constraint <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              mutable'items <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                 Data.ProtoLens.Encoding.Growing.new
              mutable'loginDomains <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        Data.ProtoLens.Encoding.Growing.new
              mutable'options <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              mutable'price <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                 Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True Prelude.True
                Prelude.True mutable'categoryId mutable'constraint mutable'items
                mutable'loginDomains mutable'options mutable'price)
          "EntitlementService"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                ((Prelude..)
                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"id") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.ProtoLens.encodeMessage
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"name") _x)))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                              ((Prelude..)
                                 Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'categoryId") _x))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                 ((Prelude..)
                                    (\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Data.ProtoLens.encodeMessage _v))
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'price") _x))
                      ((Data.Monoid.<>)
                         ((Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                            ((Prelude..)
                               (\ bs
                                  -> (Data.Monoid.<>)
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                          (Prelude.fromIntegral (Data.ByteString.length bs)))
                                       (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                               Data.ProtoLens.encodeMessage
                               (Lens.Family2.view
                                  (Data.ProtoLens.Field.field @"description") _x)))
                         ((Data.Monoid.<>)
                            ((Data.Monoid.<>)
                               (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                               ((Prelude..)
                                  Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                  (Lens.Family2.view
                                     (Data.ProtoLens.Field.field @"authorizationType") _x)))
                            ((Data.Monoid.<>)
                               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                  (\ _v
                                     -> (Data.Monoid.<>)
                                          (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                          ((Prelude..)
                                             (\ bs
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (Prelude.fromIntegral
                                                           (Data.ByteString.length bs)))
                                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                             Data.ProtoLens.encodeMessage _v))
                                  (Lens.Family2.view
                                     (Data.ProtoLens.Field.field @"vec'constraint") _x))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field
                                            @"maybe'obsoleteAgreementRequired")
                                         _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (\ b -> if b then 1 else 0) _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'obsoleteAgreement")
                                            _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                               ((Prelude..)
                                                  (\ bs
                                                     -> (Data.Monoid.<>)
                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                             (Prelude.fromIntegral
                                                                (Data.ByteString.length bs)))
                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                             bs))
                                                  Data.ProtoLens.encodeMessage _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'subscriberType")
                                               _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field
                                                     @"maybe'billingBrokerageRequired")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (\ b -> if b then 1 else 0) _v))
                                           ((Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                                 (\ _v
                                                    -> (Data.Monoid.<>)
                                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                            96)
                                                         ((Prelude..)
                                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                                            Prelude.fromIntegral _v))
                                                 (Lens.Family2.view
                                                    (Data.ProtoLens.Field.field @"vec'loginDomains")
                                                    _x))
                                              ((Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                                    (\ _v
                                                       -> (Data.Monoid.<>)
                                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                               104)
                                                            ((Prelude..)
                                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                                               Prelude.fromIntegral _v))
                                                    (Lens.Family2.view
                                                       (Data.ProtoLens.Field.field @"vec'options")
                                                       _x))
                                                 ((Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                                       (\ _v
                                                          -> (Data.Monoid.<>)
                                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                  114)
                                                               ((Prelude..)
                                                                  (\ bs
                                                                     -> (Data.Monoid.<>)
                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             (Prelude.fromIntegral
                                                                                (Data.ByteString.length
                                                                                   bs)))
                                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                             bs))
                                                                  Data.ProtoLens.encodeMessage _v))
                                                       (Lens.Family2.view
                                                          (Data.ProtoLens.Field.field @"vec'items")
                                                          _x))
                                                    ((Data.Monoid.<>)
                                                       (case
                                                            Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"maybe'brokerageAssignable")
                                                              _x
                                                        of
                                                          Prelude.Nothing -> Data.Monoid.mempty
                                                          (Prelude.Just _v)
                                                            -> (Data.Monoid.<>)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    120)
                                                                 ((Prelude..)
                                                                    Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    (\ b -> if b then 1 else 0) _v))
                                                       ((Data.Monoid.<>)
                                                          (case
                                                               Lens.Family2.view
                                                                 (Data.ProtoLens.Field.field
                                                                    @"maybe'brokerageAuthorizationRequired")
                                                                 _x
                                                           of
                                                             Prelude.Nothing -> Data.Monoid.mempty
                                                             (Prelude.Just _v)
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       128)
                                                                    ((Prelude..)
                                                                       Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       (\ b -> if b then 1 else 0)
                                                                       _v))
                                                          ((Data.Monoid.<>)
                                                             (case
                                                                  Lens.Family2.view
                                                                    (Data.ProtoLens.Field.field
                                                                       @"maybe'default'")
                                                                    _x
                                                              of
                                                                Prelude.Nothing
                                                                  -> Data.Monoid.mempty
                                                                (Prelude.Just _v)
                                                                  -> (Data.Monoid.<>)
                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                          136)
                                                                       ((Prelude..)
                                                                          Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                          (\ b
                                                                             -> if b then 1 else 0)
                                                                          _v))
                                                             ((Data.Monoid.<>)
                                                                (case
                                                                     Lens.Family2.view
                                                                       (Data.ProtoLens.Field.field
                                                                          @"maybe'visibleByCqgOnly")
                                                                       _x
                                                                 of
                                                                   Prelude.Nothing
                                                                     -> Data.Monoid.mempty
                                                                   (Prelude.Just _v)
                                                                     -> (Data.Monoid.<>)
                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             144)
                                                                          ((Prelude..)
                                                                             Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             (\ b
                                                                                -> if b then
                                                                                       1
                                                                                   else
                                                                                       0)
                                                                             _v))
                                                                ((Data.Monoid.<>)
                                                                   (case
                                                                        Lens.Family2.view
                                                                          (Data.ProtoLens.Field.field
                                                                             @"maybe'contractType")
                                                                          _x
                                                                    of
                                                                      Prelude.Nothing
                                                                        -> Data.Monoid.mempty
                                                                      (Prelude.Just _v)
                                                                        -> (Data.Monoid.<>)
                                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                154)
                                                                             ((Prelude..)
                                                                                (\ bs
                                                                                   -> (Data.Monoid.<>)
                                                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                           (Prelude.fromIntegral
                                                                                              (Data.ByteString.length
                                                                                                 bs)))
                                                                                        (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                           bs))
                                                                                Data.Text.Encoding.encodeUtf8
                                                                                _v))
                                                                   ((Data.Monoid.<>)
                                                                      (case
                                                                           Lens.Family2.view
                                                                             (Data.ProtoLens.Field.field
                                                                                @"maybe'retired")
                                                                             _x
                                                                       of
                                                                         Prelude.Nothing
                                                                           -> Data.Monoid.mempty
                                                                         (Prelude.Just _v)
                                                                           -> (Data.Monoid.<>)
                                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                   160)
                                                                                ((Prelude..)
                                                                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                   (\ b
                                                                                      -> if b then
                                                                                             1
                                                                                         else
                                                                                             0)
                                                                                   _v))
                                                                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                                         (Lens.Family2.view
                                                                            Data.ProtoLens.unknownFields
                                                                            _x)))))))))))))))))))))
instance Control.DeepSeq.NFData EntitlementService where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EntitlementService'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_EntitlementService'id x__)
                (Control.DeepSeq.deepseq
                   (_EntitlementService'name x__)
                   (Control.DeepSeq.deepseq
                      (_EntitlementService'categoryId x__)
                      (Control.DeepSeq.deepseq
                         (_EntitlementService'price x__)
                         (Control.DeepSeq.deepseq
                            (_EntitlementService'description x__)
                            (Control.DeepSeq.deepseq
                               (_EntitlementService'authorizationType x__)
                               (Control.DeepSeq.deepseq
                                  (_EntitlementService'constraint x__)
                                  (Control.DeepSeq.deepseq
                                     (_EntitlementService'obsoleteAgreementRequired x__)
                                     (Control.DeepSeq.deepseq
                                        (_EntitlementService'obsoleteAgreement x__)
                                        (Control.DeepSeq.deepseq
                                           (_EntitlementService'subscriberType x__)
                                           (Control.DeepSeq.deepseq
                                              (_EntitlementService'billingBrokerageRequired x__)
                                              (Control.DeepSeq.deepseq
                                                 (_EntitlementService'loginDomains x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_EntitlementService'options x__)
                                                    (Control.DeepSeq.deepseq
                                                       (_EntitlementService'items x__)
                                                       (Control.DeepSeq.deepseq
                                                          (_EntitlementService'brokerageAssignable
                                                             x__)
                                                          (Control.DeepSeq.deepseq
                                                             (_EntitlementService'brokerageAuthorizationRequired
                                                                x__)
                                                             (Control.DeepSeq.deepseq
                                                                (_EntitlementService'default' x__)
                                                                (Control.DeepSeq.deepseq
                                                                   (_EntitlementService'visibleByCqgOnly
                                                                      x__)
                                                                   (Control.DeepSeq.deepseq
                                                                      (_EntitlementService'contractType
                                                                         x__)
                                                                      (Control.DeepSeq.deepseq
                                                                         (_EntitlementService'retired
                                                                            x__)
                                                                         ()))))))))))))))))))))
data EntitlementService'AuthorizationType
  = EntitlementService'DISABLE_ONLY |
    EntitlementService'VIEW_ONLY |
    EntitlementService'ENABLE_ONLY |
    EntitlementService'FULL_CONTROL
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum EntitlementService'AuthorizationType where
  maybeToEnum 1 = Prelude.Just EntitlementService'DISABLE_ONLY
  maybeToEnum 2 = Prelude.Just EntitlementService'VIEW_ONLY
  maybeToEnum 3 = Prelude.Just EntitlementService'ENABLE_ONLY
  maybeToEnum 4 = Prelude.Just EntitlementService'FULL_CONTROL
  maybeToEnum _ = Prelude.Nothing
  showEnum EntitlementService'DISABLE_ONLY = "DISABLE_ONLY"
  showEnum EntitlementService'VIEW_ONLY = "VIEW_ONLY"
  showEnum EntitlementService'ENABLE_ONLY = "ENABLE_ONLY"
  showEnum EntitlementService'FULL_CONTROL = "FULL_CONTROL"
  readEnum k
    | (Prelude.==) k "DISABLE_ONLY"
    = Prelude.Just EntitlementService'DISABLE_ONLY
    | (Prelude.==) k "VIEW_ONLY"
    = Prelude.Just EntitlementService'VIEW_ONLY
    | (Prelude.==) k "ENABLE_ONLY"
    = Prelude.Just EntitlementService'ENABLE_ONLY
    | (Prelude.==) k "FULL_CONTROL"
    = Prelude.Just EntitlementService'FULL_CONTROL
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded EntitlementService'AuthorizationType where
  minBound = EntitlementService'DISABLE_ONLY
  maxBound = EntitlementService'FULL_CONTROL
instance Prelude.Enum EntitlementService'AuthorizationType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum AuthorizationType: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum EntitlementService'DISABLE_ONLY = 1
  fromEnum EntitlementService'VIEW_ONLY = 2
  fromEnum EntitlementService'ENABLE_ONLY = 3
  fromEnum EntitlementService'FULL_CONTROL = 4
  succ EntitlementService'FULL_CONTROL
    = Prelude.error
        "EntitlementService'AuthorizationType.succ: bad argument EntitlementService'FULL_CONTROL. This value would be out of bounds."
  succ EntitlementService'DISABLE_ONLY = EntitlementService'VIEW_ONLY
  succ EntitlementService'VIEW_ONLY = EntitlementService'ENABLE_ONLY
  succ EntitlementService'ENABLE_ONLY
    = EntitlementService'FULL_CONTROL
  pred EntitlementService'DISABLE_ONLY
    = Prelude.error
        "EntitlementService'AuthorizationType.pred: bad argument EntitlementService'DISABLE_ONLY. This value would be out of bounds."
  pred EntitlementService'VIEW_ONLY = EntitlementService'DISABLE_ONLY
  pred EntitlementService'ENABLE_ONLY = EntitlementService'VIEW_ONLY
  pred EntitlementService'FULL_CONTROL
    = EntitlementService'ENABLE_ONLY
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault EntitlementService'AuthorizationType where
  fieldDefault = EntitlementService'DISABLE_ONLY
instance Control.DeepSeq.NFData EntitlementService'AuthorizationType where
  rnf x__ = Prelude.seq x__ ()
data EntitlementService'ServiceOption
  = EntitlementService'ONLY_FOR_TRADERS |
    EntitlementService'FREE_FOR_TRADERS
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum EntitlementService'ServiceOption where
  maybeToEnum 1 = Prelude.Just EntitlementService'ONLY_FOR_TRADERS
  maybeToEnum 2 = Prelude.Just EntitlementService'FREE_FOR_TRADERS
  maybeToEnum _ = Prelude.Nothing
  showEnum EntitlementService'ONLY_FOR_TRADERS = "ONLY_FOR_TRADERS"
  showEnum EntitlementService'FREE_FOR_TRADERS = "FREE_FOR_TRADERS"
  readEnum k
    | (Prelude.==) k "ONLY_FOR_TRADERS"
    = Prelude.Just EntitlementService'ONLY_FOR_TRADERS
    | (Prelude.==) k "FREE_FOR_TRADERS"
    = Prelude.Just EntitlementService'FREE_FOR_TRADERS
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded EntitlementService'ServiceOption where
  minBound = EntitlementService'ONLY_FOR_TRADERS
  maxBound = EntitlementService'FREE_FOR_TRADERS
instance Prelude.Enum EntitlementService'ServiceOption where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum ServiceOption: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum EntitlementService'ONLY_FOR_TRADERS = 1
  fromEnum EntitlementService'FREE_FOR_TRADERS = 2
  succ EntitlementService'FREE_FOR_TRADERS
    = Prelude.error
        "EntitlementService'ServiceOption.succ: bad argument EntitlementService'FREE_FOR_TRADERS. This value would be out of bounds."
  succ EntitlementService'ONLY_FOR_TRADERS
    = EntitlementService'FREE_FOR_TRADERS
  pred EntitlementService'ONLY_FOR_TRADERS
    = Prelude.error
        "EntitlementService'ServiceOption.pred: bad argument EntitlementService'ONLY_FOR_TRADERS. This value would be out of bounds."
  pred EntitlementService'FREE_FOR_TRADERS
    = EntitlementService'ONLY_FOR_TRADERS
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault EntitlementService'ServiceOption where
  fieldDefault = EntitlementService'ONLY_FOR_TRADERS
instance Control.DeepSeq.NFData EntitlementService'ServiceOption where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' EntitlementServiceItem Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'id' @:: Lens' EntitlementServiceItem (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.type'' @:: Lens' EntitlementServiceItem EntitlementServiceItemType@
         * 'Proto.CMS.Common1_Fields.maybe'type'' @:: Lens' EntitlementServiceItem (Prelude.Maybe EntitlementServiceItemType)@
         * 'Proto.CMS.Common1_Fields.name' @:: Lens' EntitlementServiceItem Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.maybe'name' @:: Lens' EntitlementServiceItem (Prelude.Maybe Proto.Common.Shared1.Text)@ -}
data EntitlementServiceItem
  = EntitlementServiceItem'_constructor {_EntitlementServiceItem'id :: !(Prelude.Maybe Data.Text.Text),
                                         _EntitlementServiceItem'type' :: !(Prelude.Maybe EntitlementServiceItemType),
                                         _EntitlementServiceItem'name :: !(Prelude.Maybe Proto.Common.Shared1.Text),
                                         _EntitlementServiceItem'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EntitlementServiceItem where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EntitlementServiceItem "id" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItem'id
           (\ x__ y__ -> x__ {_EntitlementServiceItem'id = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementServiceItem "maybe'id" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItem'id
           (\ x__ y__ -> x__ {_EntitlementServiceItem'id = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementServiceItem "type'" EntitlementServiceItemType where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItem'type'
           (\ x__ y__ -> x__ {_EntitlementServiceItem'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField EntitlementServiceItem "maybe'type'" (Prelude.Maybe EntitlementServiceItemType) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItem'type'
           (\ x__ y__ -> x__ {_EntitlementServiceItem'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementServiceItem "name" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItem'name
           (\ x__ y__ -> x__ {_EntitlementServiceItem'name = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField EntitlementServiceItem "maybe'name" (Prelude.Maybe Proto.Common.Shared1.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItem'name
           (\ x__ y__ -> x__ {_EntitlementServiceItem'name = y__}))
        Prelude.id
instance Data.ProtoLens.Message EntitlementServiceItem where
  messageName _ = Data.Text.pack "common_1.EntitlementServiceItem"
  packedMessageDescriptor _
    = "\n\
      \\SYNEntitlementServiceItem\DC2\SO\n\
      \\STXid\CAN\SOH \SOH(\tR\STXid\DC28\n\
      \\EOTtype\CAN\STX \SOH(\v2$.common_1.EntitlementServiceItemTypeR\EOTtype\DC2\"\n\
      \\EOTname\CAN\ETX \SOH(\v2\SO.shared_1.TextR\EOTname"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'id")) ::
              Data.ProtoLens.FieldDescriptor EntitlementServiceItem
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor EntitlementServiceItemType)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor EntitlementServiceItem
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'name")) ::
              Data.ProtoLens.FieldDescriptor EntitlementServiceItem
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, id__field_descriptor),
           (Data.ProtoLens.Tag 2, type'__field_descriptor),
           (Data.ProtoLens.Tag 3, name__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EntitlementServiceItem'_unknownFields
        (\ x__ y__ -> x__ {_EntitlementServiceItem'_unknownFields = y__})
  defMessage
    = EntitlementServiceItem'_constructor
        {_EntitlementServiceItem'id = Prelude.Nothing,
         _EntitlementServiceItem'type' = Prelude.Nothing,
         _EntitlementServiceItem'name = Prelude.Nothing,
         _EntitlementServiceItem'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EntitlementServiceItem
          -> Data.ProtoLens.Encoding.Bytes.Parser EntitlementServiceItem
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "type"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "name"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "EntitlementServiceItem"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'id") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'type'") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'name") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData EntitlementServiceItem where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EntitlementServiceItem'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_EntitlementServiceItem'id x__)
                (Control.DeepSeq.deepseq
                   (_EntitlementServiceItem'type' x__)
                   (Control.DeepSeq.deepseq (_EntitlementServiceItem'name x__) ())))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' EntitlementServiceItemType Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'id' @:: Lens' EntitlementServiceItemType (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.name' @:: Lens' EntitlementServiceItemType Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.maybe'name' @:: Lens' EntitlementServiceItemType (Prelude.Maybe Proto.Common.Shared1.Text)@
         * 'Proto.CMS.Common1_Fields.description' @:: Lens' EntitlementServiceItemType Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.maybe'description' @:: Lens' EntitlementServiceItemType (Prelude.Maybe Proto.Common.Shared1.Text)@
         * 'Proto.CMS.Common1_Fields.isMarketData' @:: Lens' EntitlementServiceItemType Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'isMarketData' @:: Lens' EntitlementServiceItemType (Prelude.Maybe Prelude.Bool)@ -}
data EntitlementServiceItemType
  = EntitlementServiceItemType'_constructor {_EntitlementServiceItemType'id :: !(Prelude.Maybe Data.Text.Text),
                                             _EntitlementServiceItemType'name :: !(Prelude.Maybe Proto.Common.Shared1.Text),
                                             _EntitlementServiceItemType'description :: !(Prelude.Maybe Proto.Common.Shared1.Text),
                                             _EntitlementServiceItemType'isMarketData :: !(Prelude.Maybe Prelude.Bool),
                                             _EntitlementServiceItemType'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EntitlementServiceItemType where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EntitlementServiceItemType "id" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItemType'id
           (\ x__ y__ -> x__ {_EntitlementServiceItemType'id = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementServiceItemType "maybe'id" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItemType'id
           (\ x__ y__ -> x__ {_EntitlementServiceItemType'id = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementServiceItemType "name" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItemType'name
           (\ x__ y__ -> x__ {_EntitlementServiceItemType'name = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField EntitlementServiceItemType "maybe'name" (Prelude.Maybe Proto.Common.Shared1.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItemType'name
           (\ x__ y__ -> x__ {_EntitlementServiceItemType'name = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementServiceItemType "description" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItemType'description
           (\ x__ y__ -> x__ {_EntitlementServiceItemType'description = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField EntitlementServiceItemType "maybe'description" (Prelude.Maybe Proto.Common.Shared1.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItemType'description
           (\ x__ y__ -> x__ {_EntitlementServiceItemType'description = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementServiceItemType "isMarketData" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItemType'isMarketData
           (\ x__ y__
              -> x__ {_EntitlementServiceItemType'isMarketData = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntitlementServiceItemType "maybe'isMarketData" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceItemType'isMarketData
           (\ x__ y__
              -> x__ {_EntitlementServiceItemType'isMarketData = y__}))
        Prelude.id
instance Data.ProtoLens.Message EntitlementServiceItemType where
  messageName _
    = Data.Text.pack "common_1.EntitlementServiceItemType"
  packedMessageDescriptor _
    = "\n\
      \\SUBEntitlementServiceItemType\DC2\SO\n\
      \\STXid\CAN\SOH \SOH(\tR\STXid\DC2\"\n\
      \\EOTname\CAN\STX \SOH(\v2\SO.shared_1.TextR\EOTname\DC20\n\
      \\vdescription\CAN\ETX \SOH(\v2\SO.shared_1.TextR\vdescription\DC2$\n\
      \\SOis_market_data\CAN\EOT \SOH(\bR\fisMarketData"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'id")) ::
              Data.ProtoLens.FieldDescriptor EntitlementServiceItemType
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'name")) ::
              Data.ProtoLens.FieldDescriptor EntitlementServiceItemType
        description__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "description"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'description")) ::
              Data.ProtoLens.FieldDescriptor EntitlementServiceItemType
        isMarketData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "is_market_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'isMarketData")) ::
              Data.ProtoLens.FieldDescriptor EntitlementServiceItemType
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, id__field_descriptor),
           (Data.ProtoLens.Tag 2, name__field_descriptor),
           (Data.ProtoLens.Tag 3, description__field_descriptor),
           (Data.ProtoLens.Tag 4, isMarketData__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EntitlementServiceItemType'_unknownFields
        (\ x__ y__
           -> x__ {_EntitlementServiceItemType'_unknownFields = y__})
  defMessage
    = EntitlementServiceItemType'_constructor
        {_EntitlementServiceItemType'id = Prelude.Nothing,
         _EntitlementServiceItemType'name = Prelude.Nothing,
         _EntitlementServiceItemType'description = Prelude.Nothing,
         _EntitlementServiceItemType'isMarketData = Prelude.Nothing,
         _EntitlementServiceItemType'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EntitlementServiceItemType
          -> Data.ProtoLens.Encoding.Bytes.Parser EntitlementServiceItemType
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "name"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "description"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"description") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "is_market_data"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"isMarketData") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "EntitlementServiceItemType"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'id") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'name") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'description") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'isMarketData") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0) _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData EntitlementServiceItemType where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EntitlementServiceItemType'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_EntitlementServiceItemType'id x__)
                (Control.DeepSeq.deepseq
                   (_EntitlementServiceItemType'name x__)
                   (Control.DeepSeq.deepseq
                      (_EntitlementServiceItemType'description x__)
                      (Control.DeepSeq.deepseq
                         (_EntitlementServiceItemType'isMarketData x__) ()))))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.brokerageId' @:: Lens' EntitlementServiceListRequest [Data.Text.Text]@
         * 'Proto.CMS.Common1_Fields.vec'brokerageId' @:: Lens' EntitlementServiceListRequest (Data.Vector.Vector Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.includeRetired' @:: Lens' EntitlementServiceListRequest Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'includeRetired' @:: Lens' EntitlementServiceListRequest (Prelude.Maybe Prelude.Bool)@ -}
data EntitlementServiceListRequest
  = EntitlementServiceListRequest'_constructor {_EntitlementServiceListRequest'brokerageId :: !(Data.Vector.Vector Data.Text.Text),
                                                _EntitlementServiceListRequest'includeRetired :: !(Prelude.Maybe Prelude.Bool),
                                                _EntitlementServiceListRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EntitlementServiceListRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EntitlementServiceListRequest "brokerageId" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceListRequest'brokerageId
           (\ x__ y__
              -> x__ {_EntitlementServiceListRequest'brokerageId = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField EntitlementServiceListRequest "vec'brokerageId" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceListRequest'brokerageId
           (\ x__ y__
              -> x__ {_EntitlementServiceListRequest'brokerageId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EntitlementServiceListRequest "includeRetired" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceListRequest'includeRetired
           (\ x__ y__
              -> x__ {_EntitlementServiceListRequest'includeRetired = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField EntitlementServiceListRequest "maybe'includeRetired" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceListRequest'includeRetired
           (\ x__ y__
              -> x__ {_EntitlementServiceListRequest'includeRetired = y__}))
        Prelude.id
instance Data.ProtoLens.Message EntitlementServiceListRequest where
  messageName _
    = Data.Text.pack "common_1.EntitlementServiceListRequest"
  packedMessageDescriptor _
    = "\n\
      \\GSEntitlementServiceListRequest\DC2!\n\
      \\fbrokerage_id\CAN\SOH \ETX(\tR\vbrokerageId\DC2.\n\
      \\SIinclude_retired\CAN\STX \SOH(\b:\ENQfalseR\SOincludeRetired"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        brokerageId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "brokerage_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"brokerageId")) ::
              Data.ProtoLens.FieldDescriptor EntitlementServiceListRequest
        includeRetired__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "include_retired"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'includeRetired")) ::
              Data.ProtoLens.FieldDescriptor EntitlementServiceListRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, brokerageId__field_descriptor),
           (Data.ProtoLens.Tag 2, includeRetired__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EntitlementServiceListRequest'_unknownFields
        (\ x__ y__
           -> x__ {_EntitlementServiceListRequest'_unknownFields = y__})
  defMessage
    = EntitlementServiceListRequest'_constructor
        {_EntitlementServiceListRequest'brokerageId = Data.Vector.Generic.empty,
         _EntitlementServiceListRequest'includeRetired = Prelude.Nothing,
         _EntitlementServiceListRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EntitlementServiceListRequest
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
             -> Data.ProtoLens.Encoding.Bytes.Parser EntitlementServiceListRequest
        loop x mutable'brokerageId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'brokerageId <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                 mutable'brokerageId)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'brokerageId") frozen'brokerageId
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getText
                                              (Prelude.fromIntegral len))
                                        "brokerage_id"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'brokerageId y)
                                loop x v
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "include_retired"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"includeRetired") y x)
                                  mutable'brokerageId
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'brokerageId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'brokerageId <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'brokerageId)
          "EntitlementServiceListRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.Text.Encoding.encodeUtf8 _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'brokerageId") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'includeRetired") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData EntitlementServiceListRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EntitlementServiceListRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_EntitlementServiceListRequest'brokerageId x__)
                (Control.DeepSeq.deepseq
                   (_EntitlementServiceListRequest'includeRetired x__) ()))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.entitlementServiceId' @:: Lens' EntitlementServiceRequest Data.Word.Word32@ -}
data EntitlementServiceRequest
  = EntitlementServiceRequest'_constructor {_EntitlementServiceRequest'entitlementServiceId :: !Data.Word.Word32,
                                            _EntitlementServiceRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EntitlementServiceRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EntitlementServiceRequest "entitlementServiceId" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntitlementServiceRequest'entitlementServiceId
           (\ x__ y__
              -> x__ {_EntitlementServiceRequest'entitlementServiceId = y__}))
        Prelude.id
instance Data.ProtoLens.Message EntitlementServiceRequest where
  messageName _ = Data.Text.pack "common_1.EntitlementServiceRequest"
  packedMessageDescriptor _
    = "\n\
      \\EMEntitlementServiceRequest\DC24\n\
      \\SYNentitlement_service_id\CAN\SOH \STX(\rR\DC4entitlementServiceId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        entitlementServiceId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "entitlement_service_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"entitlementServiceId")) ::
              Data.ProtoLens.FieldDescriptor EntitlementServiceRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, entitlementServiceId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EntitlementServiceRequest'_unknownFields
        (\ x__ y__
           -> x__ {_EntitlementServiceRequest'_unknownFields = y__})
  defMessage
    = EntitlementServiceRequest'_constructor
        {_EntitlementServiceRequest'entitlementServiceId = Data.ProtoLens.fieldDefault,
         _EntitlementServiceRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EntitlementServiceRequest
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser EntitlementServiceRequest
        loop x required'entitlementServiceId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'entitlementServiceId then
                                  (:) "entitlement_service_id"
                              else
                                  Prelude.id)
                               []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "entitlement_service_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"entitlementServiceId") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'entitlementServiceId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "EntitlementServiceRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                ((Prelude..)
                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"entitlementServiceId") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData EntitlementServiceRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EntitlementServiceRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_EntitlementServiceRequest'entitlementServiceId x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.entityId' @:: Lens' EntityDataRequest Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'entityId' @:: Lens' EntityDataRequest (Prelude.Maybe Data.Text.Text)@ -}
data EntityDataRequest
  = EntityDataRequest'_constructor {_EntityDataRequest'entityId :: !(Prelude.Maybe Data.Text.Text),
                                    _EntityDataRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EntityDataRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EntityDataRequest "entityId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntityDataRequest'entityId
           (\ x__ y__ -> x__ {_EntityDataRequest'entityId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EntityDataRequest "maybe'entityId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EntityDataRequest'entityId
           (\ x__ y__ -> x__ {_EntityDataRequest'entityId = y__}))
        Prelude.id
instance Data.ProtoLens.Message EntityDataRequest where
  messageName _ = Data.Text.pack "common_1.EntityDataRequest"
  packedMessageDescriptor _
    = "\n\
      \\DC1EntityDataRequest\DC2\ESC\n\
      \\tentity_id\CAN\SOH \SOH(\tR\bentityId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        entityId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "entity_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'entityId")) ::
              Data.ProtoLens.FieldDescriptor EntityDataRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, entityId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EntityDataRequest'_unknownFields
        (\ x__ y__ -> x__ {_EntityDataRequest'_unknownFields = y__})
  defMessage
    = EntityDataRequest'_constructor
        {_EntityDataRequest'entityId = Prelude.Nothing,
         _EntityDataRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EntityDataRequest
          -> Data.ProtoLens.Encoding.Bytes.Parser EntityDataRequest
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "entity_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"entityId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "EntityDataRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'entityId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData EntityDataRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EntityDataRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq (_EntityDataRequest'entityId x__) ())
data EntityType
  = ENTITY_TYPE_ACCOUNT |
    ENTITY_TYPE_ORDER |
    ENTITY_TYPE_LOGIN |
    ENTITY_TYPE_PROFILE |
    ENTITY_TYPE_LEGAL_DOCUMENT
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum EntityType where
  maybeToEnum 1 = Prelude.Just ENTITY_TYPE_ACCOUNT
  maybeToEnum 2 = Prelude.Just ENTITY_TYPE_ORDER
  maybeToEnum 3 = Prelude.Just ENTITY_TYPE_LOGIN
  maybeToEnum 4 = Prelude.Just ENTITY_TYPE_PROFILE
  maybeToEnum 5 = Prelude.Just ENTITY_TYPE_LEGAL_DOCUMENT
  maybeToEnum _ = Prelude.Nothing
  showEnum ENTITY_TYPE_ACCOUNT = "ENTITY_TYPE_ACCOUNT"
  showEnum ENTITY_TYPE_ORDER = "ENTITY_TYPE_ORDER"
  showEnum ENTITY_TYPE_LOGIN = "ENTITY_TYPE_LOGIN"
  showEnum ENTITY_TYPE_PROFILE = "ENTITY_TYPE_PROFILE"
  showEnum ENTITY_TYPE_LEGAL_DOCUMENT = "ENTITY_TYPE_LEGAL_DOCUMENT"
  readEnum k
    | (Prelude.==) k "ENTITY_TYPE_ACCOUNT"
    = Prelude.Just ENTITY_TYPE_ACCOUNT
    | (Prelude.==) k "ENTITY_TYPE_ORDER"
    = Prelude.Just ENTITY_TYPE_ORDER
    | (Prelude.==) k "ENTITY_TYPE_LOGIN"
    = Prelude.Just ENTITY_TYPE_LOGIN
    | (Prelude.==) k "ENTITY_TYPE_PROFILE"
    = Prelude.Just ENTITY_TYPE_PROFILE
    | (Prelude.==) k "ENTITY_TYPE_LEGAL_DOCUMENT"
    = Prelude.Just ENTITY_TYPE_LEGAL_DOCUMENT
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded EntityType where
  minBound = ENTITY_TYPE_ACCOUNT
  maxBound = ENTITY_TYPE_LEGAL_DOCUMENT
instance Prelude.Enum EntityType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum EntityType: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum ENTITY_TYPE_ACCOUNT = 1
  fromEnum ENTITY_TYPE_ORDER = 2
  fromEnum ENTITY_TYPE_LOGIN = 3
  fromEnum ENTITY_TYPE_PROFILE = 4
  fromEnum ENTITY_TYPE_LEGAL_DOCUMENT = 5
  succ ENTITY_TYPE_LEGAL_DOCUMENT
    = Prelude.error
        "EntityType.succ: bad argument ENTITY_TYPE_LEGAL_DOCUMENT. This value would be out of bounds."
  succ ENTITY_TYPE_ACCOUNT = ENTITY_TYPE_ORDER
  succ ENTITY_TYPE_ORDER = ENTITY_TYPE_LOGIN
  succ ENTITY_TYPE_LOGIN = ENTITY_TYPE_PROFILE
  succ ENTITY_TYPE_PROFILE = ENTITY_TYPE_LEGAL_DOCUMENT
  pred ENTITY_TYPE_ACCOUNT
    = Prelude.error
        "EntityType.pred: bad argument ENTITY_TYPE_ACCOUNT. This value would be out of bounds."
  pred ENTITY_TYPE_ORDER = ENTITY_TYPE_ACCOUNT
  pred ENTITY_TYPE_LOGIN = ENTITY_TYPE_ORDER
  pred ENTITY_TYPE_PROFILE = ENTITY_TYPE_LOGIN
  pred ENTITY_TYPE_LEGAL_DOCUMENT = ENTITY_TYPE_PROFILE
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault EntityType where
  fieldDefault = ENTITY_TYPE_ACCOUNT
instance Control.DeepSeq.NFData EntityType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginId' @:: Lens' EraseCurrentCredentials Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'loginId' @:: Lens' EraseCurrentCredentials (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.credentialTypes' @:: Lens' EraseCurrentCredentials [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'credentialTypes' @:: Lens' EraseCurrentCredentials (Data.Vector.Unboxed.Vector Data.Word.Word32)@ -}
data EraseCurrentCredentials
  = EraseCurrentCredentials'_constructor {_EraseCurrentCredentials'loginId :: !(Prelude.Maybe Data.Text.Text),
                                          _EraseCurrentCredentials'credentialTypes :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                                          _EraseCurrentCredentials'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EraseCurrentCredentials where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField EraseCurrentCredentials "loginId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EraseCurrentCredentials'loginId
           (\ x__ y__ -> x__ {_EraseCurrentCredentials'loginId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField EraseCurrentCredentials "maybe'loginId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EraseCurrentCredentials'loginId
           (\ x__ y__ -> x__ {_EraseCurrentCredentials'loginId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField EraseCurrentCredentials "credentialTypes" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EraseCurrentCredentials'credentialTypes
           (\ x__ y__
              -> x__ {_EraseCurrentCredentials'credentialTypes = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField EraseCurrentCredentials "vec'credentialTypes" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _EraseCurrentCredentials'credentialTypes
           (\ x__ y__
              -> x__ {_EraseCurrentCredentials'credentialTypes = y__}))
        Prelude.id
instance Data.ProtoLens.Message EraseCurrentCredentials where
  messageName _ = Data.Text.pack "common_1.EraseCurrentCredentials"
  packedMessageDescriptor _
    = "\n\
      \\ETBEraseCurrentCredentials\DC2\EM\n\
      \\blogin_id\CAN\SOH \SOH(\tR\aloginId\DC2)\n\
      \\DLEcredential_types\CAN\STX \ETX(\rR\SIcredentialTypes"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'loginId")) ::
              Data.ProtoLens.FieldDescriptor EraseCurrentCredentials
        credentialTypes__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "credential_types"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"credentialTypes")) ::
              Data.ProtoLens.FieldDescriptor EraseCurrentCredentials
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginId__field_descriptor),
           (Data.ProtoLens.Tag 2, credentialTypes__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EraseCurrentCredentials'_unknownFields
        (\ x__ y__ -> x__ {_EraseCurrentCredentials'_unknownFields = y__})
  defMessage
    = EraseCurrentCredentials'_constructor
        {_EraseCurrentCredentials'loginId = Prelude.Nothing,
         _EraseCurrentCredentials'credentialTypes = Data.Vector.Generic.empty,
         _EraseCurrentCredentials'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EraseCurrentCredentials
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
             -> Data.ProtoLens.Encoding.Bytes.Parser EraseCurrentCredentials
        loop x mutable'credentialTypes
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'credentialTypes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                  (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                     mutable'credentialTypes)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'credentialTypes")
                              frozen'credentialTypes x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "login_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"loginId") y x)
                                  mutable'credentialTypes
                        16
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "credential_types"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'credentialTypes y)
                                loop x v
                        18
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "credential_types"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'credentialTypes)
                                loop x y
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'credentialTypes
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'credentialTypes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'credentialTypes)
          "EraseCurrentCredentials"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'loginId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                           ((Prelude..)
                              Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'credentialTypes") _x))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData EraseCurrentCredentials where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EraseCurrentCredentials'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_EraseCurrentCredentials'loginId x__)
                (Control.DeepSeq.deepseq
                   (_EraseCurrentCredentials'credentialTypes x__) ()))
{- | Fields :
      -}
data EraseCurrentCredentialsResult
  = EraseCurrentCredentialsResult'_constructor {_EraseCurrentCredentialsResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show EraseCurrentCredentialsResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message EraseCurrentCredentialsResult where
  messageName _
    = Data.Text.pack "common_1.EraseCurrentCredentialsResult"
  packedMessageDescriptor _
    = "\n\
      \\GSEraseCurrentCredentialsResult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _EraseCurrentCredentialsResult'_unknownFields
        (\ x__ y__
           -> x__ {_EraseCurrentCredentialsResult'_unknownFields = y__})
  defMessage
    = EraseCurrentCredentialsResult'_constructor
        {_EraseCurrentCredentialsResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          EraseCurrentCredentialsResult
          -> Data.ProtoLens.Encoding.Bytes.Parser EraseCurrentCredentialsResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "EraseCurrentCredentialsResult"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData EraseCurrentCredentialsResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_EraseCurrentCredentialsResult'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.partnerId' @:: Lens' ExternalAuth Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'partnerId' @:: Lens' ExternalAuth (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.username' @:: Lens' ExternalAuth Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'username' @:: Lens' ExternalAuth (Prelude.Maybe Data.Text.Text)@ -}
data ExternalAuth
  = ExternalAuth'_constructor {_ExternalAuth'partnerId :: !(Prelude.Maybe Data.Text.Text),
                               _ExternalAuth'username :: !(Prelude.Maybe Data.Text.Text),
                               _ExternalAuth'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ExternalAuth where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ExternalAuth "partnerId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ExternalAuth'partnerId
           (\ x__ y__ -> x__ {_ExternalAuth'partnerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ExternalAuth "maybe'partnerId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ExternalAuth'partnerId
           (\ x__ y__ -> x__ {_ExternalAuth'partnerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ExternalAuth "username" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ExternalAuth'username
           (\ x__ y__ -> x__ {_ExternalAuth'username = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ExternalAuth "maybe'username" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ExternalAuth'username
           (\ x__ y__ -> x__ {_ExternalAuth'username = y__}))
        Prelude.id
instance Data.ProtoLens.Message ExternalAuth where
  messageName _ = Data.Text.pack "common_1.ExternalAuth"
  packedMessageDescriptor _
    = "\n\
      \\fExternalAuth\DC2\GS\n\
      \\n\
      \partner_id\CAN\SOH \SOH(\tR\tpartnerId\DC2\SUB\n\
      \\busername\CAN\STX \SOH(\tR\busername"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        partnerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partner_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'partnerId")) ::
              Data.ProtoLens.FieldDescriptor ExternalAuth
        username__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "username"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'username")) ::
              Data.ProtoLens.FieldDescriptor ExternalAuth
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, partnerId__field_descriptor),
           (Data.ProtoLens.Tag 2, username__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ExternalAuth'_unknownFields
        (\ x__ y__ -> x__ {_ExternalAuth'_unknownFields = y__})
  defMessage
    = ExternalAuth'_constructor
        {_ExternalAuth'partnerId = Prelude.Nothing,
         _ExternalAuth'username = Prelude.Nothing,
         _ExternalAuth'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ExternalAuth -> Data.ProtoLens.Encoding.Bytes.Parser ExternalAuth
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "partner_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"partnerId") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "username"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"username") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ExternalAuth"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'partnerId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'username") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData ExternalAuth where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ExternalAuth'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ExternalAuth'partnerId x__)
                (Control.DeepSeq.deepseq (_ExternalAuth'username x__) ()))
data InternalEntityType
  = INTERNAL_ENTITY_TYPE_ACCOUNT |
    INTERNAL_ENTITY_TYPE_ORDER |
    INTERNAL_ENTITY_TYPE_TRADER |
    INTERNAL_ENTITY_TYPE_CUSTOMER |
    INTERNAL_ENTITY_TYPE_SYSTEM |
    INTERNAL_ENTITY_TYPE_CAST_USER |
    INTERNAL_ENTITY_TYPE_SALES_SERIES |
    INTERNAL_ENTITY_TYPE_FCM |
    INTERNAL_ENTITY_TYPE_ROUTE_GROUP |
    INTERNAL_ENTITY_TYPE_EXCHANGE |
    INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum InternalEntityType where
  maybeToEnum 1 = Prelude.Just INTERNAL_ENTITY_TYPE_ACCOUNT
  maybeToEnum 2 = Prelude.Just INTERNAL_ENTITY_TYPE_ORDER
  maybeToEnum 3 = Prelude.Just INTERNAL_ENTITY_TYPE_TRADER
  maybeToEnum 4 = Prelude.Just INTERNAL_ENTITY_TYPE_CUSTOMER
  maybeToEnum 5 = Prelude.Just INTERNAL_ENTITY_TYPE_SYSTEM
  maybeToEnum 6 = Prelude.Just INTERNAL_ENTITY_TYPE_CAST_USER
  maybeToEnum 7 = Prelude.Just INTERNAL_ENTITY_TYPE_SALES_SERIES
  maybeToEnum 8 = Prelude.Just INTERNAL_ENTITY_TYPE_FCM
  maybeToEnum 9 = Prelude.Just INTERNAL_ENTITY_TYPE_ROUTE_GROUP
  maybeToEnum 10 = Prelude.Just INTERNAL_ENTITY_TYPE_EXCHANGE
  maybeToEnum 11
    = Prelude.Just INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE
  maybeToEnum _ = Prelude.Nothing
  showEnum INTERNAL_ENTITY_TYPE_ACCOUNT
    = "INTERNAL_ENTITY_TYPE_ACCOUNT"
  showEnum INTERNAL_ENTITY_TYPE_ORDER = "INTERNAL_ENTITY_TYPE_ORDER"
  showEnum INTERNAL_ENTITY_TYPE_TRADER
    = "INTERNAL_ENTITY_TYPE_TRADER"
  showEnum INTERNAL_ENTITY_TYPE_CUSTOMER
    = "INTERNAL_ENTITY_TYPE_CUSTOMER"
  showEnum INTERNAL_ENTITY_TYPE_SYSTEM
    = "INTERNAL_ENTITY_TYPE_SYSTEM"
  showEnum INTERNAL_ENTITY_TYPE_CAST_USER
    = "INTERNAL_ENTITY_TYPE_CAST_USER"
  showEnum INTERNAL_ENTITY_TYPE_SALES_SERIES
    = "INTERNAL_ENTITY_TYPE_SALES_SERIES"
  showEnum INTERNAL_ENTITY_TYPE_FCM = "INTERNAL_ENTITY_TYPE_FCM"
  showEnum INTERNAL_ENTITY_TYPE_ROUTE_GROUP
    = "INTERNAL_ENTITY_TYPE_ROUTE_GROUP"
  showEnum INTERNAL_ENTITY_TYPE_EXCHANGE
    = "INTERNAL_ENTITY_TYPE_EXCHANGE"
  showEnum INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE
    = "INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE"
  readEnum k
    | (Prelude.==) k "INTERNAL_ENTITY_TYPE_ACCOUNT"
    = Prelude.Just INTERNAL_ENTITY_TYPE_ACCOUNT
    | (Prelude.==) k "INTERNAL_ENTITY_TYPE_ORDER"
    = Prelude.Just INTERNAL_ENTITY_TYPE_ORDER
    | (Prelude.==) k "INTERNAL_ENTITY_TYPE_TRADER"
    = Prelude.Just INTERNAL_ENTITY_TYPE_TRADER
    | (Prelude.==) k "INTERNAL_ENTITY_TYPE_CUSTOMER"
    = Prelude.Just INTERNAL_ENTITY_TYPE_CUSTOMER
    | (Prelude.==) k "INTERNAL_ENTITY_TYPE_SYSTEM"
    = Prelude.Just INTERNAL_ENTITY_TYPE_SYSTEM
    | (Prelude.==) k "INTERNAL_ENTITY_TYPE_CAST_USER"
    = Prelude.Just INTERNAL_ENTITY_TYPE_CAST_USER
    | (Prelude.==) k "INTERNAL_ENTITY_TYPE_SALES_SERIES"
    = Prelude.Just INTERNAL_ENTITY_TYPE_SALES_SERIES
    | (Prelude.==) k "INTERNAL_ENTITY_TYPE_FCM"
    = Prelude.Just INTERNAL_ENTITY_TYPE_FCM
    | (Prelude.==) k "INTERNAL_ENTITY_TYPE_ROUTE_GROUP"
    = Prelude.Just INTERNAL_ENTITY_TYPE_ROUTE_GROUP
    | (Prelude.==) k "INTERNAL_ENTITY_TYPE_EXCHANGE"
    = Prelude.Just INTERNAL_ENTITY_TYPE_EXCHANGE
    | (Prelude.==) k "INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE"
    = Prelude.Just INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded InternalEntityType where
  minBound = INTERNAL_ENTITY_TYPE_ACCOUNT
  maxBound = INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE
instance Prelude.Enum InternalEntityType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum InternalEntityType: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum INTERNAL_ENTITY_TYPE_ACCOUNT = 1
  fromEnum INTERNAL_ENTITY_TYPE_ORDER = 2
  fromEnum INTERNAL_ENTITY_TYPE_TRADER = 3
  fromEnum INTERNAL_ENTITY_TYPE_CUSTOMER = 4
  fromEnum INTERNAL_ENTITY_TYPE_SYSTEM = 5
  fromEnum INTERNAL_ENTITY_TYPE_CAST_USER = 6
  fromEnum INTERNAL_ENTITY_TYPE_SALES_SERIES = 7
  fromEnum INTERNAL_ENTITY_TYPE_FCM = 8
  fromEnum INTERNAL_ENTITY_TYPE_ROUTE_GROUP = 9
  fromEnum INTERNAL_ENTITY_TYPE_EXCHANGE = 10
  fromEnum INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE = 11
  succ INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE
    = Prelude.error
        "InternalEntityType.succ: bad argument INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE. This value would be out of bounds."
  succ INTERNAL_ENTITY_TYPE_ACCOUNT = INTERNAL_ENTITY_TYPE_ORDER
  succ INTERNAL_ENTITY_TYPE_ORDER = INTERNAL_ENTITY_TYPE_TRADER
  succ INTERNAL_ENTITY_TYPE_TRADER = INTERNAL_ENTITY_TYPE_CUSTOMER
  succ INTERNAL_ENTITY_TYPE_CUSTOMER = INTERNAL_ENTITY_TYPE_SYSTEM
  succ INTERNAL_ENTITY_TYPE_SYSTEM = INTERNAL_ENTITY_TYPE_CAST_USER
  succ INTERNAL_ENTITY_TYPE_CAST_USER
    = INTERNAL_ENTITY_TYPE_SALES_SERIES
  succ INTERNAL_ENTITY_TYPE_SALES_SERIES = INTERNAL_ENTITY_TYPE_FCM
  succ INTERNAL_ENTITY_TYPE_FCM = INTERNAL_ENTITY_TYPE_ROUTE_GROUP
  succ INTERNAL_ENTITY_TYPE_ROUTE_GROUP
    = INTERNAL_ENTITY_TYPE_EXCHANGE
  succ INTERNAL_ENTITY_TYPE_EXCHANGE
    = INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE
  pred INTERNAL_ENTITY_TYPE_ACCOUNT
    = Prelude.error
        "InternalEntityType.pred: bad argument INTERNAL_ENTITY_TYPE_ACCOUNT. This value would be out of bounds."
  pred INTERNAL_ENTITY_TYPE_ORDER = INTERNAL_ENTITY_TYPE_ACCOUNT
  pred INTERNAL_ENTITY_TYPE_TRADER = INTERNAL_ENTITY_TYPE_ORDER
  pred INTERNAL_ENTITY_TYPE_CUSTOMER = INTERNAL_ENTITY_TYPE_TRADER
  pred INTERNAL_ENTITY_TYPE_SYSTEM = INTERNAL_ENTITY_TYPE_CUSTOMER
  pred INTERNAL_ENTITY_TYPE_CAST_USER = INTERNAL_ENTITY_TYPE_SYSTEM
  pred INTERNAL_ENTITY_TYPE_SALES_SERIES
    = INTERNAL_ENTITY_TYPE_CAST_USER
  pred INTERNAL_ENTITY_TYPE_FCM = INTERNAL_ENTITY_TYPE_SALES_SERIES
  pred INTERNAL_ENTITY_TYPE_ROUTE_GROUP = INTERNAL_ENTITY_TYPE_FCM
  pred INTERNAL_ENTITY_TYPE_EXCHANGE
    = INTERNAL_ENTITY_TYPE_ROUTE_GROUP
  pred INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE
    = INTERNAL_ENTITY_TYPE_EXCHANGE
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault InternalEntityType where
  fieldDefault = INTERNAL_ENTITY_TYPE_ACCOUNT
instance Control.DeepSeq.NFData InternalEntityType where
  rnf x__ = Prelude.seq x__ ()
data LegalType
  = INDIVIDUAL | JOINT | LIMITED | TRUST | CORPORATE | PARTNERSHIP
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum LegalType where
  maybeToEnum 1 = Prelude.Just INDIVIDUAL
  maybeToEnum 2 = Prelude.Just JOINT
  maybeToEnum 3 = Prelude.Just LIMITED
  maybeToEnum 4 = Prelude.Just TRUST
  maybeToEnum 5 = Prelude.Just CORPORATE
  maybeToEnum 6 = Prelude.Just PARTNERSHIP
  maybeToEnum _ = Prelude.Nothing
  showEnum INDIVIDUAL = "INDIVIDUAL"
  showEnum JOINT = "JOINT"
  showEnum LIMITED = "LIMITED"
  showEnum TRUST = "TRUST"
  showEnum CORPORATE = "CORPORATE"
  showEnum PARTNERSHIP = "PARTNERSHIP"
  readEnum k
    | (Prelude.==) k "INDIVIDUAL" = Prelude.Just INDIVIDUAL
    | (Prelude.==) k "JOINT" = Prelude.Just JOINT
    | (Prelude.==) k "LIMITED" = Prelude.Just LIMITED
    | (Prelude.==) k "TRUST" = Prelude.Just TRUST
    | (Prelude.==) k "CORPORATE" = Prelude.Just CORPORATE
    | (Prelude.==) k "PARTNERSHIP" = Prelude.Just PARTNERSHIP
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded LegalType where
  minBound = INDIVIDUAL
  maxBound = PARTNERSHIP
instance Prelude.Enum LegalType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum LegalType: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum INDIVIDUAL = 1
  fromEnum JOINT = 2
  fromEnum LIMITED = 3
  fromEnum TRUST = 4
  fromEnum CORPORATE = 5
  fromEnum PARTNERSHIP = 6
  succ PARTNERSHIP
    = Prelude.error
        "LegalType.succ: bad argument PARTNERSHIP. This value would be out of bounds."
  succ INDIVIDUAL = JOINT
  succ JOINT = LIMITED
  succ LIMITED = TRUST
  succ TRUST = CORPORATE
  succ CORPORATE = PARTNERSHIP
  pred INDIVIDUAL
    = Prelude.error
        "LegalType.pred: bad argument INDIVIDUAL. This value would be out of bounds."
  pred JOINT = INDIVIDUAL
  pred LIMITED = JOINT
  pred TRUST = LIMITED
  pred CORPORATE = TRUST
  pred PARTNERSHIP = CORPORATE
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault LegalType where
  fieldDefault = INDIVIDUAL
instance Control.DeepSeq.NFData LegalType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' LinkedEntityListRequest Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'id' @:: Lens' LinkedEntityListRequest (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.top' @:: Lens' LinkedEntityListRequest Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'top' @:: Lens' LinkedEntityListRequest (Prelude.Maybe Data.Word.Word32)@ -}
data LinkedEntityListRequest
  = LinkedEntityListRequest'_constructor {_LinkedEntityListRequest'id :: !(Prelude.Maybe Data.Text.Text),
                                          _LinkedEntityListRequest'top :: !(Prelude.Maybe Data.Word.Word32),
                                          _LinkedEntityListRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LinkedEntityListRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LinkedEntityListRequest "id" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LinkedEntityListRequest'id
           (\ x__ y__ -> x__ {_LinkedEntityListRequest'id = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LinkedEntityListRequest "maybe'id" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LinkedEntityListRequest'id
           (\ x__ y__ -> x__ {_LinkedEntityListRequest'id = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LinkedEntityListRequest "top" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LinkedEntityListRequest'top
           (\ x__ y__ -> x__ {_LinkedEntityListRequest'top = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LinkedEntityListRequest "maybe'top" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LinkedEntityListRequest'top
           (\ x__ y__ -> x__ {_LinkedEntityListRequest'top = y__}))
        Prelude.id
instance Data.ProtoLens.Message LinkedEntityListRequest where
  messageName _ = Data.Text.pack "common_1.LinkedEntityListRequest"
  packedMessageDescriptor _
    = "\n\
      \\ETBLinkedEntityListRequest\DC2\SO\n\
      \\STXid\CAN\SOH \SOH(\tR\STXid\DC2\DLE\n\
      \\ETXtop\CAN\STX \SOH(\rR\ETXtop"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'id")) ::
              Data.ProtoLens.FieldDescriptor LinkedEntityListRequest
        top__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "top"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'top")) ::
              Data.ProtoLens.FieldDescriptor LinkedEntityListRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, id__field_descriptor),
           (Data.ProtoLens.Tag 2, top__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LinkedEntityListRequest'_unknownFields
        (\ x__ y__ -> x__ {_LinkedEntityListRequest'_unknownFields = y__})
  defMessage
    = LinkedEntityListRequest'_constructor
        {_LinkedEntityListRequest'id = Prelude.Nothing,
         _LinkedEntityListRequest'top = Prelude.Nothing,
         _LinkedEntityListRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LinkedEntityListRequest
          -> Data.ProtoLens.Encoding.Bytes.Parser LinkedEntityListRequest
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "top"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"top") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "LinkedEntityListRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'id") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'top") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData LinkedEntityListRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LinkedEntityListRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LinkedEntityListRequest'id x__)
                (Control.DeepSeq.deepseq (_LinkedEntityListRequest'top x__) ()))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.entities' @:: Lens' LinkedEntityListResult [NamedEntity]@
         * 'Proto.CMS.Common1_Fields.vec'entities' @:: Lens' LinkedEntityListResult (Data.Vector.Vector NamedEntity)@
         * 'Proto.CMS.Common1_Fields.isComplete' @:: Lens' LinkedEntityListResult Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'isComplete' @:: Lens' LinkedEntityListResult (Prelude.Maybe Prelude.Bool)@ -}
data LinkedEntityListResult
  = LinkedEntityListResult'_constructor {_LinkedEntityListResult'entities :: !(Data.Vector.Vector NamedEntity),
                                         _LinkedEntityListResult'isComplete :: !(Prelude.Maybe Prelude.Bool),
                                         _LinkedEntityListResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LinkedEntityListResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LinkedEntityListResult "entities" [NamedEntity] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LinkedEntityListResult'entities
           (\ x__ y__ -> x__ {_LinkedEntityListResult'entities = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField LinkedEntityListResult "vec'entities" (Data.Vector.Vector NamedEntity) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LinkedEntityListResult'entities
           (\ x__ y__ -> x__ {_LinkedEntityListResult'entities = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LinkedEntityListResult "isComplete" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LinkedEntityListResult'isComplete
           (\ x__ y__ -> x__ {_LinkedEntityListResult'isComplete = y__}))
        (Data.ProtoLens.maybeLens Prelude.True)
instance Data.ProtoLens.Field.HasField LinkedEntityListResult "maybe'isComplete" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LinkedEntityListResult'isComplete
           (\ x__ y__ -> x__ {_LinkedEntityListResult'isComplete = y__}))
        Prelude.id
instance Data.ProtoLens.Message LinkedEntityListResult where
  messageName _ = Data.Text.pack "common_1.LinkedEntityListResult"
  packedMessageDescriptor _
    = "\n\
      \\SYNLinkedEntityListResult\DC21\n\
      \\bentities\CAN\SOH \ETX(\v2\NAK.common_1.NamedEntityR\bentities\DC2%\n\
      \\vis_complete\CAN\STX \SOH(\b:\EOTtrueR\n\
      \isComplete"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        entities__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "entities"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor NamedEntity)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"entities")) ::
              Data.ProtoLens.FieldDescriptor LinkedEntityListResult
        isComplete__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "is_complete"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'isComplete")) ::
              Data.ProtoLens.FieldDescriptor LinkedEntityListResult
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, entities__field_descriptor),
           (Data.ProtoLens.Tag 2, isComplete__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LinkedEntityListResult'_unknownFields
        (\ x__ y__ -> x__ {_LinkedEntityListResult'_unknownFields = y__})
  defMessage
    = LinkedEntityListResult'_constructor
        {_LinkedEntityListResult'entities = Data.Vector.Generic.empty,
         _LinkedEntityListResult'isComplete = Prelude.Nothing,
         _LinkedEntityListResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LinkedEntityListResult
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld NamedEntity
             -> Data.ProtoLens.Encoding.Bytes.Parser LinkedEntityListResult
        loop x mutable'entities
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'entities <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'entities)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'entities") frozen'entities x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "entities"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'entities y)
                                loop x v
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "is_complete"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"isComplete") y x)
                                  mutable'entities
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'entities
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'entities <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'entities)
          "LinkedEntityListResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'entities") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'isComplete") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData LinkedEntityListResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LinkedEntityListResult'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LinkedEntityListResult'entities x__)
                (Control.DeepSeq.deepseq
                   (_LinkedEntityListResult'isComplete x__) ()))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.reason' @:: Lens' LoggedOff Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.maybe'reason' @:: Lens' LoggedOff (Prelude.Maybe Proto.Common.Shared1.Text)@ -}
data LoggedOff
  = LoggedOff'_constructor {_LoggedOff'reason :: !(Prelude.Maybe Proto.Common.Shared1.Text),
                            _LoggedOff'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LoggedOff where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LoggedOff "reason" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoggedOff'reason (\ x__ y__ -> x__ {_LoggedOff'reason = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField LoggedOff "maybe'reason" (Prelude.Maybe Proto.Common.Shared1.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoggedOff'reason (\ x__ y__ -> x__ {_LoggedOff'reason = y__}))
        Prelude.id
instance Data.ProtoLens.Message LoggedOff where
  messageName _ = Data.Text.pack "common_1.LoggedOff"
  packedMessageDescriptor _
    = "\n\
      \\tLoggedOff\DC2&\n\
      \\ACKreason\CAN\STX \SOH(\v2\SO.shared_1.TextR\ACKreason"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        reason__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "reason"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'reason")) ::
              Data.ProtoLens.FieldDescriptor LoggedOff
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 2, reason__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LoggedOff'_unknownFields
        (\ x__ y__ -> x__ {_LoggedOff'_unknownFields = y__})
  defMessage
    = LoggedOff'_constructor
        {_LoggedOff'reason = Prelude.Nothing,
         _LoggedOff'_unknownFields = []}
  parseMessage
    = let
        loop :: LoggedOff -> Data.ProtoLens.Encoding.Bytes.Parser LoggedOff
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "reason"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"reason") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "LoggedOff"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'reason") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData LoggedOff where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LoggedOff'_unknownFields x__)
             (Control.DeepSeq.deepseq (_LoggedOff'reason x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.accountId' @:: Lens' LoginBillingCustomData Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'accountId' @:: Lens' LoginBillingCustomData (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.billingCustomData' @:: Lens' LoginBillingCustomData [Data.Text.Text]@
         * 'Proto.CMS.Common1_Fields.vec'billingCustomData' @:: Lens' LoginBillingCustomData (Data.Vector.Vector Data.Text.Text)@ -}
data LoginBillingCustomData
  = LoginBillingCustomData'_constructor {_LoginBillingCustomData'accountId :: !(Prelude.Maybe Data.Text.Text),
                                         _LoginBillingCustomData'billingCustomData :: !(Data.Vector.Vector Data.Text.Text),
                                         _LoginBillingCustomData'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LoginBillingCustomData where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LoginBillingCustomData "accountId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginBillingCustomData'accountId
           (\ x__ y__ -> x__ {_LoginBillingCustomData'accountId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginBillingCustomData "maybe'accountId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginBillingCustomData'accountId
           (\ x__ y__ -> x__ {_LoginBillingCustomData'accountId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginBillingCustomData "billingCustomData" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginBillingCustomData'billingCustomData
           (\ x__ y__
              -> x__ {_LoginBillingCustomData'billingCustomData = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField LoginBillingCustomData "vec'billingCustomData" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginBillingCustomData'billingCustomData
           (\ x__ y__
              -> x__ {_LoginBillingCustomData'billingCustomData = y__}))
        Prelude.id
instance Data.ProtoLens.Message LoginBillingCustomData where
  messageName _ = Data.Text.pack "common_1.LoginBillingCustomData"
  packedMessageDescriptor _
    = "\n\
      \\SYNLoginBillingCustomData\DC2\GS\n\
      \\n\
      \account_id\CAN\SOH \SOH(\tR\taccountId\DC2.\n\
      \\DC3billing_custom_data\CAN\STX \ETX(\tR\DC1billingCustomData"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        accountId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "account_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'accountId")) ::
              Data.ProtoLens.FieldDescriptor LoginBillingCustomData
        billingCustomData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "billing_custom_data"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"billingCustomData")) ::
              Data.ProtoLens.FieldDescriptor LoginBillingCustomData
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, accountId__field_descriptor),
           (Data.ProtoLens.Tag 2, billingCustomData__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LoginBillingCustomData'_unknownFields
        (\ x__ y__ -> x__ {_LoginBillingCustomData'_unknownFields = y__})
  defMessage
    = LoginBillingCustomData'_constructor
        {_LoginBillingCustomData'accountId = Prelude.Nothing,
         _LoginBillingCustomData'billingCustomData = Data.Vector.Generic.empty,
         _LoginBillingCustomData'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LoginBillingCustomData
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
             -> Data.ProtoLens.Encoding.Bytes.Parser LoginBillingCustomData
        loop x mutable'billingCustomData
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'billingCustomData <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                    (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                       mutable'billingCustomData)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'billingCustomData")
                              frozen'billingCustomData x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "account_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"accountId") y x)
                                  mutable'billingCustomData
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getText
                                              (Prelude.fromIntegral len))
                                        "billing_custom_data"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'billingCustomData y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'billingCustomData
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'billingCustomData <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'billingCustomData)
          "LoginBillingCustomData"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'accountId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.Text.Encoding.encodeUtf8 _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'billingCustomData") _x))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData LoginBillingCustomData where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LoginBillingCustomData'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LoginBillingCustomData'accountId x__)
                (Control.DeepSeq.deepseq
                   (_LoginBillingCustomData'billingCustomData x__) ()))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginId' @:: Lens' LoginBillingCustomDataRequest Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'loginId' @:: Lens' LoginBillingCustomDataRequest (Prelude.Maybe Data.Text.Text)@ -}
data LoginBillingCustomDataRequest
  = LoginBillingCustomDataRequest'_constructor {_LoginBillingCustomDataRequest'loginId :: !(Prelude.Maybe Data.Text.Text),
                                                _LoginBillingCustomDataRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LoginBillingCustomDataRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LoginBillingCustomDataRequest "loginId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginBillingCustomDataRequest'loginId
           (\ x__ y__ -> x__ {_LoginBillingCustomDataRequest'loginId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginBillingCustomDataRequest "maybe'loginId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginBillingCustomDataRequest'loginId
           (\ x__ y__ -> x__ {_LoginBillingCustomDataRequest'loginId = y__}))
        Prelude.id
instance Data.ProtoLens.Message LoginBillingCustomDataRequest where
  messageName _
    = Data.Text.pack "common_1.LoginBillingCustomDataRequest"
  packedMessageDescriptor _
    = "\n\
      \\GSLoginBillingCustomDataRequest\DC2\EM\n\
      \\blogin_id\CAN\SOH \SOH(\tR\aloginId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'loginId")) ::
              Data.ProtoLens.FieldDescriptor LoginBillingCustomDataRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LoginBillingCustomDataRequest'_unknownFields
        (\ x__ y__
           -> x__ {_LoginBillingCustomDataRequest'_unknownFields = y__})
  defMessage
    = LoginBillingCustomDataRequest'_constructor
        {_LoginBillingCustomDataRequest'loginId = Prelude.Nothing,
         _LoginBillingCustomDataRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LoginBillingCustomDataRequest
          -> Data.ProtoLens.Encoding.Bytes.Parser LoginBillingCustomDataRequest
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "login_id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"loginId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "LoginBillingCustomDataRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'loginId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData LoginBillingCustomDataRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LoginBillingCustomDataRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LoginBillingCustomDataRequest'loginId x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginBillingCustomData' @:: Lens' LoginBillingCustomDataResult [LoginBillingCustomData]@
         * 'Proto.CMS.Common1_Fields.vec'loginBillingCustomData' @:: Lens' LoginBillingCustomDataResult (Data.Vector.Vector LoginBillingCustomData)@ -}
data LoginBillingCustomDataResult
  = LoginBillingCustomDataResult'_constructor {_LoginBillingCustomDataResult'loginBillingCustomData :: !(Data.Vector.Vector LoginBillingCustomData),
                                               _LoginBillingCustomDataResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LoginBillingCustomDataResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LoginBillingCustomDataResult "loginBillingCustomData" [LoginBillingCustomData] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginBillingCustomDataResult'loginBillingCustomData
           (\ x__ y__
              -> x__
                   {_LoginBillingCustomDataResult'loginBillingCustomData = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField LoginBillingCustomDataResult "vec'loginBillingCustomData" (Data.Vector.Vector LoginBillingCustomData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginBillingCustomDataResult'loginBillingCustomData
           (\ x__ y__
              -> x__
                   {_LoginBillingCustomDataResult'loginBillingCustomData = y__}))
        Prelude.id
instance Data.ProtoLens.Message LoginBillingCustomDataResult where
  messageName _
    = Data.Text.pack "common_1.LoginBillingCustomDataResult"
  packedMessageDescriptor _
    = "\n\
      \\FSLoginBillingCustomDataResult\DC2[\n\
      \\EMlogin_billing_custom_data\CAN\SOH \ETX(\v2 .common_1.LoginBillingCustomDataR\SYNloginBillingCustomData"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginBillingCustomData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_billing_custom_data"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor LoginBillingCustomData)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"loginBillingCustomData")) ::
              Data.ProtoLens.FieldDescriptor LoginBillingCustomDataResult
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginBillingCustomData__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LoginBillingCustomDataResult'_unknownFields
        (\ x__ y__
           -> x__ {_LoginBillingCustomDataResult'_unknownFields = y__})
  defMessage
    = LoginBillingCustomDataResult'_constructor
        {_LoginBillingCustomDataResult'loginBillingCustomData = Data.Vector.Generic.empty,
         _LoginBillingCustomDataResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LoginBillingCustomDataResult
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld LoginBillingCustomData
             -> Data.ProtoLens.Encoding.Bytes.Parser LoginBillingCustomDataResult
        loop x mutable'loginBillingCustomData
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'loginBillingCustomData <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                         (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                            mutable'loginBillingCustomData)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'loginBillingCustomData")
                              frozen'loginBillingCustomData x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "login_billing_custom_data"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'loginBillingCustomData y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'loginBillingCustomData
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'loginBillingCustomData <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                  Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'loginBillingCustomData)
          "LoginBillingCustomDataResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'loginBillingCustomData") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData LoginBillingCustomDataResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LoginBillingCustomDataResult'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LoginBillingCustomDataResult'loginBillingCustomData x__) ())
data LoginDomain
  = CQG_TRADE_ROUTING | CQG_SYSTEM | CQG_ADMIN
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum LoginDomain where
  maybeToEnum 2 = Prelude.Just CQG_TRADE_ROUTING
  maybeToEnum 3 = Prelude.Just CQG_SYSTEM
  maybeToEnum 4 = Prelude.Just CQG_ADMIN
  maybeToEnum _ = Prelude.Nothing
  showEnum CQG_TRADE_ROUTING = "CQG_TRADE_ROUTING"
  showEnum CQG_SYSTEM = "CQG_SYSTEM"
  showEnum CQG_ADMIN = "CQG_ADMIN"
  readEnum k
    | (Prelude.==) k "CQG_TRADE_ROUTING"
    = Prelude.Just CQG_TRADE_ROUTING
    | (Prelude.==) k "CQG_SYSTEM" = Prelude.Just CQG_SYSTEM
    | (Prelude.==) k "CQG_ADMIN" = Prelude.Just CQG_ADMIN
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded LoginDomain where
  minBound = CQG_TRADE_ROUTING
  maxBound = CQG_ADMIN
instance Prelude.Enum LoginDomain where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum LoginDomain: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum CQG_TRADE_ROUTING = 2
  fromEnum CQG_SYSTEM = 3
  fromEnum CQG_ADMIN = 4
  succ CQG_ADMIN
    = Prelude.error
        "LoginDomain.succ: bad argument CQG_ADMIN. This value would be out of bounds."
  succ CQG_TRADE_ROUTING = CQG_SYSTEM
  succ CQG_SYSTEM = CQG_ADMIN
  pred CQG_TRADE_ROUTING
    = Prelude.error
        "LoginDomain.pred: bad argument CQG_TRADE_ROUTING. This value would be out of bounds."
  pred CQG_SYSTEM = CQG_TRADE_ROUTING
  pred CQG_ADMIN = CQG_SYSTEM
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault LoginDomain where
  fieldDefault = CQG_TRADE_ROUTING
instance Control.DeepSeq.NFData LoginDomain where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginId' @:: Lens' LoginExchangeMemberId Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'loginId' @:: Lens' LoginExchangeMemberId (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.exchangeId' @:: Lens' LoginExchangeMemberId Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'exchangeId' @:: Lens' LoginExchangeMemberId (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.memberId' @:: Lens' LoginExchangeMemberId Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'memberId' @:: Lens' LoginExchangeMemberId (Prelude.Maybe Data.Text.Text)@ -}
data LoginExchangeMemberId
  = LoginExchangeMemberId'_constructor {_LoginExchangeMemberId'loginId :: !(Prelude.Maybe Data.Text.Text),
                                        _LoginExchangeMemberId'exchangeId :: !(Prelude.Maybe Data.Text.Text),
                                        _LoginExchangeMemberId'memberId :: !(Prelude.Maybe Data.Text.Text),
                                        _LoginExchangeMemberId'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LoginExchangeMemberId where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LoginExchangeMemberId "loginId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginExchangeMemberId'loginId
           (\ x__ y__ -> x__ {_LoginExchangeMemberId'loginId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginExchangeMemberId "maybe'loginId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginExchangeMemberId'loginId
           (\ x__ y__ -> x__ {_LoginExchangeMemberId'loginId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginExchangeMemberId "exchangeId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginExchangeMemberId'exchangeId
           (\ x__ y__ -> x__ {_LoginExchangeMemberId'exchangeId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginExchangeMemberId "maybe'exchangeId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginExchangeMemberId'exchangeId
           (\ x__ y__ -> x__ {_LoginExchangeMemberId'exchangeId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginExchangeMemberId "memberId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginExchangeMemberId'memberId
           (\ x__ y__ -> x__ {_LoginExchangeMemberId'memberId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginExchangeMemberId "maybe'memberId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginExchangeMemberId'memberId
           (\ x__ y__ -> x__ {_LoginExchangeMemberId'memberId = y__}))
        Prelude.id
instance Data.ProtoLens.Message LoginExchangeMemberId where
  messageName _ = Data.Text.pack "common_1.LoginExchangeMemberId"
  packedMessageDescriptor _
    = "\n\
      \\NAKLoginExchangeMemberId\DC2\EM\n\
      \\blogin_id\CAN\SOH \SOH(\tR\aloginId\DC2\US\n\
      \\vexchange_id\CAN\STX \SOH(\tR\n\
      \exchangeId\DC2\ESC\n\
      \\tmember_id\CAN\ETX \SOH(\tR\bmemberId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'loginId")) ::
              Data.ProtoLens.FieldDescriptor LoginExchangeMemberId
        exchangeId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "exchange_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'exchangeId")) ::
              Data.ProtoLens.FieldDescriptor LoginExchangeMemberId
        memberId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "member_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'memberId")) ::
              Data.ProtoLens.FieldDescriptor LoginExchangeMemberId
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginId__field_descriptor),
           (Data.ProtoLens.Tag 2, exchangeId__field_descriptor),
           (Data.ProtoLens.Tag 3, memberId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LoginExchangeMemberId'_unknownFields
        (\ x__ y__ -> x__ {_LoginExchangeMemberId'_unknownFields = y__})
  defMessage
    = LoginExchangeMemberId'_constructor
        {_LoginExchangeMemberId'loginId = Prelude.Nothing,
         _LoginExchangeMemberId'exchangeId = Prelude.Nothing,
         _LoginExchangeMemberId'memberId = Prelude.Nothing,
         _LoginExchangeMemberId'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LoginExchangeMemberId
          -> Data.ProtoLens.Encoding.Bytes.Parser LoginExchangeMemberId
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "login_id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"loginId") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "exchange_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"exchangeId") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "member_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"memberId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "LoginExchangeMemberId"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'loginId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'exchangeId") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'memberId") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData LoginExchangeMemberId where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LoginExchangeMemberId'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LoginExchangeMemberId'loginId x__)
                (Control.DeepSeq.deepseq
                   (_LoginExchangeMemberId'exchangeId x__)
                   (Control.DeepSeq.deepseq
                      (_LoginExchangeMemberId'memberId x__) ())))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginId' @:: Lens' LoginExchangeMemberIdListRequest Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'loginId' @:: Lens' LoginExchangeMemberIdListRequest (Prelude.Maybe Data.Text.Text)@ -}
data LoginExchangeMemberIdListRequest
  = LoginExchangeMemberIdListRequest'_constructor {_LoginExchangeMemberIdListRequest'loginId :: !(Prelude.Maybe Data.Text.Text),
                                                   _LoginExchangeMemberIdListRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LoginExchangeMemberIdListRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LoginExchangeMemberIdListRequest "loginId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginExchangeMemberIdListRequest'loginId
           (\ x__ y__
              -> x__ {_LoginExchangeMemberIdListRequest'loginId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginExchangeMemberIdListRequest "maybe'loginId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginExchangeMemberIdListRequest'loginId
           (\ x__ y__
              -> x__ {_LoginExchangeMemberIdListRequest'loginId = y__}))
        Prelude.id
instance Data.ProtoLens.Message LoginExchangeMemberIdListRequest where
  messageName _
    = Data.Text.pack "common_1.LoginExchangeMemberIdListRequest"
  packedMessageDescriptor _
    = "\n\
      \ LoginExchangeMemberIdListRequest\DC2\EM\n\
      \\blogin_id\CAN\SOH \SOH(\tR\aloginId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'loginId")) ::
              Data.ProtoLens.FieldDescriptor LoginExchangeMemberIdListRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LoginExchangeMemberIdListRequest'_unknownFields
        (\ x__ y__
           -> x__ {_LoginExchangeMemberIdListRequest'_unknownFields = y__})
  defMessage
    = LoginExchangeMemberIdListRequest'_constructor
        {_LoginExchangeMemberIdListRequest'loginId = Prelude.Nothing,
         _LoginExchangeMemberIdListRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LoginExchangeMemberIdListRequest
          -> Data.ProtoLens.Encoding.Bytes.Parser LoginExchangeMemberIdListRequest
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "login_id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"loginId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "LoginExchangeMemberIdListRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'loginId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData LoginExchangeMemberIdListRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LoginExchangeMemberIdListRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LoginExchangeMemberIdListRequest'loginId x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginMemberIds' @:: Lens' LoginExchangeMemberIdListResult [LoginExchangeMemberId]@
         * 'Proto.CMS.Common1_Fields.vec'loginMemberIds' @:: Lens' LoginExchangeMemberIdListResult (Data.Vector.Vector LoginExchangeMemberId)@ -}
data LoginExchangeMemberIdListResult
  = LoginExchangeMemberIdListResult'_constructor {_LoginExchangeMemberIdListResult'loginMemberIds :: !(Data.Vector.Vector LoginExchangeMemberId),
                                                  _LoginExchangeMemberIdListResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LoginExchangeMemberIdListResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LoginExchangeMemberIdListResult "loginMemberIds" [LoginExchangeMemberId] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginExchangeMemberIdListResult'loginMemberIds
           (\ x__ y__
              -> x__ {_LoginExchangeMemberIdListResult'loginMemberIds = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField LoginExchangeMemberIdListResult "vec'loginMemberIds" (Data.Vector.Vector LoginExchangeMemberId) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginExchangeMemberIdListResult'loginMemberIds
           (\ x__ y__
              -> x__ {_LoginExchangeMemberIdListResult'loginMemberIds = y__}))
        Prelude.id
instance Data.ProtoLens.Message LoginExchangeMemberIdListResult where
  messageName _
    = Data.Text.pack "common_1.LoginExchangeMemberIdListResult"
  packedMessageDescriptor _
    = "\n\
      \\USLoginExchangeMemberIdListResult\DC2I\n\
      \\DLElogin_member_ids\CAN\SOH \ETX(\v2\US.common_1.LoginExchangeMemberIdR\SOloginMemberIds"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginMemberIds__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_member_ids"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor LoginExchangeMemberId)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"loginMemberIds")) ::
              Data.ProtoLens.FieldDescriptor LoginExchangeMemberIdListResult
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginMemberIds__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LoginExchangeMemberIdListResult'_unknownFields
        (\ x__ y__
           -> x__ {_LoginExchangeMemberIdListResult'_unknownFields = y__})
  defMessage
    = LoginExchangeMemberIdListResult'_constructor
        {_LoginExchangeMemberIdListResult'loginMemberIds = Data.Vector.Generic.empty,
         _LoginExchangeMemberIdListResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LoginExchangeMemberIdListResult
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld LoginExchangeMemberId
             -> Data.ProtoLens.Encoding.Bytes.Parser LoginExchangeMemberIdListResult
        loop x mutable'loginMemberIds
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'loginMemberIds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                    mutable'loginMemberIds)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'loginMemberIds")
                              frozen'loginMemberIds x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "login_member_ids"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'loginMemberIds y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'loginMemberIds
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'loginMemberIds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'loginMemberIds)
          "LoginExchangeMemberIdListResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'loginMemberIds") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData LoginExchangeMemberIdListResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LoginExchangeMemberIdListResult'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LoginExchangeMemberIdListResult'loginMemberIds x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.clearedFields' @:: Lens' LoginSettings [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'clearedFields' @:: Lens' LoginSettings (Data.Vector.Unboxed.Vector Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.loginId' @:: Lens' LoginSettings Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'loginId' @:: Lens' LoginSettings (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.preferredConnectionPointId' @:: Lens' LoginSettings Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'preferredConnectionPointId' @:: Lens' LoginSettings (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.concurrentSessionsNumber' @:: Lens' LoginSettings Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'concurrentSessionsNumber' @:: Lens' LoginSettings (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.passwordNeverExpires' @:: Lens' LoginSettings Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'passwordNeverExpires' @:: Lens' LoginSettings (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.obsoleteIsStrategyRunner' @:: Lens' LoginSettings Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteIsStrategyRunner' @:: Lens' LoginSettings (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.preferredConnectionPointName' @:: Lens' LoginSettings Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'preferredConnectionPointName' @:: Lens' LoginSettings (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.linkedLoginId' @:: Lens' LoginSettings Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'linkedLoginId' @:: Lens' LoginSettings (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.externalAuth' @:: Lens' LoginSettings ExternalAuth@
         * 'Proto.CMS.Common1_Fields.maybe'externalAuth' @:: Lens' LoginSettings (Prelude.Maybe ExternalAuth)@
         * 'Proto.CMS.Common1_Fields.dailyLogonLimit' @:: Lens' LoginSettings Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'dailyLogonLimit' @:: Lens' LoginSettings (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.dailyLogonCount' @:: Lens' LoginSettings Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'dailyLogonCount' @:: Lens' LoginSettings (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.authenticationSystem' @:: Lens' LoginSettings Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'authenticationSystem' @:: Lens' LoginSettings (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.allowExceedAccountLimit' @:: Lens' LoginSettings Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'allowExceedAccountLimit' @:: Lens' LoginSettings (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.onSessionDisconnectAction' @:: Lens' LoginSettings Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'onSessionDisconnectAction' @:: Lens' LoginSettings (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.reconnectTimeoutAfterDisconnect' @:: Lens' LoginSettings Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'reconnectTimeoutAfterDisconnect' @:: Lens' LoginSettings (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.timeZone' @:: Lens' LoginSettings Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'timeZone' @:: Lens' LoginSettings (Prelude.Maybe Data.Text.Text)@ -}
data LoginSettings
  = LoginSettings'_constructor {_LoginSettings'clearedFields :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                                _LoginSettings'loginId :: !(Prelude.Maybe Data.Text.Text),
                                _LoginSettings'preferredConnectionPointId :: !(Prelude.Maybe Data.Text.Text),
                                _LoginSettings'concurrentSessionsNumber :: !(Prelude.Maybe Data.Word.Word32),
                                _LoginSettings'passwordNeverExpires :: !(Prelude.Maybe Prelude.Bool),
                                _LoginSettings'obsoleteIsStrategyRunner :: !(Prelude.Maybe Prelude.Bool),
                                _LoginSettings'preferredConnectionPointName :: !(Prelude.Maybe Data.Text.Text),
                                _LoginSettings'linkedLoginId :: !(Prelude.Maybe Data.Text.Text),
                                _LoginSettings'externalAuth :: !(Prelude.Maybe ExternalAuth),
                                _LoginSettings'dailyLogonLimit :: !(Prelude.Maybe Data.Word.Word32),
                                _LoginSettings'dailyLogonCount :: !(Prelude.Maybe Data.Word.Word32),
                                _LoginSettings'authenticationSystem :: !(Prelude.Maybe Data.Text.Text),
                                _LoginSettings'allowExceedAccountLimit :: !(Prelude.Maybe Prelude.Bool),
                                _LoginSettings'onSessionDisconnectAction :: !(Prelude.Maybe Data.Word.Word32),
                                _LoginSettings'reconnectTimeoutAfterDisconnect :: !(Prelude.Maybe Data.Word.Word32),
                                _LoginSettings'timeZone :: !(Prelude.Maybe Data.Text.Text),
                                _LoginSettings'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LoginSettings where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LoginSettings "clearedFields" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'clearedFields
           (\ x__ y__ -> x__ {_LoginSettings'clearedFields = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField LoginSettings "vec'clearedFields" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'clearedFields
           (\ x__ y__ -> x__ {_LoginSettings'clearedFields = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "loginId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'loginId
           (\ x__ y__ -> x__ {_LoginSettings'loginId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'loginId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'loginId
           (\ x__ y__ -> x__ {_LoginSettings'loginId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "preferredConnectionPointId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'preferredConnectionPointId
           (\ x__ y__
              -> x__ {_LoginSettings'preferredConnectionPointId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'preferredConnectionPointId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'preferredConnectionPointId
           (\ x__ y__
              -> x__ {_LoginSettings'preferredConnectionPointId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "concurrentSessionsNumber" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'concurrentSessionsNumber
           (\ x__ y__ -> x__ {_LoginSettings'concurrentSessionsNumber = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'concurrentSessionsNumber" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'concurrentSessionsNumber
           (\ x__ y__ -> x__ {_LoginSettings'concurrentSessionsNumber = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "passwordNeverExpires" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'passwordNeverExpires
           (\ x__ y__ -> x__ {_LoginSettings'passwordNeverExpires = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'passwordNeverExpires" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'passwordNeverExpires
           (\ x__ y__ -> x__ {_LoginSettings'passwordNeverExpires = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "obsoleteIsStrategyRunner" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'obsoleteIsStrategyRunner
           (\ x__ y__ -> x__ {_LoginSettings'obsoleteIsStrategyRunner = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'obsoleteIsStrategyRunner" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'obsoleteIsStrategyRunner
           (\ x__ y__ -> x__ {_LoginSettings'obsoleteIsStrategyRunner = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "preferredConnectionPointName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'preferredConnectionPointName
           (\ x__ y__
              -> x__ {_LoginSettings'preferredConnectionPointName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'preferredConnectionPointName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'preferredConnectionPointName
           (\ x__ y__
              -> x__ {_LoginSettings'preferredConnectionPointName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "linkedLoginId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'linkedLoginId
           (\ x__ y__ -> x__ {_LoginSettings'linkedLoginId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'linkedLoginId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'linkedLoginId
           (\ x__ y__ -> x__ {_LoginSettings'linkedLoginId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "externalAuth" ExternalAuth where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'externalAuth
           (\ x__ y__ -> x__ {_LoginSettings'externalAuth = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'externalAuth" (Prelude.Maybe ExternalAuth) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'externalAuth
           (\ x__ y__ -> x__ {_LoginSettings'externalAuth = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "dailyLogonLimit" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'dailyLogonLimit
           (\ x__ y__ -> x__ {_LoginSettings'dailyLogonLimit = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'dailyLogonLimit" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'dailyLogonLimit
           (\ x__ y__ -> x__ {_LoginSettings'dailyLogonLimit = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "dailyLogonCount" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'dailyLogonCount
           (\ x__ y__ -> x__ {_LoginSettings'dailyLogonCount = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'dailyLogonCount" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'dailyLogonCount
           (\ x__ y__ -> x__ {_LoginSettings'dailyLogonCount = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "authenticationSystem" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'authenticationSystem
           (\ x__ y__ -> x__ {_LoginSettings'authenticationSystem = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'authenticationSystem" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'authenticationSystem
           (\ x__ y__ -> x__ {_LoginSettings'authenticationSystem = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "allowExceedAccountLimit" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'allowExceedAccountLimit
           (\ x__ y__ -> x__ {_LoginSettings'allowExceedAccountLimit = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'allowExceedAccountLimit" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'allowExceedAccountLimit
           (\ x__ y__ -> x__ {_LoginSettings'allowExceedAccountLimit = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "onSessionDisconnectAction" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'onSessionDisconnectAction
           (\ x__ y__
              -> x__ {_LoginSettings'onSessionDisconnectAction = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'onSessionDisconnectAction" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'onSessionDisconnectAction
           (\ x__ y__
              -> x__ {_LoginSettings'onSessionDisconnectAction = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "reconnectTimeoutAfterDisconnect" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'reconnectTimeoutAfterDisconnect
           (\ x__ y__
              -> x__ {_LoginSettings'reconnectTimeoutAfterDisconnect = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'reconnectTimeoutAfterDisconnect" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'reconnectTimeoutAfterDisconnect
           (\ x__ y__
              -> x__ {_LoginSettings'reconnectTimeoutAfterDisconnect = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LoginSettings "timeZone" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'timeZone
           (\ x__ y__ -> x__ {_LoginSettings'timeZone = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettings "maybe'timeZone" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettings'timeZone
           (\ x__ y__ -> x__ {_LoginSettings'timeZone = y__}))
        Prelude.id
instance Data.ProtoLens.Message LoginSettings where
  messageName _ = Data.Text.pack "common_1.LoginSettings"
  packedMessageDescriptor _
    = "\n\
      \\rLoginSettings\DC2%\n\
      \\SOcleared_fields\CAN\a \ETX(\rR\rclearedFields\DC2\EM\n\
      \\blogin_id\CAN\SOH \SOH(\tR\aloginId\DC2A\n\
      \\GSpreferred_connection_point_id\CAN\STX \SOH(\tR\SUBpreferredConnectionPointId\DC2<\n\
      \\SUBconcurrent_sessions_number\CAN\ETX \SOH(\rR\CANconcurrentSessionsNumber\DC24\n\
      \\SYNpassword_never_expires\CAN\EOT \SOH(\bR\DC4passwordNeverExpires\DC2A\n\
      \\ESCobsolete_is_strategy_runner\CAN\ENQ \SOH(\bR\CANobsoleteIsStrategyRunnerB\STX\CAN\SOH\DC2E\n\
      \\USpreferred_connection_point_name\CAN\ACK \SOH(\tR\FSpreferredConnectionPointName\DC2&\n\
      \\SIlinked_login_id\CAN\b \SOH(\tR\rlinkedLoginId\DC2;\n\
      \\rexternal_auth\CAN\t \SOH(\v2\SYN.common_1.ExternalAuthR\fexternalAuth\DC2*\n\
      \\DC1daily_logon_limit\CAN\n\
      \ \SOH(\rR\SIdailyLogonLimit\DC2*\n\
      \\DC1daily_logon_count\CAN\v \SOH(\rR\SIdailyLogonCount\DC23\n\
      \\NAKauthentication_system\CAN\f \SOH(\tR\DC4authenticationSystem\DC2;\n\
      \\SUBallow_exceed_account_limit\CAN\r \SOH(\bR\ETBallowExceedAccountLimit\DC2?\n\
      \\FSon_session_disconnect_action\CAN\SO \SOH(\rR\EMonSessionDisconnectAction\DC2K\n\
      \\"reconnect_timeout_after_disconnect\CAN\SI \SOH(\rR\USreconnectTimeoutAfterDisconnect\DC2\ESC\n\
      \\ttime_zone\CAN\DLE \SOH(\tR\btimeZone\"8\n\
      \\DLEDisconnectAction\DC2\v\n\
      \\aNOTHING\DLE\SOH\DC2\n\
      \\n\
      \\ACKCANCEL\DLE\STX\DC2\v\n\
      \\aSUSPEND\DLE\ETX"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        clearedFields__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cleared_fields"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"clearedFields")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        loginId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'loginId")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        preferredConnectionPointId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "preferred_connection_point_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'preferredConnectionPointId")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        concurrentSessionsNumber__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "concurrent_sessions_number"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'concurrentSessionsNumber")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        passwordNeverExpires__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "password_never_expires"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'passwordNeverExpires")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        obsoleteIsStrategyRunner__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_is_strategy_runner"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsoleteIsStrategyRunner")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        preferredConnectionPointName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "preferred_connection_point_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'preferredConnectionPointName")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        linkedLoginId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "linked_login_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'linkedLoginId")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        externalAuth__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "external_auth"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ExternalAuth)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'externalAuth")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        dailyLogonLimit__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "daily_logon_limit"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dailyLogonLimit")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        dailyLogonCount__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "daily_logon_count"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dailyLogonCount")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        authenticationSystem__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "authentication_system"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'authenticationSystem")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        allowExceedAccountLimit__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "allow_exceed_account_limit"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'allowExceedAccountLimit")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        onSessionDisconnectAction__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "on_session_disconnect_action"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'onSessionDisconnectAction")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        reconnectTimeoutAfterDisconnect__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "reconnect_timeout_after_disconnect"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'reconnectTimeoutAfterDisconnect")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
        timeZone__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "time_zone"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeZone")) ::
              Data.ProtoLens.FieldDescriptor LoginSettings
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 7, clearedFields__field_descriptor),
           (Data.ProtoLens.Tag 1, loginId__field_descriptor),
           (Data.ProtoLens.Tag 2, 
            preferredConnectionPointId__field_descriptor),
           (Data.ProtoLens.Tag 3, concurrentSessionsNumber__field_descriptor),
           (Data.ProtoLens.Tag 4, passwordNeverExpires__field_descriptor),
           (Data.ProtoLens.Tag 5, obsoleteIsStrategyRunner__field_descriptor),
           (Data.ProtoLens.Tag 6, 
            preferredConnectionPointName__field_descriptor),
           (Data.ProtoLens.Tag 8, linkedLoginId__field_descriptor),
           (Data.ProtoLens.Tag 9, externalAuth__field_descriptor),
           (Data.ProtoLens.Tag 10, dailyLogonLimit__field_descriptor),
           (Data.ProtoLens.Tag 11, dailyLogonCount__field_descriptor),
           (Data.ProtoLens.Tag 12, authenticationSystem__field_descriptor),
           (Data.ProtoLens.Tag 13, allowExceedAccountLimit__field_descriptor),
           (Data.ProtoLens.Tag 14, 
            onSessionDisconnectAction__field_descriptor),
           (Data.ProtoLens.Tag 15, 
            reconnectTimeoutAfterDisconnect__field_descriptor),
           (Data.ProtoLens.Tag 16, timeZone__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LoginSettings'_unknownFields
        (\ x__ y__ -> x__ {_LoginSettings'_unknownFields = y__})
  defMessage
    = LoginSettings'_constructor
        {_LoginSettings'clearedFields = Data.Vector.Generic.empty,
         _LoginSettings'loginId = Prelude.Nothing,
         _LoginSettings'preferredConnectionPointId = Prelude.Nothing,
         _LoginSettings'concurrentSessionsNumber = Prelude.Nothing,
         _LoginSettings'passwordNeverExpires = Prelude.Nothing,
         _LoginSettings'obsoleteIsStrategyRunner = Prelude.Nothing,
         _LoginSettings'preferredConnectionPointName = Prelude.Nothing,
         _LoginSettings'linkedLoginId = Prelude.Nothing,
         _LoginSettings'externalAuth = Prelude.Nothing,
         _LoginSettings'dailyLogonLimit = Prelude.Nothing,
         _LoginSettings'dailyLogonCount = Prelude.Nothing,
         _LoginSettings'authenticationSystem = Prelude.Nothing,
         _LoginSettings'allowExceedAccountLimit = Prelude.Nothing,
         _LoginSettings'onSessionDisconnectAction = Prelude.Nothing,
         _LoginSettings'reconnectTimeoutAfterDisconnect = Prelude.Nothing,
         _LoginSettings'timeZone = Prelude.Nothing,
         _LoginSettings'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LoginSettings
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
             -> Data.ProtoLens.Encoding.Bytes.Parser LoginSettings
        loop x mutable'clearedFields
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'clearedFields <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                   mutable'clearedFields)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'clearedFields")
                              frozen'clearedFields x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        56
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "cleared_fields"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'clearedFields y)
                                loop x v
                        58
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "cleared_fields"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'clearedFields)
                                loop x y
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "login_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"loginId") y x)
                                  mutable'clearedFields
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "preferred_connection_point_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"preferredConnectionPointId") y x)
                                  mutable'clearedFields
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "concurrent_sessions_number"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"concurrentSessionsNumber") y x)
                                  mutable'clearedFields
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "password_never_expires"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"passwordNeverExpires") y x)
                                  mutable'clearedFields
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "obsolete_is_strategy_runner"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteIsStrategyRunner") y x)
                                  mutable'clearedFields
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "preferred_connection_point_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"preferredConnectionPointName") y
                                     x)
                                  mutable'clearedFields
                        66
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "linked_login_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"linkedLoginId") y x)
                                  mutable'clearedFields
                        74
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "external_auth"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"externalAuth") y x)
                                  mutable'clearedFields
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "daily_logon_limit"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"dailyLogonLimit") y x)
                                  mutable'clearedFields
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "daily_logon_count"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"dailyLogonCount") y x)
                                  mutable'clearedFields
                        98
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "authentication_system"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"authenticationSystem") y x)
                                  mutable'clearedFields
                        104
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "allow_exceed_account_limit"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"allowExceedAccountLimit") y x)
                                  mutable'clearedFields
                        112
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "on_session_disconnect_action"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"onSessionDisconnectAction") y x)
                                  mutable'clearedFields
                        120
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "reconnect_timeout_after_disconnect"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"reconnectTimeoutAfterDisconnect")
                                     y x)
                                  mutable'clearedFields
                        130
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "time_zone"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeZone") y x)
                                  mutable'clearedFields
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'clearedFields
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'clearedFields <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'clearedFields)
          "LoginSettings"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                        ((Prelude..)
                           Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'clearedFields") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'loginId") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'preferredConnectionPointId") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'concurrentSessionsNumber") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'passwordNeverExpires") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (\ b -> if b then 1 else 0) _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'obsoleteIsStrategyRunner") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (\ b -> if b then 1 else 0) _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field
                                         @"maybe'preferredConnectionPointName")
                                      _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.Text.Encoding.encodeUtf8 _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'linkedLoginId") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                                            ((Prelude..)
                                               (\ bs
                                                  -> (Data.Monoid.<>)
                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                          (Prelude.fromIntegral
                                                             (Data.ByteString.length bs)))
                                                       (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                               Data.Text.Encoding.encodeUtf8 _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'externalAuth") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                               ((Prelude..)
                                                  (\ bs
                                                     -> (Data.Monoid.<>)
                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                             (Prelude.fromIntegral
                                                                (Data.ByteString.length bs)))
                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                             bs))
                                                  Data.ProtoLens.encodeMessage _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'dailyLogonLimit")
                                               _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field
                                                     @"maybe'dailyLogonCount")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        Prelude.fromIntegral _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field
                                                        @"maybe'authenticationSystem")
                                                     _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 98)
                                                        ((Prelude..)
                                                           (\ bs
                                                              -> (Data.Monoid.<>)
                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                      (Prelude.fromIntegral
                                                                         (Data.ByteString.length
                                                                            bs)))
                                                                   (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                      bs))
                                                           Data.Text.Encoding.encodeUtf8 _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field
                                                           @"maybe'allowExceedAccountLimit")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              104)
                                                           ((Prelude..)
                                                              Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              (\ b -> if b then 1 else 0) _v))
                                                 ((Data.Monoid.<>)
                                                    (case
                                                         Lens.Family2.view
                                                           (Data.ProtoLens.Field.field
                                                              @"maybe'onSessionDisconnectAction")
                                                           _x
                                                     of
                                                       Prelude.Nothing -> Data.Monoid.mempty
                                                       (Prelude.Just _v)
                                                         -> (Data.Monoid.<>)
                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 112)
                                                              ((Prelude..)
                                                                 Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 Prelude.fromIntegral _v))
                                                    ((Data.Monoid.<>)
                                                       (case
                                                            Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"maybe'reconnectTimeoutAfterDisconnect")
                                                              _x
                                                        of
                                                          Prelude.Nothing -> Data.Monoid.mempty
                                                          (Prelude.Just _v)
                                                            -> (Data.Monoid.<>)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    120)
                                                                 ((Prelude..)
                                                                    Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    Prelude.fromIntegral _v))
                                                       ((Data.Monoid.<>)
                                                          (case
                                                               Lens.Family2.view
                                                                 (Data.ProtoLens.Field.field
                                                                    @"maybe'timeZone")
                                                                 _x
                                                           of
                                                             Prelude.Nothing -> Data.Monoid.mempty
                                                             (Prelude.Just _v)
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       130)
                                                                    ((Prelude..)
                                                                       (\ bs
                                                                          -> (Data.Monoid.<>)
                                                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                  (Prelude.fromIntegral
                                                                                     (Data.ByteString.length
                                                                                        bs)))
                                                                               (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                  bs))
                                                                       Data.Text.Encoding.encodeUtf8
                                                                       _v))
                                                          (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                             (Lens.Family2.view
                                                                Data.ProtoLens.unknownFields
                                                                _x)))))))))))))))))
instance Control.DeepSeq.NFData LoginSettings where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LoginSettings'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LoginSettings'clearedFields x__)
                (Control.DeepSeq.deepseq
                   (_LoginSettings'loginId x__)
                   (Control.DeepSeq.deepseq
                      (_LoginSettings'preferredConnectionPointId x__)
                      (Control.DeepSeq.deepseq
                         (_LoginSettings'concurrentSessionsNumber x__)
                         (Control.DeepSeq.deepseq
                            (_LoginSettings'passwordNeverExpires x__)
                            (Control.DeepSeq.deepseq
                               (_LoginSettings'obsoleteIsStrategyRunner x__)
                               (Control.DeepSeq.deepseq
                                  (_LoginSettings'preferredConnectionPointName x__)
                                  (Control.DeepSeq.deepseq
                                     (_LoginSettings'linkedLoginId x__)
                                     (Control.DeepSeq.deepseq
                                        (_LoginSettings'externalAuth x__)
                                        (Control.DeepSeq.deepseq
                                           (_LoginSettings'dailyLogonLimit x__)
                                           (Control.DeepSeq.deepseq
                                              (_LoginSettings'dailyLogonCount x__)
                                              (Control.DeepSeq.deepseq
                                                 (_LoginSettings'authenticationSystem x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_LoginSettings'allowExceedAccountLimit x__)
                                                    (Control.DeepSeq.deepseq
                                                       (_LoginSettings'onSessionDisconnectAction
                                                          x__)
                                                       (Control.DeepSeq.deepseq
                                                          (_LoginSettings'reconnectTimeoutAfterDisconnect
                                                             x__)
                                                          (Control.DeepSeq.deepseq
                                                             (_LoginSettings'timeZone x__)
                                                             ()))))))))))))))))
data LoginSettings'DisconnectAction
  = LoginSettings'NOTHING |
    LoginSettings'CANCEL |
    LoginSettings'SUSPEND
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum LoginSettings'DisconnectAction where
  maybeToEnum 1 = Prelude.Just LoginSettings'NOTHING
  maybeToEnum 2 = Prelude.Just LoginSettings'CANCEL
  maybeToEnum 3 = Prelude.Just LoginSettings'SUSPEND
  maybeToEnum _ = Prelude.Nothing
  showEnum LoginSettings'NOTHING = "NOTHING"
  showEnum LoginSettings'CANCEL = "CANCEL"
  showEnum LoginSettings'SUSPEND = "SUSPEND"
  readEnum k
    | (Prelude.==) k "NOTHING" = Prelude.Just LoginSettings'NOTHING
    | (Prelude.==) k "CANCEL" = Prelude.Just LoginSettings'CANCEL
    | (Prelude.==) k "SUSPEND" = Prelude.Just LoginSettings'SUSPEND
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded LoginSettings'DisconnectAction where
  minBound = LoginSettings'NOTHING
  maxBound = LoginSettings'SUSPEND
instance Prelude.Enum LoginSettings'DisconnectAction where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum DisconnectAction: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum LoginSettings'NOTHING = 1
  fromEnum LoginSettings'CANCEL = 2
  fromEnum LoginSettings'SUSPEND = 3
  succ LoginSettings'SUSPEND
    = Prelude.error
        "LoginSettings'DisconnectAction.succ: bad argument LoginSettings'SUSPEND. This value would be out of bounds."
  succ LoginSettings'NOTHING = LoginSettings'CANCEL
  succ LoginSettings'CANCEL = LoginSettings'SUSPEND
  pred LoginSettings'NOTHING
    = Prelude.error
        "LoginSettings'DisconnectAction.pred: bad argument LoginSettings'NOTHING. This value would be out of bounds."
  pred LoginSettings'CANCEL = LoginSettings'NOTHING
  pred LoginSettings'SUSPEND = LoginSettings'CANCEL
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault LoginSettings'DisconnectAction where
  fieldDefault = LoginSettings'NOTHING
instance Control.DeepSeq.NFData LoginSettings'DisconnectAction where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginId' @:: Lens' LoginSettingsRequest Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'loginId' @:: Lens' LoginSettingsRequest (Prelude.Maybe Data.Text.Text)@ -}
data LoginSettingsRequest
  = LoginSettingsRequest'_constructor {_LoginSettingsRequest'loginId :: !(Prelude.Maybe Data.Text.Text),
                                       _LoginSettingsRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LoginSettingsRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LoginSettingsRequest "loginId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettingsRequest'loginId
           (\ x__ y__ -> x__ {_LoginSettingsRequest'loginId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LoginSettingsRequest "maybe'loginId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettingsRequest'loginId
           (\ x__ y__ -> x__ {_LoginSettingsRequest'loginId = y__}))
        Prelude.id
instance Data.ProtoLens.Message LoginSettingsRequest where
  messageName _ = Data.Text.pack "common_1.LoginSettingsRequest"
  packedMessageDescriptor _
    = "\n\
      \\DC4LoginSettingsRequest\DC2\EM\n\
      \\blogin_id\CAN\SOH \SOH(\tR\aloginId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'loginId")) ::
              Data.ProtoLens.FieldDescriptor LoginSettingsRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LoginSettingsRequest'_unknownFields
        (\ x__ y__ -> x__ {_LoginSettingsRequest'_unknownFields = y__})
  defMessage
    = LoginSettingsRequest'_constructor
        {_LoginSettingsRequest'loginId = Prelude.Nothing,
         _LoginSettingsRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LoginSettingsRequest
          -> Data.ProtoLens.Encoding.Bytes.Parser LoginSettingsRequest
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "login_id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"loginId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "LoginSettingsRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'loginId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData LoginSettingsRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LoginSettingsRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq (_LoginSettingsRequest'loginId x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginSettings' @:: Lens' LoginSettingsResult LoginSettings@
         * 'Proto.CMS.Common1_Fields.maybe'loginSettings' @:: Lens' LoginSettingsResult (Prelude.Maybe LoginSettings)@ -}
data LoginSettingsResult
  = LoginSettingsResult'_constructor {_LoginSettingsResult'loginSettings :: !(Prelude.Maybe LoginSettings),
                                      _LoginSettingsResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LoginSettingsResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LoginSettingsResult "loginSettings" LoginSettings where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettingsResult'loginSettings
           (\ x__ y__ -> x__ {_LoginSettingsResult'loginSettings = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField LoginSettingsResult "maybe'loginSettings" (Prelude.Maybe LoginSettings) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LoginSettingsResult'loginSettings
           (\ x__ y__ -> x__ {_LoginSettingsResult'loginSettings = y__}))
        Prelude.id
instance Data.ProtoLens.Message LoginSettingsResult where
  messageName _ = Data.Text.pack "common_1.LoginSettingsResult"
  packedMessageDescriptor _
    = "\n\
      \\DC3LoginSettingsResult\DC2>\n\
      \\SOlogin_settings\CAN\SOH \SOH(\v2\ETB.common_1.LoginSettingsR\rloginSettings"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginSettings__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_settings"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor LoginSettings)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'loginSettings")) ::
              Data.ProtoLens.FieldDescriptor LoginSettingsResult
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginSettings__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LoginSettingsResult'_unknownFields
        (\ x__ y__ -> x__ {_LoginSettingsResult'_unknownFields = y__})
  defMessage
    = LoginSettingsResult'_constructor
        {_LoginSettingsResult'loginSettings = Prelude.Nothing,
         _LoginSettingsResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LoginSettingsResult
          -> Data.ProtoLens.Encoding.Bytes.Parser LoginSettingsResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "login_settings"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"loginSettings") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "LoginSettingsResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'loginSettings") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData LoginSettingsResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LoginSettingsResult'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LoginSettingsResult'loginSettings x__) ())
{- | Fields :
      -}
data Logoff
  = Logoff'_constructor {_Logoff'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Logoff where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message Logoff where
  messageName _ = Data.Text.pack "common_1.Logoff"
  packedMessageDescriptor _
    = "\n\
      \\ACKLogoff"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Logoff'_unknownFields
        (\ x__ y__ -> x__ {_Logoff'_unknownFields = y__})
  defMessage = Logoff'_constructor {_Logoff'_unknownFields = []}
  parseMessage
    = let
        loop :: Logoff -> Data.ProtoLens.Encoding.Bytes.Parser Logoff
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Logoff"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData Logoff where
  rnf
    = \ x__ -> Control.DeepSeq.deepseq (_Logoff'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.protocolVersionMinor' @:: Lens' Logon Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'protocolVersionMinor' @:: Lens' Logon (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.protocolVersionMajor' @:: Lens' Logon Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'protocolVersionMajor' @:: Lens' Logon (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.userName' @:: Lens' Logon Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'userName' @:: Lens' Logon (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.password' @:: Lens' Logon Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'password' @:: Lens' Logon (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.clientAppId' @:: Lens' Logon Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'clientAppId' @:: Lens' Logon (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.clientVersion' @:: Lens' Logon Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'clientVersion' @:: Lens' Logon (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.sessionSettings' @:: Lens' Logon [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'sessionSettings' @:: Lens' Logon (Data.Vector.Unboxed.Vector Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.dropConcurrentSession' @:: Lens' Logon Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'dropConcurrentSession' @:: Lens' Logon (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.privateLabel' @:: Lens' Logon Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'privateLabel' @:: Lens' Logon (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.accessToken' @:: Lens' Logon Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'accessToken' @:: Lens' Logon (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.subscribeOnRequestStatusChange' @:: Lens' Logon Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'subscribeOnRequestStatusChange' @:: Lens' Logon (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.maxDeferredPeriod' @:: Lens' Logon Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'maxDeferredPeriod' @:: Lens' Logon (Prelude.Maybe Data.Word.Word32)@ -}
data Logon
  = Logon'_constructor {_Logon'protocolVersionMinor :: !(Prelude.Maybe Data.Word.Word32),
                        _Logon'protocolVersionMajor :: !(Prelude.Maybe Data.Word.Word32),
                        _Logon'userName :: !(Prelude.Maybe Data.Text.Text),
                        _Logon'password :: !(Prelude.Maybe Data.Text.Text),
                        _Logon'clientAppId :: !(Prelude.Maybe Data.Text.Text),
                        _Logon'clientVersion :: !(Prelude.Maybe Data.Text.Text),
                        _Logon'sessionSettings :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                        _Logon'dropConcurrentSession :: !(Prelude.Maybe Prelude.Bool),
                        _Logon'privateLabel :: !(Prelude.Maybe Data.Text.Text),
                        _Logon'accessToken :: !(Prelude.Maybe Data.Text.Text),
                        _Logon'subscribeOnRequestStatusChange :: !(Prelude.Maybe Prelude.Bool),
                        _Logon'maxDeferredPeriod :: !(Prelude.Maybe Data.Word.Word32),
                        _Logon'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Logon where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Logon "protocolVersionMinor" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'protocolVersionMinor
           (\ x__ y__ -> x__ {_Logon'protocolVersionMinor = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Logon "maybe'protocolVersionMinor" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'protocolVersionMinor
           (\ x__ y__ -> x__ {_Logon'protocolVersionMinor = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Logon "protocolVersionMajor" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'protocolVersionMajor
           (\ x__ y__ -> x__ {_Logon'protocolVersionMajor = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Logon "maybe'protocolVersionMajor" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'protocolVersionMajor
           (\ x__ y__ -> x__ {_Logon'protocolVersionMajor = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Logon "userName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'userName (\ x__ y__ -> x__ {_Logon'userName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Logon "maybe'userName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'userName (\ x__ y__ -> x__ {_Logon'userName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Logon "password" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'password (\ x__ y__ -> x__ {_Logon'password = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Logon "maybe'password" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'password (\ x__ y__ -> x__ {_Logon'password = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Logon "clientAppId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'clientAppId (\ x__ y__ -> x__ {_Logon'clientAppId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Logon "maybe'clientAppId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'clientAppId (\ x__ y__ -> x__ {_Logon'clientAppId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Logon "clientVersion" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'clientVersion
           (\ x__ y__ -> x__ {_Logon'clientVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Logon "maybe'clientVersion" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'clientVersion
           (\ x__ y__ -> x__ {_Logon'clientVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Logon "sessionSettings" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'sessionSettings
           (\ x__ y__ -> x__ {_Logon'sessionSettings = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField Logon "vec'sessionSettings" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'sessionSettings
           (\ x__ y__ -> x__ {_Logon'sessionSettings = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Logon "dropConcurrentSession" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'dropConcurrentSession
           (\ x__ y__ -> x__ {_Logon'dropConcurrentSession = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Logon "maybe'dropConcurrentSession" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'dropConcurrentSession
           (\ x__ y__ -> x__ {_Logon'dropConcurrentSession = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Logon "privateLabel" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'privateLabel (\ x__ y__ -> x__ {_Logon'privateLabel = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Logon "maybe'privateLabel" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'privateLabel (\ x__ y__ -> x__ {_Logon'privateLabel = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Logon "accessToken" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'accessToken (\ x__ y__ -> x__ {_Logon'accessToken = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Logon "maybe'accessToken" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'accessToken (\ x__ y__ -> x__ {_Logon'accessToken = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Logon "subscribeOnRequestStatusChange" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'subscribeOnRequestStatusChange
           (\ x__ y__ -> x__ {_Logon'subscribeOnRequestStatusChange = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField Logon "maybe'subscribeOnRequestStatusChange" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'subscribeOnRequestStatusChange
           (\ x__ y__ -> x__ {_Logon'subscribeOnRequestStatusChange = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Logon "maxDeferredPeriod" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'maxDeferredPeriod
           (\ x__ y__ -> x__ {_Logon'maxDeferredPeriod = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Logon "maybe'maxDeferredPeriod" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Logon'maxDeferredPeriod
           (\ x__ y__ -> x__ {_Logon'maxDeferredPeriod = y__}))
        Prelude.id
instance Data.ProtoLens.Message Logon where
  messageName _ = Data.Text.pack "common_1.Logon"
  packedMessageDescriptor _
    = "\n\
      \\ENQLogon\DC24\n\
      \\SYNprotocol_version_minor\CAN\SOH \SOH(\rR\DC4protocolVersionMinor\DC24\n\
      \\SYNprotocol_version_major\CAN\STX \SOH(\rR\DC4protocolVersionMajor\DC2\ESC\n\
      \\tuser_name\CAN\ETX \SOH(\tR\buserName\DC2\SUB\n\
      \\bpassword\CAN\EOT \SOH(\tR\bpassword\DC2\"\n\
      \\rclient_app_id\CAN\ENQ \SOH(\tR\vclientAppId\DC2%\n\
      \\SOclient_version\CAN\ACK \SOH(\tR\rclientVersion\DC2)\n\
      \\DLEsession_settings\CAN\a \ETX(\rR\SIsessionSettings\DC26\n\
      \\ETBdrop_concurrent_session\CAN\b \SOH(\bR\NAKdropConcurrentSession\DC2#\n\
      \\rprivate_label\CAN\t \SOH(\tR\fprivateLabel\DC2!\n\
      \\faccess_token\CAN\n\
      \ \SOH(\tR\vaccessToken\DC2Q\n\
      \\"subscribe_on_request_status_change\CAN\v \SOH(\b:\ENQfalseR\RSsubscribeOnRequestStatusChange\DC2.\n\
      \\DC3max_deferred_period\CAN\f \SOH(\rR\DC1maxDeferredPeriod\"C\n\
      \\SOSessionSetting\DC2\EM\n\
      \\NAKALLOW_SESSION_RESTORE\DLE\SOH\DC2\SYN\n\
      \\DC2ALLOW_SESSION_JOIN\DLE\STX"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        protocolVersionMinor__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "protocol_version_minor"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'protocolVersionMinor")) ::
              Data.ProtoLens.FieldDescriptor Logon
        protocolVersionMajor__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "protocol_version_major"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'protocolVersionMajor")) ::
              Data.ProtoLens.FieldDescriptor Logon
        userName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "user_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'userName")) ::
              Data.ProtoLens.FieldDescriptor Logon
        password__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "password"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'password")) ::
              Data.ProtoLens.FieldDescriptor Logon
        clientAppId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "client_app_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'clientAppId")) ::
              Data.ProtoLens.FieldDescriptor Logon
        clientVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "client_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'clientVersion")) ::
              Data.ProtoLens.FieldDescriptor Logon
        sessionSettings__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "session_settings"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"sessionSettings")) ::
              Data.ProtoLens.FieldDescriptor Logon
        dropConcurrentSession__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "drop_concurrent_session"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dropConcurrentSession")) ::
              Data.ProtoLens.FieldDescriptor Logon
        privateLabel__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "private_label"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'privateLabel")) ::
              Data.ProtoLens.FieldDescriptor Logon
        accessToken__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "access_token"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'accessToken")) ::
              Data.ProtoLens.FieldDescriptor Logon
        subscribeOnRequestStatusChange__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "subscribe_on_request_status_change"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'subscribeOnRequestStatusChange")) ::
              Data.ProtoLens.FieldDescriptor Logon
        maxDeferredPeriod__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "max_deferred_period"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'maxDeferredPeriod")) ::
              Data.ProtoLens.FieldDescriptor Logon
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, protocolVersionMinor__field_descriptor),
           (Data.ProtoLens.Tag 2, protocolVersionMajor__field_descriptor),
           (Data.ProtoLens.Tag 3, userName__field_descriptor),
           (Data.ProtoLens.Tag 4, password__field_descriptor),
           (Data.ProtoLens.Tag 5, clientAppId__field_descriptor),
           (Data.ProtoLens.Tag 6, clientVersion__field_descriptor),
           (Data.ProtoLens.Tag 7, sessionSettings__field_descriptor),
           (Data.ProtoLens.Tag 8, dropConcurrentSession__field_descriptor),
           (Data.ProtoLens.Tag 9, privateLabel__field_descriptor),
           (Data.ProtoLens.Tag 10, accessToken__field_descriptor),
           (Data.ProtoLens.Tag 11, 
            subscribeOnRequestStatusChange__field_descriptor),
           (Data.ProtoLens.Tag 12, maxDeferredPeriod__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Logon'_unknownFields
        (\ x__ y__ -> x__ {_Logon'_unknownFields = y__})
  defMessage
    = Logon'_constructor
        {_Logon'protocolVersionMinor = Prelude.Nothing,
         _Logon'protocolVersionMajor = Prelude.Nothing,
         _Logon'userName = Prelude.Nothing,
         _Logon'password = Prelude.Nothing,
         _Logon'clientAppId = Prelude.Nothing,
         _Logon'clientVersion = Prelude.Nothing,
         _Logon'sessionSettings = Data.Vector.Generic.empty,
         _Logon'dropConcurrentSession = Prelude.Nothing,
         _Logon'privateLabel = Prelude.Nothing,
         _Logon'accessToken = Prelude.Nothing,
         _Logon'subscribeOnRequestStatusChange = Prelude.Nothing,
         _Logon'maxDeferredPeriod = Prelude.Nothing,
         _Logon'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Logon
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
             -> Data.ProtoLens.Encoding.Bytes.Parser Logon
        loop x mutable'sessionSettings
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'sessionSettings <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                  (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                     mutable'sessionSettings)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'sessionSettings")
                              frozen'sessionSettings x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "protocol_version_minor"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"protocolVersionMinor") y x)
                                  mutable'sessionSettings
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "protocol_version_major"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"protocolVersionMajor") y x)
                                  mutable'sessionSettings
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "user_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"userName") y x)
                                  mutable'sessionSettings
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "password"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"password") y x)
                                  mutable'sessionSettings
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "client_app_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"clientAppId") y x)
                                  mutable'sessionSettings
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "client_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"clientVersion") y x)
                                  mutable'sessionSettings
                        56
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "session_settings"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'sessionSettings y)
                                loop x v
                        58
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "session_settings"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'sessionSettings)
                                loop x y
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "drop_concurrent_session"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"dropConcurrentSession") y x)
                                  mutable'sessionSettings
                        74
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "private_label"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"privateLabel") y x)
                                  mutable'sessionSettings
                        82
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "access_token"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"accessToken") y x)
                                  mutable'sessionSettings
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "subscribe_on_request_status_change"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"subscribeOnRequestStatusChange")
                                     y x)
                                  mutable'sessionSettings
                        96
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "max_deferred_period"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"maxDeferredPeriod") y x)
                                  mutable'sessionSettings
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'sessionSettings
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'sessionSettings <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'sessionSettings)
          "Logon"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'protocolVersionMinor") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'protocolVersionMajor") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'userName") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'password") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8 _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'clientAppId") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8 _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'clientVersion") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.Text.Encoding.encodeUtf8 _v))
                            ((Data.Monoid.<>)
                               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                  (\ _v
                                     -> (Data.Monoid.<>)
                                          (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                          ((Prelude..)
                                             Data.ProtoLens.Encoding.Bytes.putVarInt
                                             Prelude.fromIntegral _v))
                                  (Lens.Family2.view
                                     (Data.ProtoLens.Field.field @"vec'sessionSettings") _x))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'dropConcurrentSession")
                                         _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (\ b -> if b then 1 else 0) _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'privateLabel") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                               ((Prelude..)
                                                  (\ bs
                                                     -> (Data.Monoid.<>)
                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                             (Prelude.fromIntegral
                                                                (Data.ByteString.length bs)))
                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                             bs))
                                                  Data.Text.Encoding.encodeUtf8 _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'accessToken") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                                                  ((Prelude..)
                                                     (\ bs
                                                        -> (Data.Monoid.<>)
                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                (Prelude.fromIntegral
                                                                   (Data.ByteString.length bs)))
                                                             (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                bs))
                                                     Data.Text.Encoding.encodeUtf8 _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field
                                                     @"maybe'subscribeOnRequestStatusChange")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (\ b -> if b then 1 else 0) _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field
                                                        @"maybe'maxDeferredPeriod")
                                                     _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 96)
                                                        ((Prelude..)
                                                           Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           Prelude.fromIntegral _v))
                                              (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                 (Lens.Family2.view
                                                    Data.ProtoLens.unknownFields _x)))))))))))))
instance Control.DeepSeq.NFData Logon where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Logon'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Logon'protocolVersionMinor x__)
                (Control.DeepSeq.deepseq
                   (_Logon'protocolVersionMajor x__)
                   (Control.DeepSeq.deepseq
                      (_Logon'userName x__)
                      (Control.DeepSeq.deepseq
                         (_Logon'password x__)
                         (Control.DeepSeq.deepseq
                            (_Logon'clientAppId x__)
                            (Control.DeepSeq.deepseq
                               (_Logon'clientVersion x__)
                               (Control.DeepSeq.deepseq
                                  (_Logon'sessionSettings x__)
                                  (Control.DeepSeq.deepseq
                                     (_Logon'dropConcurrentSession x__)
                                     (Control.DeepSeq.deepseq
                                        (_Logon'privateLabel x__)
                                        (Control.DeepSeq.deepseq
                                           (_Logon'accessToken x__)
                                           (Control.DeepSeq.deepseq
                                              (_Logon'subscribeOnRequestStatusChange x__)
                                              (Control.DeepSeq.deepseq
                                                 (_Logon'maxDeferredPeriod x__) ()))))))))))))
data Logon'SessionSetting
  = Logon'ALLOW_SESSION_RESTORE | Logon'ALLOW_SESSION_JOIN
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum Logon'SessionSetting where
  maybeToEnum 1 = Prelude.Just Logon'ALLOW_SESSION_RESTORE
  maybeToEnum 2 = Prelude.Just Logon'ALLOW_SESSION_JOIN
  maybeToEnum _ = Prelude.Nothing
  showEnum Logon'ALLOW_SESSION_RESTORE = "ALLOW_SESSION_RESTORE"
  showEnum Logon'ALLOW_SESSION_JOIN = "ALLOW_SESSION_JOIN"
  readEnum k
    | (Prelude.==) k "ALLOW_SESSION_RESTORE"
    = Prelude.Just Logon'ALLOW_SESSION_RESTORE
    | (Prelude.==) k "ALLOW_SESSION_JOIN"
    = Prelude.Just Logon'ALLOW_SESSION_JOIN
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded Logon'SessionSetting where
  minBound = Logon'ALLOW_SESSION_RESTORE
  maxBound = Logon'ALLOW_SESSION_JOIN
instance Prelude.Enum Logon'SessionSetting where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum SessionSetting: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum Logon'ALLOW_SESSION_RESTORE = 1
  fromEnum Logon'ALLOW_SESSION_JOIN = 2
  succ Logon'ALLOW_SESSION_JOIN
    = Prelude.error
        "Logon'SessionSetting.succ: bad argument Logon'ALLOW_SESSION_JOIN. This value would be out of bounds."
  succ Logon'ALLOW_SESSION_RESTORE = Logon'ALLOW_SESSION_JOIN
  pred Logon'ALLOW_SESSION_RESTORE
    = Prelude.error
        "Logon'SessionSetting.pred: bad argument Logon'ALLOW_SESSION_RESTORE. This value would be out of bounds."
  pred Logon'ALLOW_SESSION_JOIN = Logon'ALLOW_SESSION_RESTORE
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault Logon'SessionSetting where
  fieldDefault = Logon'ALLOW_SESSION_RESTORE
instance Control.DeepSeq.NFData Logon'SessionSetting where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.protocolVersionMinor' @:: Lens' LogonResult Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.protocolVersionMajor' @:: Lens' LogonResult Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.operationStatus' @:: Lens' LogonResult Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.errorMessage' @:: Lens' LogonResult Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.maybe'errorMessage' @:: Lens' LogonResult (Prelude.Maybe Proto.Common.Shared1.Text)@
         * 'Proto.CMS.Common1_Fields.sessionToken' @:: Lens' LogonResult Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'sessionToken' @:: Lens' LogonResult (Prelude.Maybe Data.Text.Text)@ -}
data LogonResult
  = LogonResult'_constructor {_LogonResult'protocolVersionMinor :: !Data.Word.Word32,
                              _LogonResult'protocolVersionMajor :: !Data.Word.Word32,
                              _LogonResult'operationStatus :: !Data.Word.Word32,
                              _LogonResult'errorMessage :: !(Prelude.Maybe Proto.Common.Shared1.Text),
                              _LogonResult'sessionToken :: !(Prelude.Maybe Data.Text.Text),
                              _LogonResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LogonResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LogonResult "protocolVersionMinor" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LogonResult'protocolVersionMinor
           (\ x__ y__ -> x__ {_LogonResult'protocolVersionMinor = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LogonResult "protocolVersionMajor" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LogonResult'protocolVersionMajor
           (\ x__ y__ -> x__ {_LogonResult'protocolVersionMajor = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LogonResult "operationStatus" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LogonResult'operationStatus
           (\ x__ y__ -> x__ {_LogonResult'operationStatus = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LogonResult "errorMessage" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LogonResult'errorMessage
           (\ x__ y__ -> x__ {_LogonResult'errorMessage = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField LogonResult "maybe'errorMessage" (Prelude.Maybe Proto.Common.Shared1.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LogonResult'errorMessage
           (\ x__ y__ -> x__ {_LogonResult'errorMessage = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LogonResult "sessionToken" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LogonResult'sessionToken
           (\ x__ y__ -> x__ {_LogonResult'sessionToken = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField LogonResult "maybe'sessionToken" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LogonResult'sessionToken
           (\ x__ y__ -> x__ {_LogonResult'sessionToken = y__}))
        Prelude.id
instance Data.ProtoLens.Message LogonResult where
  messageName _ = Data.Text.pack "common_1.LogonResult"
  packedMessageDescriptor _
    = "\n\
      \\vLogonResult\DC24\n\
      \\SYNprotocol_version_minor\CAN\SOH \STX(\rR\DC4protocolVersionMinor\DC24\n\
      \\SYNprotocol_version_major\CAN\STX \STX(\rR\DC4protocolVersionMajor\DC2)\n\
      \\DLEoperation_status\CAN\ETX \STX(\rR\SIoperationStatus\DC23\n\
      \\rerror_message\CAN\EOT \SOH(\v2\SO.shared_1.TextR\ferrorMessage\DC2#\n\
      \\rsession_token\CAN\ENQ \SOH(\tR\fsessionToken"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        protocolVersionMinor__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "protocol_version_minor"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"protocolVersionMinor")) ::
              Data.ProtoLens.FieldDescriptor LogonResult
        protocolVersionMajor__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "protocol_version_major"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"protocolVersionMajor")) ::
              Data.ProtoLens.FieldDescriptor LogonResult
        operationStatus__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "operation_status"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"operationStatus")) ::
              Data.ProtoLens.FieldDescriptor LogonResult
        errorMessage__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_message"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorMessage")) ::
              Data.ProtoLens.FieldDescriptor LogonResult
        sessionToken__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "session_token"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sessionToken")) ::
              Data.ProtoLens.FieldDescriptor LogonResult
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, protocolVersionMinor__field_descriptor),
           (Data.ProtoLens.Tag 2, protocolVersionMajor__field_descriptor),
           (Data.ProtoLens.Tag 3, operationStatus__field_descriptor),
           (Data.ProtoLens.Tag 4, errorMessage__field_descriptor),
           (Data.ProtoLens.Tag 5, sessionToken__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LogonResult'_unknownFields
        (\ x__ y__ -> x__ {_LogonResult'_unknownFields = y__})
  defMessage
    = LogonResult'_constructor
        {_LogonResult'protocolVersionMinor = Data.ProtoLens.fieldDefault,
         _LogonResult'protocolVersionMajor = Data.ProtoLens.fieldDefault,
         _LogonResult'operationStatus = Data.ProtoLens.fieldDefault,
         _LogonResult'errorMessage = Prelude.Nothing,
         _LogonResult'sessionToken = Prelude.Nothing,
         _LogonResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LogonResult
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser LogonResult
        loop
          x
          required'operationStatus
          required'protocolVersionMajor
          required'protocolVersionMinor
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'operationStatus then
                                  (:) "operation_status"
                              else
                                  Prelude.id)
                               ((if required'protocolVersionMajor then
                                     (:) "protocol_version_major"
                                 else
                                     Prelude.id)
                                  ((if required'protocolVersionMinor then
                                        (:) "protocol_version_minor"
                                    else
                                        Prelude.id)
                                     []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "protocol_version_minor"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"protocolVersionMinor") y x)
                                  required'operationStatus required'protocolVersionMajor
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "protocol_version_major"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"protocolVersionMajor") y x)
                                  required'operationStatus Prelude.False
                                  required'protocolVersionMinor
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "operation_status"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"operationStatus") y x)
                                  Prelude.False required'protocolVersionMajor
                                  required'protocolVersionMinor
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "error_message"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"errorMessage") y x)
                                  required'operationStatus required'protocolVersionMajor
                                  required'protocolVersionMinor
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "session_token"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"sessionToken") y x)
                                  required'operationStatus required'protocolVersionMajor
                                  required'protocolVersionMinor
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'operationStatus required'protocolVersionMajor
                                  required'protocolVersionMinor
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True Prelude.True)
          "LogonResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                ((Prelude..)
                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"protocolVersionMinor") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   ((Prelude..)
                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"protocolVersionMajor") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                      ((Prelude..)
                         Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"operationStatus") _x)))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'errorMessage") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'sessionToken") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8 _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData LogonResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LogonResult'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LogonResult'protocolVersionMinor x__)
                (Control.DeepSeq.deepseq
                   (_LogonResult'protocolVersionMajor x__)
                   (Control.DeepSeq.deepseq
                      (_LogonResult'operationStatus x__)
                      (Control.DeepSeq.deepseq
                         (_LogonResult'errorMessage x__)
                         (Control.DeepSeq.deepseq (_LogonResult'sessionToken x__) ())))))
data LogonResultCode
  = LOGON_SUCCESS |
    LOGON_FAILURE |
    NO_ONETIME_PASSWORD |
    PASSWORD_EXPIRED |
    ROUTINE_ERROR |
    WRONG_PARAMETERS |
    USER_AUTO_LOCKOUT |
    USER_MANUAL_LOCKOUT |
    SECOND_FACTOR_INIT_REQUIRED |
    INCOMPATIBLE_CLIENT |
    UNSIGNED_AGREEMENT |
    TOO_MANY_LOGONS |
    PHONE_VERIFICATION_REQUIRED |
    ACCESS_DENIED
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum LogonResultCode where
  maybeToEnum 0 = Prelude.Just LOGON_SUCCESS
  maybeToEnum 101 = Prelude.Just LOGON_FAILURE
  maybeToEnum 103 = Prelude.Just NO_ONETIME_PASSWORD
  maybeToEnum 104 = Prelude.Just PASSWORD_EXPIRED
  maybeToEnum 105 = Prelude.Just ROUTINE_ERROR
  maybeToEnum 106 = Prelude.Just WRONG_PARAMETERS
  maybeToEnum 107 = Prelude.Just USER_AUTO_LOCKOUT
  maybeToEnum 108 = Prelude.Just USER_MANUAL_LOCKOUT
  maybeToEnum 109 = Prelude.Just SECOND_FACTOR_INIT_REQUIRED
  maybeToEnum 110 = Prelude.Just INCOMPATIBLE_CLIENT
  maybeToEnum 111 = Prelude.Just UNSIGNED_AGREEMENT
  maybeToEnum 112 = Prelude.Just TOO_MANY_LOGONS
  maybeToEnum 113 = Prelude.Just PHONE_VERIFICATION_REQUIRED
  maybeToEnum 114 = Prelude.Just ACCESS_DENIED
  maybeToEnum _ = Prelude.Nothing
  showEnum LOGON_SUCCESS = "LOGON_SUCCESS"
  showEnum LOGON_FAILURE = "LOGON_FAILURE"
  showEnum NO_ONETIME_PASSWORD = "NO_ONETIME_PASSWORD"
  showEnum PASSWORD_EXPIRED = "PASSWORD_EXPIRED"
  showEnum ROUTINE_ERROR = "ROUTINE_ERROR"
  showEnum WRONG_PARAMETERS = "WRONG_PARAMETERS"
  showEnum USER_AUTO_LOCKOUT = "USER_AUTO_LOCKOUT"
  showEnum USER_MANUAL_LOCKOUT = "USER_MANUAL_LOCKOUT"
  showEnum SECOND_FACTOR_INIT_REQUIRED
    = "SECOND_FACTOR_INIT_REQUIRED"
  showEnum INCOMPATIBLE_CLIENT = "INCOMPATIBLE_CLIENT"
  showEnum UNSIGNED_AGREEMENT = "UNSIGNED_AGREEMENT"
  showEnum TOO_MANY_LOGONS = "TOO_MANY_LOGONS"
  showEnum PHONE_VERIFICATION_REQUIRED
    = "PHONE_VERIFICATION_REQUIRED"
  showEnum ACCESS_DENIED = "ACCESS_DENIED"
  readEnum k
    | (Prelude.==) k "LOGON_SUCCESS" = Prelude.Just LOGON_SUCCESS
    | (Prelude.==) k "LOGON_FAILURE" = Prelude.Just LOGON_FAILURE
    | (Prelude.==) k "NO_ONETIME_PASSWORD"
    = Prelude.Just NO_ONETIME_PASSWORD
    | (Prelude.==) k "PASSWORD_EXPIRED" = Prelude.Just PASSWORD_EXPIRED
    | (Prelude.==) k "ROUTINE_ERROR" = Prelude.Just ROUTINE_ERROR
    | (Prelude.==) k "WRONG_PARAMETERS" = Prelude.Just WRONG_PARAMETERS
    | (Prelude.==) k "USER_AUTO_LOCKOUT"
    = Prelude.Just USER_AUTO_LOCKOUT
    | (Prelude.==) k "USER_MANUAL_LOCKOUT"
    = Prelude.Just USER_MANUAL_LOCKOUT
    | (Prelude.==) k "SECOND_FACTOR_INIT_REQUIRED"
    = Prelude.Just SECOND_FACTOR_INIT_REQUIRED
    | (Prelude.==) k "INCOMPATIBLE_CLIENT"
    = Prelude.Just INCOMPATIBLE_CLIENT
    | (Prelude.==) k "UNSIGNED_AGREEMENT"
    = Prelude.Just UNSIGNED_AGREEMENT
    | (Prelude.==) k "TOO_MANY_LOGONS" = Prelude.Just TOO_MANY_LOGONS
    | (Prelude.==) k "PHONE_VERIFICATION_REQUIRED"
    = Prelude.Just PHONE_VERIFICATION_REQUIRED
    | (Prelude.==) k "ACCESS_DENIED" = Prelude.Just ACCESS_DENIED
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded LogonResultCode where
  minBound = LOGON_SUCCESS
  maxBound = ACCESS_DENIED
instance Prelude.Enum LogonResultCode where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum LogonResultCode: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum LOGON_SUCCESS = 0
  fromEnum LOGON_FAILURE = 101
  fromEnum NO_ONETIME_PASSWORD = 103
  fromEnum PASSWORD_EXPIRED = 104
  fromEnum ROUTINE_ERROR = 105
  fromEnum WRONG_PARAMETERS = 106
  fromEnum USER_AUTO_LOCKOUT = 107
  fromEnum USER_MANUAL_LOCKOUT = 108
  fromEnum SECOND_FACTOR_INIT_REQUIRED = 109
  fromEnum INCOMPATIBLE_CLIENT = 110
  fromEnum UNSIGNED_AGREEMENT = 111
  fromEnum TOO_MANY_LOGONS = 112
  fromEnum PHONE_VERIFICATION_REQUIRED = 113
  fromEnum ACCESS_DENIED = 114
  succ ACCESS_DENIED
    = Prelude.error
        "LogonResultCode.succ: bad argument ACCESS_DENIED. This value would be out of bounds."
  succ LOGON_SUCCESS = LOGON_FAILURE
  succ LOGON_FAILURE = NO_ONETIME_PASSWORD
  succ NO_ONETIME_PASSWORD = PASSWORD_EXPIRED
  succ PASSWORD_EXPIRED = ROUTINE_ERROR
  succ ROUTINE_ERROR = WRONG_PARAMETERS
  succ WRONG_PARAMETERS = USER_AUTO_LOCKOUT
  succ USER_AUTO_LOCKOUT = USER_MANUAL_LOCKOUT
  succ USER_MANUAL_LOCKOUT = SECOND_FACTOR_INIT_REQUIRED
  succ SECOND_FACTOR_INIT_REQUIRED = INCOMPATIBLE_CLIENT
  succ INCOMPATIBLE_CLIENT = UNSIGNED_AGREEMENT
  succ UNSIGNED_AGREEMENT = TOO_MANY_LOGONS
  succ TOO_MANY_LOGONS = PHONE_VERIFICATION_REQUIRED
  succ PHONE_VERIFICATION_REQUIRED = ACCESS_DENIED
  pred LOGON_SUCCESS
    = Prelude.error
        "LogonResultCode.pred: bad argument LOGON_SUCCESS. This value would be out of bounds."
  pred LOGON_FAILURE = LOGON_SUCCESS
  pred NO_ONETIME_PASSWORD = LOGON_FAILURE
  pred PASSWORD_EXPIRED = NO_ONETIME_PASSWORD
  pred ROUTINE_ERROR = PASSWORD_EXPIRED
  pred WRONG_PARAMETERS = ROUTINE_ERROR
  pred USER_AUTO_LOCKOUT = WRONG_PARAMETERS
  pred USER_MANUAL_LOCKOUT = USER_AUTO_LOCKOUT
  pred SECOND_FACTOR_INIT_REQUIRED = USER_MANUAL_LOCKOUT
  pred INCOMPATIBLE_CLIENT = SECOND_FACTOR_INIT_REQUIRED
  pred UNSIGNED_AGREEMENT = INCOMPATIBLE_CLIENT
  pred TOO_MANY_LOGONS = UNSIGNED_AGREEMENT
  pred PHONE_VERIFICATION_REQUIRED = TOO_MANY_LOGONS
  pred ACCESS_DENIED = PHONE_VERIFICATION_REQUIRED
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault LogonResultCode where
  fieldDefault = LOGON_SUCCESS
instance Control.DeepSeq.NFData LogonResultCode where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.type'' @:: Lens' LookupProperty Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.value' @:: Lens' LookupProperty Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.name' @:: Lens' LookupProperty Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.description' @:: Lens' LookupProperty Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.maybe'description' @:: Lens' LookupProperty (Prelude.Maybe Proto.Common.Shared1.Text)@ -}
data LookupProperty
  = LookupProperty'_constructor {_LookupProperty'type' :: !Data.Word.Word32,
                                 _LookupProperty'value :: !Data.Text.Text,
                                 _LookupProperty'name :: !Proto.Common.Shared1.Text,
                                 _LookupProperty'description :: !(Prelude.Maybe Proto.Common.Shared1.Text),
                                 _LookupProperty'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LookupProperty where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LookupProperty "type'" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LookupProperty'type'
           (\ x__ y__ -> x__ {_LookupProperty'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LookupProperty "value" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LookupProperty'value
           (\ x__ y__ -> x__ {_LookupProperty'value = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LookupProperty "name" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LookupProperty'name
           (\ x__ y__ -> x__ {_LookupProperty'name = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField LookupProperty "description" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LookupProperty'description
           (\ x__ y__ -> x__ {_LookupProperty'description = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField LookupProperty "maybe'description" (Prelude.Maybe Proto.Common.Shared1.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LookupProperty'description
           (\ x__ y__ -> x__ {_LookupProperty'description = y__}))
        Prelude.id
instance Data.ProtoLens.Message LookupProperty where
  messageName _ = Data.Text.pack "common_1.LookupProperty"
  packedMessageDescriptor _
    = "\n\
      \\SOLookupProperty\DC2\DC2\n\
      \\EOTtype\CAN\SOH \STX(\rR\EOTtype\DC2\DC4\n\
      \\ENQvalue\CAN\STX \STX(\tR\ENQvalue\DC2\"\n\
      \\EOTname\CAN\ETX \STX(\v2\SO.shared_1.TextR\EOTname\DC20\n\
      \\vdescription\CAN\EOT \SOH(\v2\SO.shared_1.TextR\vdescription"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"type'")) ::
              Data.ProtoLens.FieldDescriptor LookupProperty
        value__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"value")) ::
              Data.ProtoLens.FieldDescriptor LookupProperty
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"name")) ::
              Data.ProtoLens.FieldDescriptor LookupProperty
        description__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "description"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'description")) ::
              Data.ProtoLens.FieldDescriptor LookupProperty
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, type'__field_descriptor),
           (Data.ProtoLens.Tag 2, value__field_descriptor),
           (Data.ProtoLens.Tag 3, name__field_descriptor),
           (Data.ProtoLens.Tag 4, description__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LookupProperty'_unknownFields
        (\ x__ y__ -> x__ {_LookupProperty'_unknownFields = y__})
  defMessage
    = LookupProperty'_constructor
        {_LookupProperty'type' = Data.ProtoLens.fieldDefault,
         _LookupProperty'value = Data.ProtoLens.fieldDefault,
         _LookupProperty'name = Data.ProtoLens.defMessage,
         _LookupProperty'description = Prelude.Nothing,
         _LookupProperty'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LookupProperty
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Data.ProtoLens.Encoding.Bytes.Parser LookupProperty
        loop x required'name required'type' required'value
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'name then (:) "name" else Prelude.id)
                               ((if required'type' then (:) "type" else Prelude.id)
                                  ((if required'value then (:) "value" else Prelude.id) []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'name Prelude.False required'value
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y x)
                                  required'name required'type' Prelude.False
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                                  Prelude.False required'type' required'value
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "description"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"description") y x)
                                  required'name required'type' required'value
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'name required'type' required'value
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True Prelude.True)
          "LookupProperty"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                ((Prelude..)
                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.Text.Encoding.encodeUtf8
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"value") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                      ((Prelude..)
                         (\ bs
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         Data.ProtoLens.encodeMessage
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"name") _x)))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'description") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData LookupProperty where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LookupProperty'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LookupProperty'type' x__)
                (Control.DeepSeq.deepseq
                   (_LookupProperty'value x__)
                   (Control.DeepSeq.deepseq
                      (_LookupProperty'name x__)
                      (Control.DeepSeq.deepseq (_LookupProperty'description x__) ()))))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.propertyType' @:: Lens' LookupPropertyListRequest [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'propertyType' @:: Lens' LookupPropertyListRequest (Data.Vector.Unboxed.Vector Data.Word.Word32)@ -}
data LookupPropertyListRequest
  = LookupPropertyListRequest'_constructor {_LookupPropertyListRequest'propertyType :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                                            _LookupPropertyListRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LookupPropertyListRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LookupPropertyListRequest "propertyType" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LookupPropertyListRequest'propertyType
           (\ x__ y__ -> x__ {_LookupPropertyListRequest'propertyType = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField LookupPropertyListRequest "vec'propertyType" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LookupPropertyListRequest'propertyType
           (\ x__ y__ -> x__ {_LookupPropertyListRequest'propertyType = y__}))
        Prelude.id
instance Data.ProtoLens.Message LookupPropertyListRequest where
  messageName _ = Data.Text.pack "common_1.LookupPropertyListRequest"
  packedMessageDescriptor _
    = "\n\
      \\EMLookupPropertyListRequest\DC2#\n\
      \\rproperty_type\CAN\SOH \ETX(\rR\fpropertyType"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        propertyType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "property_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"propertyType")) ::
              Data.ProtoLens.FieldDescriptor LookupPropertyListRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, propertyType__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LookupPropertyListRequest'_unknownFields
        (\ x__ y__
           -> x__ {_LookupPropertyListRequest'_unknownFields = y__})
  defMessage
    = LookupPropertyListRequest'_constructor
        {_LookupPropertyListRequest'propertyType = Data.Vector.Generic.empty,
         _LookupPropertyListRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LookupPropertyListRequest
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
             -> Data.ProtoLens.Encoding.Bytes.Parser LookupPropertyListRequest
        loop x mutable'propertyType
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'propertyType <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                               (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                  mutable'propertyType)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'propertyType")
                              frozen'propertyType x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "property_type"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'propertyType y)
                                loop x v
                        10
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "property_type"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'propertyType)
                                loop x y
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'propertyType
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'propertyType <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'propertyType)
          "LookupPropertyListRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                        ((Prelude..)
                           Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'propertyType") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData LookupPropertyListRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LookupPropertyListRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LookupPropertyListRequest'propertyType x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.lookupProperty' @:: Lens' LookupPropertyListResult [LookupProperty]@
         * 'Proto.CMS.Common1_Fields.vec'lookupProperty' @:: Lens' LookupPropertyListResult (Data.Vector.Vector LookupProperty)@ -}
data LookupPropertyListResult
  = LookupPropertyListResult'_constructor {_LookupPropertyListResult'lookupProperty :: !(Data.Vector.Vector LookupProperty),
                                           _LookupPropertyListResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show LookupPropertyListResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField LookupPropertyListResult "lookupProperty" [LookupProperty] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LookupPropertyListResult'lookupProperty
           (\ x__ y__
              -> x__ {_LookupPropertyListResult'lookupProperty = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField LookupPropertyListResult "vec'lookupProperty" (Data.Vector.Vector LookupProperty) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _LookupPropertyListResult'lookupProperty
           (\ x__ y__
              -> x__ {_LookupPropertyListResult'lookupProperty = y__}))
        Prelude.id
instance Data.ProtoLens.Message LookupPropertyListResult where
  messageName _ = Data.Text.pack "common_1.LookupPropertyListResult"
  packedMessageDescriptor _
    = "\n\
      \\CANLookupPropertyListResult\DC2A\n\
      \\SIlookup_property\CAN\SOH \ETX(\v2\CAN.common_1.LookupPropertyR\SOlookupProperty"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        lookupProperty__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lookup_property"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor LookupProperty)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"lookupProperty")) ::
              Data.ProtoLens.FieldDescriptor LookupPropertyListResult
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, lookupProperty__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _LookupPropertyListResult'_unknownFields
        (\ x__ y__ -> x__ {_LookupPropertyListResult'_unknownFields = y__})
  defMessage
    = LookupPropertyListResult'_constructor
        {_LookupPropertyListResult'lookupProperty = Data.Vector.Generic.empty,
         _LookupPropertyListResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          LookupPropertyListResult
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld LookupProperty
             -> Data.ProtoLens.Encoding.Bytes.Parser LookupPropertyListResult
        loop x mutable'lookupProperty
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'lookupProperty <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                    mutable'lookupProperty)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'lookupProperty")
                              frozen'lookupProperty x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "lookup_property"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'lookupProperty y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'lookupProperty
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'lookupProperty <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'lookupProperty)
          "LookupPropertyListResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'lookupProperty") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData LookupPropertyListResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_LookupPropertyListResult'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_LookupPropertyListResult'lookupProperty x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' NamedEntity Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'id' @:: Lens' NamedEntity (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.name' @:: Lens' NamedEntity Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.maybe'name' @:: Lens' NamedEntity (Prelude.Maybe Proto.Common.Shared1.Text)@ -}
data NamedEntity
  = NamedEntity'_constructor {_NamedEntity'id :: !(Prelude.Maybe Data.Text.Text),
                              _NamedEntity'name :: !(Prelude.Maybe Proto.Common.Shared1.Text),
                              _NamedEntity'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show NamedEntity where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField NamedEntity "id" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _NamedEntity'id (\ x__ y__ -> x__ {_NamedEntity'id = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField NamedEntity "maybe'id" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _NamedEntity'id (\ x__ y__ -> x__ {_NamedEntity'id = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField NamedEntity "name" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _NamedEntity'name (\ x__ y__ -> x__ {_NamedEntity'name = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField NamedEntity "maybe'name" (Prelude.Maybe Proto.Common.Shared1.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _NamedEntity'name (\ x__ y__ -> x__ {_NamedEntity'name = y__}))
        Prelude.id
instance Data.ProtoLens.Message NamedEntity where
  messageName _ = Data.Text.pack "common_1.NamedEntity"
  packedMessageDescriptor _
    = "\n\
      \\vNamedEntity\DC2\SO\n\
      \\STXid\CAN\SOH \SOH(\tR\STXid\DC2\"\n\
      \\EOTname\CAN\STX \SOH(\v2\SO.shared_1.TextR\EOTname"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'id")) ::
              Data.ProtoLens.FieldDescriptor NamedEntity
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'name")) ::
              Data.ProtoLens.FieldDescriptor NamedEntity
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, id__field_descriptor),
           (Data.ProtoLens.Tag 2, name__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _NamedEntity'_unknownFields
        (\ x__ y__ -> x__ {_NamedEntity'_unknownFields = y__})
  defMessage
    = NamedEntity'_constructor
        {_NamedEntity'id = Prelude.Nothing,
         _NamedEntity'name = Prelude.Nothing,
         _NamedEntity'_unknownFields = []}
  parseMessage
    = let
        loop ::
          NamedEntity -> Data.ProtoLens.Encoding.Bytes.Parser NamedEntity
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "name"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "NamedEntity"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'id") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'name") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData NamedEntity where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_NamedEntity'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_NamedEntity'id x__)
                (Control.DeepSeq.deepseq (_NamedEntity'name x__) ()))
data OperationStatus
  = SUCCESS | FAILURE | ACCEPTED | QUEUED | IN_PROCESSING | CANCELED
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum OperationStatus where
  maybeToEnum 1 = Prelude.Just SUCCESS
  maybeToEnum 2 = Prelude.Just FAILURE
  maybeToEnum 3 = Prelude.Just ACCEPTED
  maybeToEnum 4 = Prelude.Just QUEUED
  maybeToEnum 5 = Prelude.Just IN_PROCESSING
  maybeToEnum 6 = Prelude.Just CANCELED
  maybeToEnum _ = Prelude.Nothing
  showEnum SUCCESS = "SUCCESS"
  showEnum FAILURE = "FAILURE"
  showEnum ACCEPTED = "ACCEPTED"
  showEnum QUEUED = "QUEUED"
  showEnum IN_PROCESSING = "IN_PROCESSING"
  showEnum CANCELED = "CANCELED"
  readEnum k
    | (Prelude.==) k "SUCCESS" = Prelude.Just SUCCESS
    | (Prelude.==) k "FAILURE" = Prelude.Just FAILURE
    | (Prelude.==) k "ACCEPTED" = Prelude.Just ACCEPTED
    | (Prelude.==) k "QUEUED" = Prelude.Just QUEUED
    | (Prelude.==) k "IN_PROCESSING" = Prelude.Just IN_PROCESSING
    | (Prelude.==) k "CANCELED" = Prelude.Just CANCELED
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded OperationStatus where
  minBound = SUCCESS
  maxBound = CANCELED
instance Prelude.Enum OperationStatus where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum OperationStatus: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum SUCCESS = 1
  fromEnum FAILURE = 2
  fromEnum ACCEPTED = 3
  fromEnum QUEUED = 4
  fromEnum IN_PROCESSING = 5
  fromEnum CANCELED = 6
  succ CANCELED
    = Prelude.error
        "OperationStatus.succ: bad argument CANCELED. This value would be out of bounds."
  succ SUCCESS = FAILURE
  succ FAILURE = ACCEPTED
  succ ACCEPTED = QUEUED
  succ QUEUED = IN_PROCESSING
  succ IN_PROCESSING = CANCELED
  pred SUCCESS
    = Prelude.error
        "OperationStatus.pred: bad argument SUCCESS. This value would be out of bounds."
  pred FAILURE = SUCCESS
  pred ACCEPTED = FAILURE
  pred QUEUED = ACCEPTED
  pred IN_PROCESSING = QUEUED
  pred CANCELED = IN_PROCESSING
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault OperationStatus where
  fieldDefault = SUCCESS
instance Control.DeepSeq.NFData OperationStatus where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' PasswordPolicy Data.Int.Int32@
         * 'Proto.CMS.Common1_Fields.maybe'id' @:: Lens' PasswordPolicy (Prelude.Maybe Data.Int.Int32)@
         * 'Proto.CMS.Common1_Fields.title' @:: Lens' PasswordPolicy Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.maybe'title' @:: Lens' PasswordPolicy (Prelude.Maybe Proto.Common.Shared1.Text)@
         * 'Proto.CMS.Common1_Fields.label' @:: Lens' PasswordPolicy Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.maybe'label' @:: Lens' PasswordPolicy (Prelude.Maybe Proto.Common.Shared1.Text)@
         * 'Proto.CMS.Common1_Fields.value' @:: Lens' PasswordPolicy Data.Int.Int32@
         * 'Proto.CMS.Common1_Fields.maybe'value' @:: Lens' PasswordPolicy (Prelude.Maybe Data.Int.Int32)@ -}
data PasswordPolicy
  = PasswordPolicy'_constructor {_PasswordPolicy'id :: !(Prelude.Maybe Data.Int.Int32),
                                 _PasswordPolicy'title :: !(Prelude.Maybe Proto.Common.Shared1.Text),
                                 _PasswordPolicy'label :: !(Prelude.Maybe Proto.Common.Shared1.Text),
                                 _PasswordPolicy'value :: !(Prelude.Maybe Data.Int.Int32),
                                 _PasswordPolicy'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show PasswordPolicy where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField PasswordPolicy "id" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PasswordPolicy'id (\ x__ y__ -> x__ {_PasswordPolicy'id = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PasswordPolicy "maybe'id" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PasswordPolicy'id (\ x__ y__ -> x__ {_PasswordPolicy'id = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PasswordPolicy "title" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PasswordPolicy'title
           (\ x__ y__ -> x__ {_PasswordPolicy'title = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField PasswordPolicy "maybe'title" (Prelude.Maybe Proto.Common.Shared1.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PasswordPolicy'title
           (\ x__ y__ -> x__ {_PasswordPolicy'title = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PasswordPolicy "label" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PasswordPolicy'label
           (\ x__ y__ -> x__ {_PasswordPolicy'label = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField PasswordPolicy "maybe'label" (Prelude.Maybe Proto.Common.Shared1.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PasswordPolicy'label
           (\ x__ y__ -> x__ {_PasswordPolicy'label = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField PasswordPolicy "value" Data.Int.Int32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PasswordPolicy'value
           (\ x__ y__ -> x__ {_PasswordPolicy'value = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField PasswordPolicy "maybe'value" (Prelude.Maybe Data.Int.Int32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _PasswordPolicy'value
           (\ x__ y__ -> x__ {_PasswordPolicy'value = y__}))
        Prelude.id
instance Data.ProtoLens.Message PasswordPolicy where
  messageName _ = Data.Text.pack "common_1.PasswordPolicy"
  packedMessageDescriptor _
    = "\n\
      \\SOPasswordPolicy\DC2\SO\n\
      \\STXid\CAN\SOH \SOH(\ENQR\STXid\DC2$\n\
      \\ENQtitle\CAN\STX \SOH(\v2\SO.shared_1.TextR\ENQtitle\DC2$\n\
      \\ENQlabel\CAN\ETX \SOH(\v2\SO.shared_1.TextR\ENQlabel\DC2\DC4\n\
      \\ENQvalue\CAN\EOT \SOH(\ENQR\ENQvalue"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'id")) ::
              Data.ProtoLens.FieldDescriptor PasswordPolicy
        title__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "title"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'title")) ::
              Data.ProtoLens.FieldDescriptor PasswordPolicy
        label__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "label"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'label")) ::
              Data.ProtoLens.FieldDescriptor PasswordPolicy
        value__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'value")) ::
              Data.ProtoLens.FieldDescriptor PasswordPolicy
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, id__field_descriptor),
           (Data.ProtoLens.Tag 2, title__field_descriptor),
           (Data.ProtoLens.Tag 3, label__field_descriptor),
           (Data.ProtoLens.Tag 4, value__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _PasswordPolicy'_unknownFields
        (\ x__ y__ -> x__ {_PasswordPolicy'_unknownFields = y__})
  defMessage
    = PasswordPolicy'_constructor
        {_PasswordPolicy'id = Prelude.Nothing,
         _PasswordPolicy'title = Prelude.Nothing,
         _PasswordPolicy'label = Prelude.Nothing,
         _PasswordPolicy'value = Prelude.Nothing,
         _PasswordPolicy'_unknownFields = []}
  parseMessage
    = let
        loop ::
          PasswordPolicy
          -> Data.ProtoLens.Encoding.Bytes.Parser PasswordPolicy
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "title"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"title") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "label"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"label") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "value"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "PasswordPolicy"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'id") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'title") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'label") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'value") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData PasswordPolicy where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_PasswordPolicy'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_PasswordPolicy'id x__)
                (Control.DeepSeq.deepseq
                   (_PasswordPolicy'title x__)
                   (Control.DeepSeq.deepseq
                      (_PasswordPolicy'label x__)
                      (Control.DeepSeq.deepseq (_PasswordPolicy'value x__) ()))))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.number' @:: Lens' Phone Data.Text.Text@ -}
data Phone
  = Phone'_constructor {_Phone'number :: !Data.Text.Text,
                        _Phone'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Phone where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Phone "number" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Phone'number (\ x__ y__ -> x__ {_Phone'number = y__}))
        Prelude.id
instance Data.ProtoLens.Message Phone where
  messageName _ = Data.Text.pack "common_1.Phone"
  packedMessageDescriptor _
    = "\n\
      \\ENQPhone\DC2\SYN\n\
      \\ACKnumber\CAN\SOH \STX(\tR\ACKnumber"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        number__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "number"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"number")) ::
              Data.ProtoLens.FieldDescriptor Phone
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, number__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Phone'_unknownFields
        (\ x__ y__ -> x__ {_Phone'_unknownFields = y__})
  defMessage
    = Phone'_constructor
        {_Phone'number = Data.ProtoLens.fieldDefault,
         _Phone'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Phone -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser Phone
        loop x required'number
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'number then (:) "number" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "number"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"number") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'number
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "Phone"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"number") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData Phone where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Phone'_unknownFields x__)
             (Control.DeepSeq.deepseq (_Phone'number x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.currency' @:: Lens' Price Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.value' @:: Lens' Price Prelude.Double@ -}
data Price
  = Price'_constructor {_Price'currency :: !Data.Text.Text,
                        _Price'value :: !Prelude.Double,
                        _Price'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Price where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Price "currency" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Price'currency (\ x__ y__ -> x__ {_Price'currency = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Price "value" Prelude.Double where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Price'value (\ x__ y__ -> x__ {_Price'value = y__}))
        Prelude.id
instance Data.ProtoLens.Message Price where
  messageName _ = Data.Text.pack "common_1.Price"
  packedMessageDescriptor _
    = "\n\
      \\ENQPrice\DC2\SUB\n\
      \\bcurrency\CAN\SOH \STX(\tR\bcurrency\DC2\DC4\n\
      \\ENQvalue\CAN\STX \STX(\SOHR\ENQvalue"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        currency__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "currency"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"currency")) ::
              Data.ProtoLens.FieldDescriptor Price
        value__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.DoubleField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Double)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"value")) ::
              Data.ProtoLens.FieldDescriptor Price
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, currency__field_descriptor),
           (Data.ProtoLens.Tag 2, value__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Price'_unknownFields
        (\ x__ y__ -> x__ {_Price'_unknownFields = y__})
  defMessage
    = Price'_constructor
        {_Price'currency = Data.ProtoLens.fieldDefault,
         _Price'value = Data.ProtoLens.fieldDefault,
         _Price'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Price
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser Price
        loop x required'currency required'value
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'currency then (:) "currency" else Prelude.id)
                               ((if required'value then (:) "value" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "currency"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"currency") y x)
                                  Prelude.False required'value
                        17
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToDouble
                                          Data.ProtoLens.Encoding.Bytes.getFixed64)
                                       "value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y x)
                                  required'currency Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'currency required'value
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "Price"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"currency") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 17)
                   ((Prelude..)
                      Data.ProtoLens.Encoding.Bytes.putFixed64
                      Data.ProtoLens.Encoding.Bytes.doubleToWord
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"value") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData Price where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Price'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Price'currency x__)
                (Control.DeepSeq.deepseq (_Price'value x__) ()))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.clearedFields' @:: Lens' Profile [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'clearedFields' @:: Lens' Profile (Data.Vector.Unboxed.Vector Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.customerId' @:: Lens' Profile Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'customerId' @:: Lens' Profile (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.legalType' @:: Lens' Profile Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'legalType' @:: Lens' Profile (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.name' @:: Lens' Profile Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'name' @:: Lens' Profile (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.contactInformation' @:: Lens' Profile ContactInformation@
         * 'Proto.CMS.Common1_Fields.maybe'contactInformation' @:: Lens' Profile (Prelude.Maybe ContactInformation)@
         * 'Proto.CMS.Common1_Fields.profileBrokerageIds' @:: Lens' Profile [Data.Text.Text]@
         * 'Proto.CMS.Common1_Fields.vec'profileBrokerageIds' @:: Lens' Profile (Data.Vector.Vector Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.removed' @:: Lens' Profile Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'removed' @:: Lens' Profile (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.obsoleteAuthenticationSystem' @:: Lens' Profile Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteAuthenticationSystem' @:: Lens' Profile (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.profileType' @:: Lens' Profile Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'profileType' @:: Lens' Profile (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.profileId' @:: Lens' Profile Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'profileId' @:: Lens' Profile (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.salesSeriesId' @:: Lens' Profile Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'salesSeriesId' @:: Lens' Profile (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.number' @:: Lens' Profile Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'number' @:: Lens' Profile (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.simplified' @:: Lens' Profile Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'simplified' @:: Lens' Profile (Prelude.Maybe Prelude.Bool)@ -}
data Profile
  = Profile'_constructor {_Profile'clearedFields :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                          _Profile'customerId :: !(Prelude.Maybe Data.Text.Text),
                          _Profile'legalType :: !(Prelude.Maybe Data.Word.Word32),
                          _Profile'name :: !(Prelude.Maybe Data.Text.Text),
                          _Profile'contactInformation :: !(Prelude.Maybe ContactInformation),
                          _Profile'profileBrokerageIds :: !(Data.Vector.Vector Data.Text.Text),
                          _Profile'removed :: !(Prelude.Maybe Prelude.Bool),
                          _Profile'obsoleteAuthenticationSystem :: !(Prelude.Maybe Data.Text.Text),
                          _Profile'profileType :: !(Prelude.Maybe Data.Word.Word32),
                          _Profile'profileId :: !(Prelude.Maybe Data.Text.Text),
                          _Profile'salesSeriesId :: !(Prelude.Maybe Data.Text.Text),
                          _Profile'number :: !(Prelude.Maybe Data.Text.Text),
                          _Profile'simplified :: !(Prelude.Maybe Prelude.Bool),
                          _Profile'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Profile where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Profile "clearedFields" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'clearedFields
           (\ x__ y__ -> x__ {_Profile'clearedFields = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField Profile "vec'clearedFields" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'clearedFields
           (\ x__ y__ -> x__ {_Profile'clearedFields = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Profile "customerId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'customerId (\ x__ y__ -> x__ {_Profile'customerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Profile "maybe'customerId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'customerId (\ x__ y__ -> x__ {_Profile'customerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Profile "legalType" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'legalType (\ x__ y__ -> x__ {_Profile'legalType = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Profile "maybe'legalType" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'legalType (\ x__ y__ -> x__ {_Profile'legalType = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Profile "name" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'name (\ x__ y__ -> x__ {_Profile'name = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Profile "maybe'name" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'name (\ x__ y__ -> x__ {_Profile'name = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Profile "contactInformation" ContactInformation where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'contactInformation
           (\ x__ y__ -> x__ {_Profile'contactInformation = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField Profile "maybe'contactInformation" (Prelude.Maybe ContactInformation) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'contactInformation
           (\ x__ y__ -> x__ {_Profile'contactInformation = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Profile "profileBrokerageIds" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'profileBrokerageIds
           (\ x__ y__ -> x__ {_Profile'profileBrokerageIds = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField Profile "vec'profileBrokerageIds" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'profileBrokerageIds
           (\ x__ y__ -> x__ {_Profile'profileBrokerageIds = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Profile "removed" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'removed (\ x__ y__ -> x__ {_Profile'removed = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Profile "maybe'removed" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'removed (\ x__ y__ -> x__ {_Profile'removed = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Profile "obsoleteAuthenticationSystem" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'obsoleteAuthenticationSystem
           (\ x__ y__ -> x__ {_Profile'obsoleteAuthenticationSystem = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Profile "maybe'obsoleteAuthenticationSystem" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'obsoleteAuthenticationSystem
           (\ x__ y__ -> x__ {_Profile'obsoleteAuthenticationSystem = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Profile "profileType" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'profileType
           (\ x__ y__ -> x__ {_Profile'profileType = y__}))
        (Data.ProtoLens.maybeLens 1)
instance Data.ProtoLens.Field.HasField Profile "maybe'profileType" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'profileType
           (\ x__ y__ -> x__ {_Profile'profileType = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Profile "profileId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'profileId (\ x__ y__ -> x__ {_Profile'profileId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Profile "maybe'profileId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'profileId (\ x__ y__ -> x__ {_Profile'profileId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Profile "salesSeriesId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'salesSeriesId
           (\ x__ y__ -> x__ {_Profile'salesSeriesId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Profile "maybe'salesSeriesId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'salesSeriesId
           (\ x__ y__ -> x__ {_Profile'salesSeriesId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Profile "number" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'number (\ x__ y__ -> x__ {_Profile'number = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Profile "maybe'number" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'number (\ x__ y__ -> x__ {_Profile'number = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Profile "simplified" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'simplified (\ x__ y__ -> x__ {_Profile'simplified = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Profile "maybe'simplified" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Profile'simplified (\ x__ y__ -> x__ {_Profile'simplified = y__}))
        Prelude.id
instance Data.ProtoLens.Message Profile where
  messageName _ = Data.Text.pack "common_1.Profile"
  packedMessageDescriptor _
    = "\n\
      \\aProfile\DC2%\n\
      \\SOcleared_fields\CAN\t \ETX(\rR\rclearedFields\DC2\US\n\
      \\vcustomer_id\CAN\SOH \SOH(\tR\n\
      \customerId\DC2\GS\n\
      \\n\
      \legal_type\CAN\STX \SOH(\rR\tlegalType\DC2\DC2\n\
      \\EOTname\CAN\ETX \SOH(\tR\EOTname\DC2M\n\
      \\DC3contact_information\CAN\EOT \SOH(\v2\FS.common_1.ContactInformationR\DC2contactInformation\DC22\n\
      \\NAKprofile_brokerage_ids\CAN\ENQ \ETX(\tR\DC3profileBrokerageIds\DC2\CAN\n\
      \\aremoved\CAN\ACK \SOH(\bR\aremoved\DC2H\n\
      \\RSobsolete_authentication_system\CAN\a \SOH(\tR\FSobsoleteAuthenticationSystemB\STX\CAN\SOH\DC2$\n\
      \\fprofile_type\CAN\b \SOH(\r:\SOH1R\vprofileType\DC2\GS\n\
      \\n\
      \profile_id\CAN\v \SOH(\tR\tprofileId\DC2&\n\
      \\SIsales_series_id\CAN\f \SOH(\tR\rsalesSeriesId\DC2\SYN\n\
      \\ACKnumber\CAN\r \SOH(\tR\ACKnumber\DC2\RS\n\
      \\n\
      \simplified\CAN\SO \SOH(\bR\n\
      \simplified"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        clearedFields__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cleared_fields"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"clearedFields")) ::
              Data.ProtoLens.FieldDescriptor Profile
        customerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "customer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'customerId")) ::
              Data.ProtoLens.FieldDescriptor Profile
        legalType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "legal_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'legalType")) ::
              Data.ProtoLens.FieldDescriptor Profile
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'name")) ::
              Data.ProtoLens.FieldDescriptor Profile
        contactInformation__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "contact_information"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ContactInformation)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'contactInformation")) ::
              Data.ProtoLens.FieldDescriptor Profile
        profileBrokerageIds__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "profile_brokerage_ids"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"profileBrokerageIds")) ::
              Data.ProtoLens.FieldDescriptor Profile
        removed__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "removed"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'removed")) ::
              Data.ProtoLens.FieldDescriptor Profile
        obsoleteAuthenticationSystem__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_authentication_system"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'obsoleteAuthenticationSystem")) ::
              Data.ProtoLens.FieldDescriptor Profile
        profileType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "profile_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'profileType")) ::
              Data.ProtoLens.FieldDescriptor Profile
        profileId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "profile_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'profileId")) ::
              Data.ProtoLens.FieldDescriptor Profile
        salesSeriesId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sales_series_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'salesSeriesId")) ::
              Data.ProtoLens.FieldDescriptor Profile
        number__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "number"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'number")) ::
              Data.ProtoLens.FieldDescriptor Profile
        simplified__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "simplified"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'simplified")) ::
              Data.ProtoLens.FieldDescriptor Profile
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 9, clearedFields__field_descriptor),
           (Data.ProtoLens.Tag 1, customerId__field_descriptor),
           (Data.ProtoLens.Tag 2, legalType__field_descriptor),
           (Data.ProtoLens.Tag 3, name__field_descriptor),
           (Data.ProtoLens.Tag 4, contactInformation__field_descriptor),
           (Data.ProtoLens.Tag 5, profileBrokerageIds__field_descriptor),
           (Data.ProtoLens.Tag 6, removed__field_descriptor),
           (Data.ProtoLens.Tag 7, 
            obsoleteAuthenticationSystem__field_descriptor),
           (Data.ProtoLens.Tag 8, profileType__field_descriptor),
           (Data.ProtoLens.Tag 11, profileId__field_descriptor),
           (Data.ProtoLens.Tag 12, salesSeriesId__field_descriptor),
           (Data.ProtoLens.Tag 13, number__field_descriptor),
           (Data.ProtoLens.Tag 14, simplified__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Profile'_unknownFields
        (\ x__ y__ -> x__ {_Profile'_unknownFields = y__})
  defMessage
    = Profile'_constructor
        {_Profile'clearedFields = Data.Vector.Generic.empty,
         _Profile'customerId = Prelude.Nothing,
         _Profile'legalType = Prelude.Nothing,
         _Profile'name = Prelude.Nothing,
         _Profile'contactInformation = Prelude.Nothing,
         _Profile'profileBrokerageIds = Data.Vector.Generic.empty,
         _Profile'removed = Prelude.Nothing,
         _Profile'obsoleteAuthenticationSystem = Prelude.Nothing,
         _Profile'profileType = Prelude.Nothing,
         _Profile'profileId = Prelude.Nothing,
         _Profile'salesSeriesId = Prelude.Nothing,
         _Profile'number = Prelude.Nothing,
         _Profile'simplified = Prelude.Nothing,
         _Profile'_unknownFields = []}
  parseMessage
    = let
        loop ::
          Profile
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
                -> Data.ProtoLens.Encoding.Bytes.Parser Profile
        loop x mutable'clearedFields mutable'profileBrokerageIds
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'clearedFields <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                   mutable'clearedFields)
                      frozen'profileBrokerageIds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                      (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                         mutable'profileBrokerageIds)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'clearedFields")
                              frozen'clearedFields
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'profileBrokerageIds")
                                 frozen'profileBrokerageIds x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        72
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "cleared_fields"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'clearedFields y)
                                loop x v mutable'profileBrokerageIds
                        74
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "cleared_fields"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'clearedFields)
                                loop x y mutable'profileBrokerageIds
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "customer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"customerId") y x)
                                  mutable'clearedFields mutable'profileBrokerageIds
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "legal_type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"legalType") y x)
                                  mutable'clearedFields mutable'profileBrokerageIds
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                                  mutable'clearedFields mutable'profileBrokerageIds
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "contact_information"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"contactInformation") y x)
                                  mutable'clearedFields mutable'profileBrokerageIds
                        42
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getText
                                              (Prelude.fromIntegral len))
                                        "profile_brokerage_ids"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'profileBrokerageIds y)
                                loop x mutable'clearedFields v
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "removed"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"removed") y x)
                                  mutable'clearedFields mutable'profileBrokerageIds
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "obsolete_authentication_system"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteAuthenticationSystem") y
                                     x)
                                  mutable'clearedFields mutable'profileBrokerageIds
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "profile_type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"profileType") y x)
                                  mutable'clearedFields mutable'profileBrokerageIds
                        90
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "profile_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"profileId") y x)
                                  mutable'clearedFields mutable'profileBrokerageIds
                        98
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "sales_series_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"salesSeriesId") y x)
                                  mutable'clearedFields mutable'profileBrokerageIds
                        106
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "number"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"number") y x)
                                  mutable'clearedFields mutable'profileBrokerageIds
                        112
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "simplified"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"simplified") y x)
                                  mutable'clearedFields mutable'profileBrokerageIds
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'clearedFields mutable'profileBrokerageIds
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'clearedFields <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         Data.ProtoLens.Encoding.Growing.new
              mutable'profileBrokerageIds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                               Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage mutable'clearedFields
                mutable'profileBrokerageIds)
          "Profile"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                        ((Prelude..)
                           Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'clearedFields") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'customerId") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'legalType") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'name") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8 _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'contactInformation") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.ProtoLens.encodeMessage _v))
                         ((Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                               (\ _v
                                  -> (Data.Monoid.<>)
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                       ((Prelude..)
                                          (\ bs
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (Prelude.fromIntegral
                                                        (Data.ByteString.length bs)))
                                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                          Data.Text.Encoding.encodeUtf8 _v))
                               (Lens.Family2.view
                                  (Data.ProtoLens.Field.field @"vec'profileBrokerageIds") _x))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'removed") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (\ b -> if b then 1 else 0) _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field
                                            @"maybe'obsoleteAuthenticationSystem")
                                         _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                            ((Prelude..)
                                               (\ bs
                                                  -> (Data.Monoid.<>)
                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                          (Prelude.fromIntegral
                                                             (Data.ByteString.length bs)))
                                                       (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                               Data.Text.Encoding.encodeUtf8 _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'profileType") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'profileId") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 90)
                                                  ((Prelude..)
                                                     (\ bs
                                                        -> (Data.Monoid.<>)
                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                (Prelude.fromIntegral
                                                                   (Data.ByteString.length bs)))
                                                             (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                bs))
                                                     Data.Text.Encoding.encodeUtf8 _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field
                                                     @"maybe'salesSeriesId")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 98)
                                                     ((Prelude..)
                                                        (\ bs
                                                           -> (Data.Monoid.<>)
                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                   (Prelude.fromIntegral
                                                                      (Data.ByteString.length bs)))
                                                                (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                   bs))
                                                        Data.Text.Encoding.encodeUtf8 _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field @"maybe'number") _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           106)
                                                        ((Prelude..)
                                                           (\ bs
                                                              -> (Data.Monoid.<>)
                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                      (Prelude.fromIntegral
                                                                         (Data.ByteString.length
                                                                            bs)))
                                                                   (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                      bs))
                                                           Data.Text.Encoding.encodeUtf8 _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field
                                                           @"maybe'simplified")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              112)
                                                           ((Prelude..)
                                                              Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              (\ b -> if b then 1 else 0) _v))
                                                 (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                    (Lens.Family2.view
                                                       Data.ProtoLens.unknownFields _x))))))))))))))
instance Control.DeepSeq.NFData Profile where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Profile'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Profile'clearedFields x__)
                (Control.DeepSeq.deepseq
                   (_Profile'customerId x__)
                   (Control.DeepSeq.deepseq
                      (_Profile'legalType x__)
                      (Control.DeepSeq.deepseq
                         (_Profile'name x__)
                         (Control.DeepSeq.deepseq
                            (_Profile'contactInformation x__)
                            (Control.DeepSeq.deepseq
                               (_Profile'profileBrokerageIds x__)
                               (Control.DeepSeq.deepseq
                                  (_Profile'removed x__)
                                  (Control.DeepSeq.deepseq
                                     (_Profile'obsoleteAuthenticationSystem x__)
                                     (Control.DeepSeq.deepseq
                                        (_Profile'profileType x__)
                                        (Control.DeepSeq.deepseq
                                           (_Profile'profileId x__)
                                           (Control.DeepSeq.deepseq
                                              (_Profile'salesSeriesId x__)
                                              (Control.DeepSeq.deepseq
                                                 (_Profile'number x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_Profile'simplified x__) ())))))))))))))
data ProfileType
  = PROFILE_TYPE_CUSTOMER |
    PROFILE_TYPE_ADMIN |
    PROFILE_TYPE_BROKERAGE |
    PROFILE_TYPE_SUBSCRIBER |
    PROFILE_TYPE_SALES_SERIES
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum ProfileType where
  maybeToEnum 1 = Prelude.Just PROFILE_TYPE_CUSTOMER
  maybeToEnum 2 = Prelude.Just PROFILE_TYPE_ADMIN
  maybeToEnum 3 = Prelude.Just PROFILE_TYPE_BROKERAGE
  maybeToEnum 4 = Prelude.Just PROFILE_TYPE_SUBSCRIBER
  maybeToEnum 5 = Prelude.Just PROFILE_TYPE_SALES_SERIES
  maybeToEnum _ = Prelude.Nothing
  showEnum PROFILE_TYPE_CUSTOMER = "PROFILE_TYPE_CUSTOMER"
  showEnum PROFILE_TYPE_ADMIN = "PROFILE_TYPE_ADMIN"
  showEnum PROFILE_TYPE_BROKERAGE = "PROFILE_TYPE_BROKERAGE"
  showEnum PROFILE_TYPE_SUBSCRIBER = "PROFILE_TYPE_SUBSCRIBER"
  showEnum PROFILE_TYPE_SALES_SERIES = "PROFILE_TYPE_SALES_SERIES"
  readEnum k
    | (Prelude.==) k "PROFILE_TYPE_CUSTOMER"
    = Prelude.Just PROFILE_TYPE_CUSTOMER
    | (Prelude.==) k "PROFILE_TYPE_ADMIN"
    = Prelude.Just PROFILE_TYPE_ADMIN
    | (Prelude.==) k "PROFILE_TYPE_BROKERAGE"
    = Prelude.Just PROFILE_TYPE_BROKERAGE
    | (Prelude.==) k "PROFILE_TYPE_SUBSCRIBER"
    = Prelude.Just PROFILE_TYPE_SUBSCRIBER
    | (Prelude.==) k "PROFILE_TYPE_SALES_SERIES"
    = Prelude.Just PROFILE_TYPE_SALES_SERIES
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded ProfileType where
  minBound = PROFILE_TYPE_CUSTOMER
  maxBound = PROFILE_TYPE_SALES_SERIES
instance Prelude.Enum ProfileType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum ProfileType: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum PROFILE_TYPE_CUSTOMER = 1
  fromEnum PROFILE_TYPE_ADMIN = 2
  fromEnum PROFILE_TYPE_BROKERAGE = 3
  fromEnum PROFILE_TYPE_SUBSCRIBER = 4
  fromEnum PROFILE_TYPE_SALES_SERIES = 5
  succ PROFILE_TYPE_SALES_SERIES
    = Prelude.error
        "ProfileType.succ: bad argument PROFILE_TYPE_SALES_SERIES. This value would be out of bounds."
  succ PROFILE_TYPE_CUSTOMER = PROFILE_TYPE_ADMIN
  succ PROFILE_TYPE_ADMIN = PROFILE_TYPE_BROKERAGE
  succ PROFILE_TYPE_BROKERAGE = PROFILE_TYPE_SUBSCRIBER
  succ PROFILE_TYPE_SUBSCRIBER = PROFILE_TYPE_SALES_SERIES
  pred PROFILE_TYPE_CUSTOMER
    = Prelude.error
        "ProfileType.pred: bad argument PROFILE_TYPE_CUSTOMER. This value would be out of bounds."
  pred PROFILE_TYPE_ADMIN = PROFILE_TYPE_CUSTOMER
  pred PROFILE_TYPE_BROKERAGE = PROFILE_TYPE_ADMIN
  pred PROFILE_TYPE_SUBSCRIBER = PROFILE_TYPE_BROKERAGE
  pred PROFILE_TYPE_SALES_SERIES = PROFILE_TYPE_SUBSCRIBER
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault ProfileType where
  fieldDefault = PROFILE_TYPE_CUSTOMER
instance Control.DeepSeq.NFData ProfileType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' RemoveUser Data.Text.Text@ -}
data RemoveUser
  = RemoveUser'_constructor {_RemoveUser'id :: !Data.Text.Text,
                             _RemoveUser'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RemoveUser where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RemoveUser "id" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RemoveUser'id (\ x__ y__ -> x__ {_RemoveUser'id = y__}))
        Prelude.id
instance Data.ProtoLens.Message RemoveUser where
  messageName _ = Data.Text.pack "common_1.RemoveUser"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \RemoveUser\DC2\SO\n\
      \\STXid\CAN\SOH \STX(\tR\STXid"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"id")) ::
              Data.ProtoLens.FieldDescriptor RemoveUser
      in Data.Map.fromList [(Data.ProtoLens.Tag 1, id__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RemoveUser'_unknownFields
        (\ x__ y__ -> x__ {_RemoveUser'_unknownFields = y__})
  defMessage
    = RemoveUser'_constructor
        {_RemoveUser'id = Data.ProtoLens.fieldDefault,
         _RemoveUser'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RemoveUser
          -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser RemoveUser
        loop x required'id
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = (if required'id then (:) "id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'id
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "RemoveUser"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"id") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RemoveUser where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RemoveUser'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RemoveUser'id x__) ())
{- | Fields :
      -}
data RemoveUserResult
  = RemoveUserResult'_constructor {_RemoveUserResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RemoveUserResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RemoveUserResult where
  messageName _ = Data.Text.pack "common_1.RemoveUserResult"
  packedMessageDescriptor _
    = "\n\
      \\DLERemoveUserResult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RemoveUserResult'_unknownFields
        (\ x__ y__ -> x__ {_RemoveUserResult'_unknownFields = y__})
  defMessage
    = RemoveUserResult'_constructor
        {_RemoveUserResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RemoveUserResult
          -> Data.ProtoLens.Encoding.Bytes.Parser RemoveUserResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RemoveUserResult"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RemoveUserResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RemoveUserResult'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.sessionToken' @:: Lens' RestoreOrJoinSession Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.clientAppId' @:: Lens' RestoreOrJoinSession Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.clientIpAddress' @:: Lens' RestoreOrJoinSession Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'clientIpAddress' @:: Lens' RestoreOrJoinSession (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.subscribeOnRequestStatusChange' @:: Lens' RestoreOrJoinSession Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'subscribeOnRequestStatusChange' @:: Lens' RestoreOrJoinSession (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.operationType' @:: Lens' RestoreOrJoinSession Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'operationType' @:: Lens' RestoreOrJoinSession (Prelude.Maybe Data.Word.Word32)@ -}
data RestoreOrJoinSession
  = RestoreOrJoinSession'_constructor {_RestoreOrJoinSession'sessionToken :: !Data.Text.Text,
                                       _RestoreOrJoinSession'clientAppId :: !Data.Text.Text,
                                       _RestoreOrJoinSession'clientIpAddress :: !(Prelude.Maybe Data.Text.Text),
                                       _RestoreOrJoinSession'subscribeOnRequestStatusChange :: !(Prelude.Maybe Prelude.Bool),
                                       _RestoreOrJoinSession'operationType :: !(Prelude.Maybe Data.Word.Word32),
                                       _RestoreOrJoinSession'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RestoreOrJoinSession where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RestoreOrJoinSession "sessionToken" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RestoreOrJoinSession'sessionToken
           (\ x__ y__ -> x__ {_RestoreOrJoinSession'sessionToken = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RestoreOrJoinSession "clientAppId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RestoreOrJoinSession'clientAppId
           (\ x__ y__ -> x__ {_RestoreOrJoinSession'clientAppId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RestoreOrJoinSession "clientIpAddress" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RestoreOrJoinSession'clientIpAddress
           (\ x__ y__ -> x__ {_RestoreOrJoinSession'clientIpAddress = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RestoreOrJoinSession "maybe'clientIpAddress" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RestoreOrJoinSession'clientIpAddress
           (\ x__ y__ -> x__ {_RestoreOrJoinSession'clientIpAddress = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RestoreOrJoinSession "subscribeOnRequestStatusChange" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RestoreOrJoinSession'subscribeOnRequestStatusChange
           (\ x__ y__
              -> x__
                   {_RestoreOrJoinSession'subscribeOnRequestStatusChange = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField RestoreOrJoinSession "maybe'subscribeOnRequestStatusChange" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RestoreOrJoinSession'subscribeOnRequestStatusChange
           (\ x__ y__
              -> x__
                   {_RestoreOrJoinSession'subscribeOnRequestStatusChange = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RestoreOrJoinSession "operationType" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RestoreOrJoinSession'operationType
           (\ x__ y__ -> x__ {_RestoreOrJoinSession'operationType = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RestoreOrJoinSession "maybe'operationType" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RestoreOrJoinSession'operationType
           (\ x__ y__ -> x__ {_RestoreOrJoinSession'operationType = y__}))
        Prelude.id
instance Data.ProtoLens.Message RestoreOrJoinSession where
  messageName _ = Data.Text.pack "common_1.RestoreOrJoinSession"
  packedMessageDescriptor _
    = "\n\
      \\DC4RestoreOrJoinSession\DC2#\n\
      \\rsession_token\CAN\SOH \STX(\tR\fsessionToken\DC2\"\n\
      \\rclient_app_id\CAN\STX \STX(\tR\vclientAppId\DC2*\n\
      \\DC1client_ip_address\CAN\ETX \SOH(\tR\SIclientIpAddress\DC2Q\n\
      \\"subscribe_on_request_status_change\CAN\EOT \SOH(\b:\ENQfalseR\RSsubscribeOnRequestStatusChange\DC2%\n\
      \\SOoperation_type\CAN\ENQ \SOH(\rR\roperationType\"&\n\
      \\rOperationType\DC2\v\n\
      \\aRESTORE\DLE\SOH\DC2\b\n\
      \\EOTJOIN\DLE\STX"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        sessionToken__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "session_token"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"sessionToken")) ::
              Data.ProtoLens.FieldDescriptor RestoreOrJoinSession
        clientAppId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "client_app_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"clientAppId")) ::
              Data.ProtoLens.FieldDescriptor RestoreOrJoinSession
        clientIpAddress__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "client_ip_address"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'clientIpAddress")) ::
              Data.ProtoLens.FieldDescriptor RestoreOrJoinSession
        subscribeOnRequestStatusChange__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "subscribe_on_request_status_change"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field
                    @"maybe'subscribeOnRequestStatusChange")) ::
              Data.ProtoLens.FieldDescriptor RestoreOrJoinSession
        operationType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "operation_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'operationType")) ::
              Data.ProtoLens.FieldDescriptor RestoreOrJoinSession
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, sessionToken__field_descriptor),
           (Data.ProtoLens.Tag 2, clientAppId__field_descriptor),
           (Data.ProtoLens.Tag 3, clientIpAddress__field_descriptor),
           (Data.ProtoLens.Tag 4, 
            subscribeOnRequestStatusChange__field_descriptor),
           (Data.ProtoLens.Tag 5, operationType__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RestoreOrJoinSession'_unknownFields
        (\ x__ y__ -> x__ {_RestoreOrJoinSession'_unknownFields = y__})
  defMessage
    = RestoreOrJoinSession'_constructor
        {_RestoreOrJoinSession'sessionToken = Data.ProtoLens.fieldDefault,
         _RestoreOrJoinSession'clientAppId = Data.ProtoLens.fieldDefault,
         _RestoreOrJoinSession'clientIpAddress = Prelude.Nothing,
         _RestoreOrJoinSession'subscribeOnRequestStatusChange = Prelude.Nothing,
         _RestoreOrJoinSession'operationType = Prelude.Nothing,
         _RestoreOrJoinSession'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RestoreOrJoinSession
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser RestoreOrJoinSession
        loop x required'clientAppId required'sessionToken
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'clientAppId then
                                  (:) "client_app_id"
                              else
                                  Prelude.id)
                               ((if required'sessionToken then
                                     (:) "session_token"
                                 else
                                     Prelude.id)
                                  [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "session_token"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"sessionToken") y x)
                                  required'clientAppId Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "client_app_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"clientAppId") y x)
                                  Prelude.False required'sessionToken
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "client_ip_address"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"clientIpAddress") y x)
                                  required'clientAppId required'sessionToken
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "subscribe_on_request_status_change"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"subscribeOnRequestStatusChange")
                                     y x)
                                  required'clientAppId required'sessionToken
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "operation_type"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"operationType") y x)
                                  required'clientAppId required'sessionToken
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'clientAppId required'sessionToken
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RestoreOrJoinSession"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"sessionToken") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.Text.Encoding.encodeUtf8
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"clientAppId") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'clientIpAddress") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field
                                @"maybe'subscribeOnRequestStatusChange")
                             _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0) _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'operationType") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData RestoreOrJoinSession where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RestoreOrJoinSession'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RestoreOrJoinSession'sessionToken x__)
                (Control.DeepSeq.deepseq
                   (_RestoreOrJoinSession'clientAppId x__)
                   (Control.DeepSeq.deepseq
                      (_RestoreOrJoinSession'clientIpAddress x__)
                      (Control.DeepSeq.deepseq
                         (_RestoreOrJoinSession'subscribeOnRequestStatusChange x__)
                         (Control.DeepSeq.deepseq
                            (_RestoreOrJoinSession'operationType x__) ())))))
data RestoreOrJoinSession'OperationType
  = RestoreOrJoinSession'RESTORE | RestoreOrJoinSession'JOIN
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum RestoreOrJoinSession'OperationType where
  maybeToEnum 1 = Prelude.Just RestoreOrJoinSession'RESTORE
  maybeToEnum 2 = Prelude.Just RestoreOrJoinSession'JOIN
  maybeToEnum _ = Prelude.Nothing
  showEnum RestoreOrJoinSession'RESTORE = "RESTORE"
  showEnum RestoreOrJoinSession'JOIN = "JOIN"
  readEnum k
    | (Prelude.==) k "RESTORE"
    = Prelude.Just RestoreOrJoinSession'RESTORE
    | (Prelude.==) k "JOIN" = Prelude.Just RestoreOrJoinSession'JOIN
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded RestoreOrJoinSession'OperationType where
  minBound = RestoreOrJoinSession'RESTORE
  maxBound = RestoreOrJoinSession'JOIN
instance Prelude.Enum RestoreOrJoinSession'OperationType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum OperationType: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum RestoreOrJoinSession'RESTORE = 1
  fromEnum RestoreOrJoinSession'JOIN = 2
  succ RestoreOrJoinSession'JOIN
    = Prelude.error
        "RestoreOrJoinSession'OperationType.succ: bad argument RestoreOrJoinSession'JOIN. This value would be out of bounds."
  succ RestoreOrJoinSession'RESTORE = RestoreOrJoinSession'JOIN
  pred RestoreOrJoinSession'RESTORE
    = Prelude.error
        "RestoreOrJoinSession'OperationType.pred: bad argument RestoreOrJoinSession'RESTORE. This value would be out of bounds."
  pred RestoreOrJoinSession'JOIN = RestoreOrJoinSession'RESTORE
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault RestoreOrJoinSession'OperationType where
  fieldDefault = RestoreOrJoinSession'RESTORE
instance Control.DeepSeq.NFData RestoreOrJoinSession'OperationType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.operationStatus' @:: Lens' RestoreOrJoinSessionResult Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.errorMessage' @:: Lens' RestoreOrJoinSessionResult Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.maybe'errorMessage' @:: Lens' RestoreOrJoinSessionResult (Prelude.Maybe Proto.Common.Shared1.Text)@ -}
data RestoreOrJoinSessionResult
  = RestoreOrJoinSessionResult'_constructor {_RestoreOrJoinSessionResult'operationStatus :: !Data.Word.Word32,
                                             _RestoreOrJoinSessionResult'errorMessage :: !(Prelude.Maybe Proto.Common.Shared1.Text),
                                             _RestoreOrJoinSessionResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RestoreOrJoinSessionResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RestoreOrJoinSessionResult "operationStatus" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RestoreOrJoinSessionResult'operationStatus
           (\ x__ y__
              -> x__ {_RestoreOrJoinSessionResult'operationStatus = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RestoreOrJoinSessionResult "errorMessage" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RestoreOrJoinSessionResult'errorMessage
           (\ x__ y__
              -> x__ {_RestoreOrJoinSessionResult'errorMessage = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField RestoreOrJoinSessionResult "maybe'errorMessage" (Prelude.Maybe Proto.Common.Shared1.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RestoreOrJoinSessionResult'errorMessage
           (\ x__ y__
              -> x__ {_RestoreOrJoinSessionResult'errorMessage = y__}))
        Prelude.id
instance Data.ProtoLens.Message RestoreOrJoinSessionResult where
  messageName _
    = Data.Text.pack "common_1.RestoreOrJoinSessionResult"
  packedMessageDescriptor _
    = "\n\
      \\SUBRestoreOrJoinSessionResult\DC2)\n\
      \\DLEoperation_status\CAN\SOH \STX(\rR\SIoperationStatus\DC23\n\
      \\rerror_message\CAN\STX \SOH(\v2\SO.shared_1.TextR\ferrorMessage"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        operationStatus__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "operation_status"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"operationStatus")) ::
              Data.ProtoLens.FieldDescriptor RestoreOrJoinSessionResult
        errorMessage__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "error_message"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'errorMessage")) ::
              Data.ProtoLens.FieldDescriptor RestoreOrJoinSessionResult
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, operationStatus__field_descriptor),
           (Data.ProtoLens.Tag 2, errorMessage__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RestoreOrJoinSessionResult'_unknownFields
        (\ x__ y__
           -> x__ {_RestoreOrJoinSessionResult'_unknownFields = y__})
  defMessage
    = RestoreOrJoinSessionResult'_constructor
        {_RestoreOrJoinSessionResult'operationStatus = Data.ProtoLens.fieldDefault,
         _RestoreOrJoinSessionResult'errorMessage = Prelude.Nothing,
         _RestoreOrJoinSessionResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RestoreOrJoinSessionResult
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RestoreOrJoinSessionResult
        loop x required'operationStatus
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'operationStatus then
                                  (:) "operation_status"
                              else
                                  Prelude.id)
                               []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "operation_status"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"operationStatus") y x)
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "error_message"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"errorMessage") y x)
                                  required'operationStatus
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'operationStatus
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "RestoreOrJoinSessionResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                ((Prelude..)
                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"operationStatus") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'errorMessage") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RestoreOrJoinSessionResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RestoreOrJoinSessionResult'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RestoreOrJoinSessionResult'operationStatus x__)
                (Control.DeepSeq.deepseq
                   (_RestoreOrJoinSessionResult'errorMessage x__) ()))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' RestoreUser Data.Text.Text@ -}
data RestoreUser
  = RestoreUser'_constructor {_RestoreUser'id :: !Data.Text.Text,
                              _RestoreUser'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RestoreUser where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RestoreUser "id" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RestoreUser'id (\ x__ y__ -> x__ {_RestoreUser'id = y__}))
        Prelude.id
instance Data.ProtoLens.Message RestoreUser where
  messageName _ = Data.Text.pack "common_1.RestoreUser"
  packedMessageDescriptor _
    = "\n\
      \\vRestoreUser\DC2\SO\n\
      \\STXid\CAN\SOH \STX(\tR\STXid"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"id")) ::
              Data.ProtoLens.FieldDescriptor RestoreUser
      in Data.Map.fromList [(Data.ProtoLens.Tag 1, id__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RestoreUser'_unknownFields
        (\ x__ y__ -> x__ {_RestoreUser'_unknownFields = y__})
  defMessage
    = RestoreUser'_constructor
        {_RestoreUser'id = Data.ProtoLens.fieldDefault,
         _RestoreUser'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RestoreUser
          -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser RestoreUser
        loop x required'id
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = (if required'id then (:) "id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'id
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "RestoreUser"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"id") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RestoreUser where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RestoreUser'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RestoreUser'id x__) ())
{- | Fields :
      -}
data RestoreUserResult
  = RestoreUserResult'_constructor {_RestoreUserResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RestoreUserResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RestoreUserResult where
  messageName _ = Data.Text.pack "common_1.RestoreUserResult"
  packedMessageDescriptor _
    = "\n\
      \\DC1RestoreUserResult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RestoreUserResult'_unknownFields
        (\ x__ y__ -> x__ {_RestoreUserResult'_unknownFields = y__})
  defMessage
    = RestoreUserResult'_constructor
        {_RestoreUserResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RestoreUserResult
          -> Data.ProtoLens.Encoding.Bytes.Parser RestoreUserResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RestoreUserResult"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RestoreUserResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RestoreUserResult'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' SalesSeriesInfo Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'id' @:: Lens' SalesSeriesInfo (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.salesSeriesName' @:: Lens' SalesSeriesInfo Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'salesSeriesName' @:: Lens' SalesSeriesInfo (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.salesSeriesNumber' @:: Lens' SalesSeriesInfo Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'salesSeriesNumber' @:: Lens' SalesSeriesInfo (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.profileId' @:: Lens' SalesSeriesInfo Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'profileId' @:: Lens' SalesSeriesInfo (Prelude.Maybe Data.Text.Text)@ -}
data SalesSeriesInfo
  = SalesSeriesInfo'_constructor {_SalesSeriesInfo'id :: !(Prelude.Maybe Data.Text.Text),
                                  _SalesSeriesInfo'salesSeriesName :: !(Prelude.Maybe Data.Text.Text),
                                  _SalesSeriesInfo'salesSeriesNumber :: !(Prelude.Maybe Data.Text.Text),
                                  _SalesSeriesInfo'profileId :: !(Prelude.Maybe Data.Text.Text),
                                  _SalesSeriesInfo'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SalesSeriesInfo where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SalesSeriesInfo "id" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesInfo'id (\ x__ y__ -> x__ {_SalesSeriesInfo'id = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesInfo "maybe'id" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesInfo'id (\ x__ y__ -> x__ {_SalesSeriesInfo'id = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesInfo "salesSeriesName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesInfo'salesSeriesName
           (\ x__ y__ -> x__ {_SalesSeriesInfo'salesSeriesName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesInfo "maybe'salesSeriesName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesInfo'salesSeriesName
           (\ x__ y__ -> x__ {_SalesSeriesInfo'salesSeriesName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesInfo "salesSeriesNumber" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesInfo'salesSeriesNumber
           (\ x__ y__ -> x__ {_SalesSeriesInfo'salesSeriesNumber = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesInfo "maybe'salesSeriesNumber" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesInfo'salesSeriesNumber
           (\ x__ y__ -> x__ {_SalesSeriesInfo'salesSeriesNumber = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesInfo "profileId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesInfo'profileId
           (\ x__ y__ -> x__ {_SalesSeriesInfo'profileId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesInfo "maybe'profileId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesInfo'profileId
           (\ x__ y__ -> x__ {_SalesSeriesInfo'profileId = y__}))
        Prelude.id
instance Data.ProtoLens.Message SalesSeriesInfo where
  messageName _ = Data.Text.pack "common_1.SalesSeriesInfo"
  packedMessageDescriptor _
    = "\n\
      \\SISalesSeriesInfo\DC2\SO\n\
      \\STXid\CAN\SOH \SOH(\tR\STXid\DC2*\n\
      \\DC1sales_series_name\CAN\STX \SOH(\tR\SIsalesSeriesName\DC2.\n\
      \\DC3sales_series_number\CAN\ETX \SOH(\tR\DC1salesSeriesNumber\DC2\GS\n\
      \\n\
      \profile_id\CAN\EOT \SOH(\tR\tprofileId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'id")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesInfo
        salesSeriesName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sales_series_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'salesSeriesName")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesInfo
        salesSeriesNumber__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sales_series_number"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'salesSeriesNumber")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesInfo
        profileId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "profile_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'profileId")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesInfo
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, id__field_descriptor),
           (Data.ProtoLens.Tag 2, salesSeriesName__field_descriptor),
           (Data.ProtoLens.Tag 3, salesSeriesNumber__field_descriptor),
           (Data.ProtoLens.Tag 4, profileId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _SalesSeriesInfo'_unknownFields
        (\ x__ y__ -> x__ {_SalesSeriesInfo'_unknownFields = y__})
  defMessage
    = SalesSeriesInfo'_constructor
        {_SalesSeriesInfo'id = Prelude.Nothing,
         _SalesSeriesInfo'salesSeriesName = Prelude.Nothing,
         _SalesSeriesInfo'salesSeriesNumber = Prelude.Nothing,
         _SalesSeriesInfo'profileId = Prelude.Nothing,
         _SalesSeriesInfo'_unknownFields = []}
  parseMessage
    = let
        loop ::
          SalesSeriesInfo
          -> Data.ProtoLens.Encoding.Bytes.Parser SalesSeriesInfo
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "sales_series_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"salesSeriesName") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "sales_series_number"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"salesSeriesNumber") y x)
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "profile_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"profileId") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "SalesSeriesInfo"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'id") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'salesSeriesName") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'salesSeriesNumber") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'profileId") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8 _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData SalesSeriesInfo where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_SalesSeriesInfo'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_SalesSeriesInfo'id x__)
                (Control.DeepSeq.deepseq
                   (_SalesSeriesInfo'salesSeriesName x__)
                   (Control.DeepSeq.deepseq
                      (_SalesSeriesInfo'salesSeriesNumber x__)
                      (Control.DeepSeq.deepseq (_SalesSeriesInfo'profileId x__) ()))))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.salesSeries' @:: Lens' SalesSeriesListResult [SalesSeriesInfo]@
         * 'Proto.CMS.Common1_Fields.vec'salesSeries' @:: Lens' SalesSeriesListResult (Data.Vector.Vector SalesSeriesInfo)@
         * 'Proto.CMS.Common1_Fields.isComplete' @:: Lens' SalesSeriesListResult Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'isComplete' @:: Lens' SalesSeriesListResult (Prelude.Maybe Prelude.Bool)@ -}
data SalesSeriesListResult
  = SalesSeriesListResult'_constructor {_SalesSeriesListResult'salesSeries :: !(Data.Vector.Vector SalesSeriesInfo),
                                        _SalesSeriesListResult'isComplete :: !(Prelude.Maybe Prelude.Bool),
                                        _SalesSeriesListResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SalesSeriesListResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SalesSeriesListResult "salesSeries" [SalesSeriesInfo] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesListResult'salesSeries
           (\ x__ y__ -> x__ {_SalesSeriesListResult'salesSeries = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField SalesSeriesListResult "vec'salesSeries" (Data.Vector.Vector SalesSeriesInfo) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesListResult'salesSeries
           (\ x__ y__ -> x__ {_SalesSeriesListResult'salesSeries = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesListResult "isComplete" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesListResult'isComplete
           (\ x__ y__ -> x__ {_SalesSeriesListResult'isComplete = y__}))
        (Data.ProtoLens.maybeLens Prelude.True)
instance Data.ProtoLens.Field.HasField SalesSeriesListResult "maybe'isComplete" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesListResult'isComplete
           (\ x__ y__ -> x__ {_SalesSeriesListResult'isComplete = y__}))
        Prelude.id
instance Data.ProtoLens.Message SalesSeriesListResult where
  messageName _ = Data.Text.pack "common_1.SalesSeriesListResult"
  packedMessageDescriptor _
    = "\n\
      \\NAKSalesSeriesListResult\DC2<\n\
      \\fsales_series\CAN\SOH \ETX(\v2\EM.common_1.SalesSeriesInfoR\vsalesSeries\DC2%\n\
      \\vis_complete\CAN\STX \SOH(\b:\EOTtrueR\n\
      \isComplete"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        salesSeries__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sales_series"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor SalesSeriesInfo)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"salesSeries")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesListResult
        isComplete__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "is_complete"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'isComplete")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesListResult
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, salesSeries__field_descriptor),
           (Data.ProtoLens.Tag 2, isComplete__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _SalesSeriesListResult'_unknownFields
        (\ x__ y__ -> x__ {_SalesSeriesListResult'_unknownFields = y__})
  defMessage
    = SalesSeriesListResult'_constructor
        {_SalesSeriesListResult'salesSeries = Data.Vector.Generic.empty,
         _SalesSeriesListResult'isComplete = Prelude.Nothing,
         _SalesSeriesListResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          SalesSeriesListResult
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld SalesSeriesInfo
             -> Data.ProtoLens.Encoding.Bytes.Parser SalesSeriesListResult
        loop x mutable'salesSeries
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'salesSeries <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                 mutable'salesSeries)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'salesSeries") frozen'salesSeries
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "sales_series"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'salesSeries y)
                                loop x v
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "is_complete"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"isComplete") y x)
                                  mutable'salesSeries
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'salesSeries
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'salesSeries <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'salesSeries)
          "SalesSeriesListResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'salesSeries") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'isComplete") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData SalesSeriesListResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_SalesSeriesListResult'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_SalesSeriesListResult'salesSeries x__)
                (Control.DeepSeq.deepseq
                   (_SalesSeriesListResult'isComplete x__) ()))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.obsoleteText' @:: Lens' SalesSeriesSearchRequest Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteText' @:: Lens' SalesSeriesSearchRequest (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.obsoleteSearchCriteria' @:: Lens' SalesSeriesSearchRequest [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'obsoleteSearchCriteria' @:: Lens' SalesSeriesSearchRequest (Data.Vector.Unboxed.Vector Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.searchOptions' @:: Lens' SalesSeriesSearchRequest [SearchOption]@
         * 'Proto.CMS.Common1_Fields.vec'searchOptions' @:: Lens' SalesSeriesSearchRequest (Data.Vector.Vector SearchOption)@
         * 'Proto.CMS.Common1_Fields.allMatchMode' @:: Lens' SalesSeriesSearchRequest Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'allMatchMode' @:: Lens' SalesSeriesSearchRequest (Prelude.Maybe Prelude.Bool)@ -}
data SalesSeriesSearchRequest
  = SalesSeriesSearchRequest'_constructor {_SalesSeriesSearchRequest'obsoleteText :: !(Prelude.Maybe Data.Text.Text),
                                           _SalesSeriesSearchRequest'obsoleteSearchCriteria :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                                           _SalesSeriesSearchRequest'searchOptions :: !(Data.Vector.Vector SearchOption),
                                           _SalesSeriesSearchRequest'allMatchMode :: !(Prelude.Maybe Prelude.Bool),
                                           _SalesSeriesSearchRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SalesSeriesSearchRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SalesSeriesSearchRequest "obsoleteText" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchRequest'obsoleteText
           (\ x__ y__ -> x__ {_SalesSeriesSearchRequest'obsoleteText = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesSearchRequest "maybe'obsoleteText" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchRequest'obsoleteText
           (\ x__ y__ -> x__ {_SalesSeriesSearchRequest'obsoleteText = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesSearchRequest "obsoleteSearchCriteria" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchRequest'obsoleteSearchCriteria
           (\ x__ y__
              -> x__ {_SalesSeriesSearchRequest'obsoleteSearchCriteria = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField SalesSeriesSearchRequest "vec'obsoleteSearchCriteria" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchRequest'obsoleteSearchCriteria
           (\ x__ y__
              -> x__ {_SalesSeriesSearchRequest'obsoleteSearchCriteria = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesSearchRequest "searchOptions" [SearchOption] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchRequest'searchOptions
           (\ x__ y__ -> x__ {_SalesSeriesSearchRequest'searchOptions = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField SalesSeriesSearchRequest "vec'searchOptions" (Data.Vector.Vector SearchOption) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchRequest'searchOptions
           (\ x__ y__ -> x__ {_SalesSeriesSearchRequest'searchOptions = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesSearchRequest "allMatchMode" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchRequest'allMatchMode
           (\ x__ y__ -> x__ {_SalesSeriesSearchRequest'allMatchMode = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField SalesSeriesSearchRequest "maybe'allMatchMode" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchRequest'allMatchMode
           (\ x__ y__ -> x__ {_SalesSeriesSearchRequest'allMatchMode = y__}))
        Prelude.id
instance Data.ProtoLens.Message SalesSeriesSearchRequest where
  messageName _ = Data.Text.pack "common_1.SalesSeriesSearchRequest"
  packedMessageDescriptor _
    = "\n\
      \\CANSalesSeriesSearchRequest\DC2'\n\
      \\robsolete_text\CAN\SOH \SOH(\tR\fobsoleteTextB\STX\CAN\SOH\DC2<\n\
      \\CANobsolete_search_criteria\CAN\STX \ETX(\rR\SYNobsoleteSearchCriteriaB\STX\CAN\SOH\DC2=\n\
      \\SOsearch_options\CAN\ETX \ETX(\v2\SYN.common_1.SearchOptionR\rsearchOptions\DC2+\n\
      \\SOall_match_mode\CAN\EOT \SOH(\b:\ENQfalseR\fallMatchMode\"j\n\
      \\SOSearchCriteria\DC2\ACK\n\
      \\STXID\DLE\SOH\DC2\n\
      \\n\
      \\ACKNUMBER\DLE\STX\DC2\b\n\
      \\EOTNAME\DLE\ETX\DC2\DLE\n\
      \\fBROKERAGE_ID\DLE\EOT\DC2\SO\n\
      \\n\
      \FIRST_NAME\DLE\ENQ\DC2\r\n\
      \\tLAST_NAME\DLE\ACK\DC2\t\n\
      \\ENQEMAIL\DLE\a"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        obsoleteText__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_text"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsoleteText")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchRequest
        obsoleteSearchCriteria__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_search_criteria"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"obsoleteSearchCriteria")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchRequest
        searchOptions__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "search_options"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor SearchOption)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"searchOptions")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchRequest
        allMatchMode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "all_match_mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'allMatchMode")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, obsoleteText__field_descriptor),
           (Data.ProtoLens.Tag 2, obsoleteSearchCriteria__field_descriptor),
           (Data.ProtoLens.Tag 3, searchOptions__field_descriptor),
           (Data.ProtoLens.Tag 4, allMatchMode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _SalesSeriesSearchRequest'_unknownFields
        (\ x__ y__ -> x__ {_SalesSeriesSearchRequest'_unknownFields = y__})
  defMessage
    = SalesSeriesSearchRequest'_constructor
        {_SalesSeriesSearchRequest'obsoleteText = Prelude.Nothing,
         _SalesSeriesSearchRequest'obsoleteSearchCriteria = Data.Vector.Generic.empty,
         _SalesSeriesSearchRequest'searchOptions = Data.Vector.Generic.empty,
         _SalesSeriesSearchRequest'allMatchMode = Prelude.Nothing,
         _SalesSeriesSearchRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          SalesSeriesSearchRequest
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld SearchOption
                -> Data.ProtoLens.Encoding.Bytes.Parser SalesSeriesSearchRequest
        loop x mutable'obsoleteSearchCriteria mutable'searchOptions
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'obsoleteSearchCriteria <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                         (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                            mutable'obsoleteSearchCriteria)
                      frozen'searchOptions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                   mutable'searchOptions)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'obsoleteSearchCriteria")
                              frozen'obsoleteSearchCriteria
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'searchOptions")
                                 frozen'searchOptions x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "obsolete_text"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteText") y x)
                                  mutable'obsoleteSearchCriteria mutable'searchOptions
                        16
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "obsolete_search_criteria"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'obsoleteSearchCriteria y)
                                loop x v mutable'searchOptions
                        18
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "obsolete_search_criteria"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'obsoleteSearchCriteria)
                                loop x y mutable'searchOptions
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "search_options"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'searchOptions y)
                                loop x mutable'obsoleteSearchCriteria v
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "all_match_mode"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"allMatchMode") y x)
                                  mutable'obsoleteSearchCriteria mutable'searchOptions
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'obsoleteSearchCriteria mutable'searchOptions
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'obsoleteSearchCriteria <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                  Data.ProtoLens.Encoding.Growing.new
              mutable'searchOptions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage mutable'obsoleteSearchCriteria
                mutable'searchOptions)
          "SalesSeriesSearchRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'obsoleteText") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                           ((Prelude..)
                              Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'obsoleteSearchCriteria") _x))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                              ((Prelude..)
                                 (\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Data.ProtoLens.encodeMessage _v))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'searchOptions") _x))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'allMatchMode") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0) _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData SalesSeriesSearchRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_SalesSeriesSearchRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_SalesSeriesSearchRequest'obsoleteText x__)
                (Control.DeepSeq.deepseq
                   (_SalesSeriesSearchRequest'obsoleteSearchCriteria x__)
                   (Control.DeepSeq.deepseq
                      (_SalesSeriesSearchRequest'searchOptions x__)
                      (Control.DeepSeq.deepseq
                         (_SalesSeriesSearchRequest'allMatchMode x__) ()))))
data SalesSeriesSearchRequest'SearchCriteria
  = SalesSeriesSearchRequest'ID |
    SalesSeriesSearchRequest'NUMBER |
    SalesSeriesSearchRequest'NAME |
    SalesSeriesSearchRequest'BROKERAGE_ID |
    SalesSeriesSearchRequest'FIRST_NAME |
    SalesSeriesSearchRequest'LAST_NAME |
    SalesSeriesSearchRequest'EMAIL
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum SalesSeriesSearchRequest'SearchCriteria where
  maybeToEnum 1 = Prelude.Just SalesSeriesSearchRequest'ID
  maybeToEnum 2 = Prelude.Just SalesSeriesSearchRequest'NUMBER
  maybeToEnum 3 = Prelude.Just SalesSeriesSearchRequest'NAME
  maybeToEnum 4 = Prelude.Just SalesSeriesSearchRequest'BROKERAGE_ID
  maybeToEnum 5 = Prelude.Just SalesSeriesSearchRequest'FIRST_NAME
  maybeToEnum 6 = Prelude.Just SalesSeriesSearchRequest'LAST_NAME
  maybeToEnum 7 = Prelude.Just SalesSeriesSearchRequest'EMAIL
  maybeToEnum _ = Prelude.Nothing
  showEnum SalesSeriesSearchRequest'ID = "ID"
  showEnum SalesSeriesSearchRequest'NUMBER = "NUMBER"
  showEnum SalesSeriesSearchRequest'NAME = "NAME"
  showEnum SalesSeriesSearchRequest'BROKERAGE_ID = "BROKERAGE_ID"
  showEnum SalesSeriesSearchRequest'FIRST_NAME = "FIRST_NAME"
  showEnum SalesSeriesSearchRequest'LAST_NAME = "LAST_NAME"
  showEnum SalesSeriesSearchRequest'EMAIL = "EMAIL"
  readEnum k
    | (Prelude.==) k "ID" = Prelude.Just SalesSeriesSearchRequest'ID
    | (Prelude.==) k "NUMBER"
    = Prelude.Just SalesSeriesSearchRequest'NUMBER
    | (Prelude.==) k "NAME"
    = Prelude.Just SalesSeriesSearchRequest'NAME
    | (Prelude.==) k "BROKERAGE_ID"
    = Prelude.Just SalesSeriesSearchRequest'BROKERAGE_ID
    | (Prelude.==) k "FIRST_NAME"
    = Prelude.Just SalesSeriesSearchRequest'FIRST_NAME
    | (Prelude.==) k "LAST_NAME"
    = Prelude.Just SalesSeriesSearchRequest'LAST_NAME
    | (Prelude.==) k "EMAIL"
    = Prelude.Just SalesSeriesSearchRequest'EMAIL
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded SalesSeriesSearchRequest'SearchCriteria where
  minBound = SalesSeriesSearchRequest'ID
  maxBound = SalesSeriesSearchRequest'EMAIL
instance Prelude.Enum SalesSeriesSearchRequest'SearchCriteria where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum SearchCriteria: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum SalesSeriesSearchRequest'ID = 1
  fromEnum SalesSeriesSearchRequest'NUMBER = 2
  fromEnum SalesSeriesSearchRequest'NAME = 3
  fromEnum SalesSeriesSearchRequest'BROKERAGE_ID = 4
  fromEnum SalesSeriesSearchRequest'FIRST_NAME = 5
  fromEnum SalesSeriesSearchRequest'LAST_NAME = 6
  fromEnum SalesSeriesSearchRequest'EMAIL = 7
  succ SalesSeriesSearchRequest'EMAIL
    = Prelude.error
        "SalesSeriesSearchRequest'SearchCriteria.succ: bad argument SalesSeriesSearchRequest'EMAIL. This value would be out of bounds."
  succ SalesSeriesSearchRequest'ID = SalesSeriesSearchRequest'NUMBER
  succ SalesSeriesSearchRequest'NUMBER
    = SalesSeriesSearchRequest'NAME
  succ SalesSeriesSearchRequest'NAME
    = SalesSeriesSearchRequest'BROKERAGE_ID
  succ SalesSeriesSearchRequest'BROKERAGE_ID
    = SalesSeriesSearchRequest'FIRST_NAME
  succ SalesSeriesSearchRequest'FIRST_NAME
    = SalesSeriesSearchRequest'LAST_NAME
  succ SalesSeriesSearchRequest'LAST_NAME
    = SalesSeriesSearchRequest'EMAIL
  pred SalesSeriesSearchRequest'ID
    = Prelude.error
        "SalesSeriesSearchRequest'SearchCriteria.pred: bad argument SalesSeriesSearchRequest'ID. This value would be out of bounds."
  pred SalesSeriesSearchRequest'NUMBER = SalesSeriesSearchRequest'ID
  pred SalesSeriesSearchRequest'NAME
    = SalesSeriesSearchRequest'NUMBER
  pred SalesSeriesSearchRequest'BROKERAGE_ID
    = SalesSeriesSearchRequest'NAME
  pred SalesSeriesSearchRequest'FIRST_NAME
    = SalesSeriesSearchRequest'BROKERAGE_ID
  pred SalesSeriesSearchRequest'LAST_NAME
    = SalesSeriesSearchRequest'FIRST_NAME
  pred SalesSeriesSearchRequest'EMAIL
    = SalesSeriesSearchRequest'LAST_NAME
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault SalesSeriesSearchRequest'SearchCriteria where
  fieldDefault = SalesSeriesSearchRequest'ID
instance Control.DeepSeq.NFData SalesSeriesSearchRequest'SearchCriteria where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.salesSeriesId' @:: Lens' SalesSeriesSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'salesSeriesId' @:: Lens' SalesSeriesSearchResultRecord (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.salesSeriesName' @:: Lens' SalesSeriesSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'salesSeriesName' @:: Lens' SalesSeriesSearchResultRecord (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.salesSeriesNumber' @:: Lens' SalesSeriesSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'salesSeriesNumber' @:: Lens' SalesSeriesSearchResultRecord (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.brokerageId' @:: Lens' SalesSeriesSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'brokerageId' @:: Lens' SalesSeriesSearchResultRecord (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.brokerageName' @:: Lens' SalesSeriesSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'brokerageName' @:: Lens' SalesSeriesSearchResultRecord (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.removed' @:: Lens' SalesSeriesSearchResultRecord Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'removed' @:: Lens' SalesSeriesSearchResultRecord (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.emails' @:: Lens' SalesSeriesSearchResultRecord [Data.Text.Text]@
         * 'Proto.CMS.Common1_Fields.vec'emails' @:: Lens' SalesSeriesSearchResultRecord (Data.Vector.Vector Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.firstName' @:: Lens' SalesSeriesSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'firstName' @:: Lens' SalesSeriesSearchResultRecord (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.lastName' @:: Lens' SalesSeriesSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'lastName' @:: Lens' SalesSeriesSearchResultRecord (Prelude.Maybe Data.Text.Text)@ -}
data SalesSeriesSearchResultRecord
  = SalesSeriesSearchResultRecord'_constructor {_SalesSeriesSearchResultRecord'salesSeriesId :: !(Prelude.Maybe Data.Text.Text),
                                                _SalesSeriesSearchResultRecord'salesSeriesName :: !(Prelude.Maybe Data.Text.Text),
                                                _SalesSeriesSearchResultRecord'salesSeriesNumber :: !(Prelude.Maybe Data.Text.Text),
                                                _SalesSeriesSearchResultRecord'brokerageId :: !(Prelude.Maybe Data.Text.Text),
                                                _SalesSeriesSearchResultRecord'brokerageName :: !(Prelude.Maybe Data.Text.Text),
                                                _SalesSeriesSearchResultRecord'removed :: !(Prelude.Maybe Prelude.Bool),
                                                _SalesSeriesSearchResultRecord'emails :: !(Data.Vector.Vector Data.Text.Text),
                                                _SalesSeriesSearchResultRecord'firstName :: !(Prelude.Maybe Data.Text.Text),
                                                _SalesSeriesSearchResultRecord'lastName :: !(Prelude.Maybe Data.Text.Text),
                                                _SalesSeriesSearchResultRecord'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SalesSeriesSearchResultRecord where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "salesSeriesId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'salesSeriesId
           (\ x__ y__
              -> x__ {_SalesSeriesSearchResultRecord'salesSeriesId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "maybe'salesSeriesId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'salesSeriesId
           (\ x__ y__
              -> x__ {_SalesSeriesSearchResultRecord'salesSeriesId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "salesSeriesName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'salesSeriesName
           (\ x__ y__
              -> x__ {_SalesSeriesSearchResultRecord'salesSeriesName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "maybe'salesSeriesName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'salesSeriesName
           (\ x__ y__
              -> x__ {_SalesSeriesSearchResultRecord'salesSeriesName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "salesSeriesNumber" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'salesSeriesNumber
           (\ x__ y__
              -> x__ {_SalesSeriesSearchResultRecord'salesSeriesNumber = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "maybe'salesSeriesNumber" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'salesSeriesNumber
           (\ x__ y__
              -> x__ {_SalesSeriesSearchResultRecord'salesSeriesNumber = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "brokerageId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'brokerageId
           (\ x__ y__
              -> x__ {_SalesSeriesSearchResultRecord'brokerageId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "maybe'brokerageId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'brokerageId
           (\ x__ y__
              -> x__ {_SalesSeriesSearchResultRecord'brokerageId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "brokerageName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'brokerageName
           (\ x__ y__
              -> x__ {_SalesSeriesSearchResultRecord'brokerageName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "maybe'brokerageName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'brokerageName
           (\ x__ y__
              -> x__ {_SalesSeriesSearchResultRecord'brokerageName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "removed" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'removed
           (\ x__ y__ -> x__ {_SalesSeriesSearchResultRecord'removed = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "maybe'removed" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'removed
           (\ x__ y__ -> x__ {_SalesSeriesSearchResultRecord'removed = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "emails" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'emails
           (\ x__ y__ -> x__ {_SalesSeriesSearchResultRecord'emails = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "vec'emails" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'emails
           (\ x__ y__ -> x__ {_SalesSeriesSearchResultRecord'emails = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "firstName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'firstName
           (\ x__ y__
              -> x__ {_SalesSeriesSearchResultRecord'firstName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "maybe'firstName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'firstName
           (\ x__ y__
              -> x__ {_SalesSeriesSearchResultRecord'firstName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "lastName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'lastName
           (\ x__ y__ -> x__ {_SalesSeriesSearchResultRecord'lastName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SalesSeriesSearchResultRecord "maybe'lastName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SalesSeriesSearchResultRecord'lastName
           (\ x__ y__ -> x__ {_SalesSeriesSearchResultRecord'lastName = y__}))
        Prelude.id
instance Data.ProtoLens.Message SalesSeriesSearchResultRecord where
  messageName _
    = Data.Text.pack "common_1.SalesSeriesSearchResultRecord"
  packedMessageDescriptor _
    = "\n\
      \\GSSalesSeriesSearchResultRecord\DC2&\n\
      \\SIsales_series_id\CAN\SOH \SOH(\tR\rsalesSeriesId\DC2*\n\
      \\DC1sales_series_name\CAN\STX \SOH(\tR\SIsalesSeriesName\DC2.\n\
      \\DC3sales_series_number\CAN\ETX \SOH(\tR\DC1salesSeriesNumber\DC2!\n\
      \\fbrokerage_id\CAN\EOT \SOH(\tR\vbrokerageId\DC2%\n\
      \\SObrokerage_name\CAN\ENQ \SOH(\tR\rbrokerageName\DC2\CAN\n\
      \\aremoved\CAN\ACK \SOH(\bR\aremoved\DC2\SYN\n\
      \\ACKemails\CAN\a \ETX(\tR\ACKemails\DC2\GS\n\
      \\n\
      \first_name\CAN\b \SOH(\tR\tfirstName\DC2\ESC\n\
      \\tlast_name\CAN\t \SOH(\tR\blastName"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        salesSeriesId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sales_series_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'salesSeriesId")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchResultRecord
        salesSeriesName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sales_series_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'salesSeriesName")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchResultRecord
        salesSeriesNumber__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sales_series_number"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'salesSeriesNumber")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchResultRecord
        brokerageId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "brokerage_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'brokerageId")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchResultRecord
        brokerageName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "brokerage_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'brokerageName")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchResultRecord
        removed__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "removed"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'removed")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchResultRecord
        emails__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "emails"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"emails")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchResultRecord
        firstName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "first_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'firstName")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchResultRecord
        lastName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "last_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lastName")) ::
              Data.ProtoLens.FieldDescriptor SalesSeriesSearchResultRecord
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, salesSeriesId__field_descriptor),
           (Data.ProtoLens.Tag 2, salesSeriesName__field_descriptor),
           (Data.ProtoLens.Tag 3, salesSeriesNumber__field_descriptor),
           (Data.ProtoLens.Tag 4, brokerageId__field_descriptor),
           (Data.ProtoLens.Tag 5, brokerageName__field_descriptor),
           (Data.ProtoLens.Tag 6, removed__field_descriptor),
           (Data.ProtoLens.Tag 7, emails__field_descriptor),
           (Data.ProtoLens.Tag 8, firstName__field_descriptor),
           (Data.ProtoLens.Tag 9, lastName__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _SalesSeriesSearchResultRecord'_unknownFields
        (\ x__ y__
           -> x__ {_SalesSeriesSearchResultRecord'_unknownFields = y__})
  defMessage
    = SalesSeriesSearchResultRecord'_constructor
        {_SalesSeriesSearchResultRecord'salesSeriesId = Prelude.Nothing,
         _SalesSeriesSearchResultRecord'salesSeriesName = Prelude.Nothing,
         _SalesSeriesSearchResultRecord'salesSeriesNumber = Prelude.Nothing,
         _SalesSeriesSearchResultRecord'brokerageId = Prelude.Nothing,
         _SalesSeriesSearchResultRecord'brokerageName = Prelude.Nothing,
         _SalesSeriesSearchResultRecord'removed = Prelude.Nothing,
         _SalesSeriesSearchResultRecord'emails = Data.Vector.Generic.empty,
         _SalesSeriesSearchResultRecord'firstName = Prelude.Nothing,
         _SalesSeriesSearchResultRecord'lastName = Prelude.Nothing,
         _SalesSeriesSearchResultRecord'_unknownFields = []}
  parseMessage
    = let
        loop ::
          SalesSeriesSearchResultRecord
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
             -> Data.ProtoLens.Encoding.Bytes.Parser SalesSeriesSearchResultRecord
        loop x mutable'emails
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'emails <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                            mutable'emails)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'emails") frozen'emails x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "sales_series_id"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"salesSeriesId") y x)
                                  mutable'emails
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "sales_series_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"salesSeriesName") y x)
                                  mutable'emails
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "sales_series_number"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"salesSeriesNumber") y x)
                                  mutable'emails
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "brokerage_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"brokerageId") y x)
                                  mutable'emails
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "brokerage_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"brokerageName") y x)
                                  mutable'emails
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "removed"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"removed") y x)
                                  mutable'emails
                        58
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getText
                                              (Prelude.fromIntegral len))
                                        "emails"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'emails y)
                                loop x v
                        66
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "first_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"firstName") y x)
                                  mutable'emails
                        74
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "last_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"lastName") y x)
                                  mutable'emails
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'emails
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'emails <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                  Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'emails)
          "SalesSeriesSearchResultRecord"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'salesSeriesId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'salesSeriesName") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'salesSeriesNumber") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'brokerageId") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8 _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'brokerageName") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8 _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'removed") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (\ b -> if b then 1 else 0) _v))
                            ((Data.Monoid.<>)
                               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                  (\ _v
                                     -> (Data.Monoid.<>)
                                          (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                          ((Prelude..)
                                             (\ bs
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (Prelude.fromIntegral
                                                           (Data.ByteString.length bs)))
                                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                             Data.Text.Encoding.encodeUtf8 _v))
                                  (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'emails") _x))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'firstName") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                                            ((Prelude..)
                                               (\ bs
                                                  -> (Data.Monoid.<>)
                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                          (Prelude.fromIntegral
                                                             (Data.ByteString.length bs)))
                                                       (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                               Data.Text.Encoding.encodeUtf8 _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'lastName") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                               ((Prelude..)
                                                  (\ bs
                                                     -> (Data.Monoid.<>)
                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                             (Prelude.fromIntegral
                                                                (Data.ByteString.length bs)))
                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                             bs))
                                                  Data.Text.Encoding.encodeUtf8 _v))
                                     (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                        (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))))
instance Control.DeepSeq.NFData SalesSeriesSearchResultRecord where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_SalesSeriesSearchResultRecord'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_SalesSeriesSearchResultRecord'salesSeriesId x__)
                (Control.DeepSeq.deepseq
                   (_SalesSeriesSearchResultRecord'salesSeriesName x__)
                   (Control.DeepSeq.deepseq
                      (_SalesSeriesSearchResultRecord'salesSeriesNumber x__)
                      (Control.DeepSeq.deepseq
                         (_SalesSeriesSearchResultRecord'brokerageId x__)
                         (Control.DeepSeq.deepseq
                            (_SalesSeriesSearchResultRecord'brokerageName x__)
                            (Control.DeepSeq.deepseq
                               (_SalesSeriesSearchResultRecord'removed x__)
                               (Control.DeepSeq.deepseq
                                  (_SalesSeriesSearchResultRecord'emails x__)
                                  (Control.DeepSeq.deepseq
                                     (_SalesSeriesSearchResultRecord'firstName x__)
                                     (Control.DeepSeq.deepseq
                                        (_SalesSeriesSearchResultRecord'lastName x__) ())))))))))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.text' @:: Lens' SearchOption Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'text' @:: Lens' SearchOption (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.criteria' @:: Lens' SearchOption [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'criteria' @:: Lens' SearchOption (Data.Vector.Unboxed.Vector Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.matchingRule' @:: Lens' SearchOption Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'matchingRule' @:: Lens' SearchOption (Prelude.Maybe Data.Word.Word32)@ -}
data SearchOption
  = SearchOption'_constructor {_SearchOption'text :: !(Prelude.Maybe Data.Text.Text),
                               _SearchOption'criteria :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                               _SearchOption'matchingRule :: !(Prelude.Maybe Data.Word.Word32),
                               _SearchOption'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SearchOption where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SearchOption "text" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SearchOption'text (\ x__ y__ -> x__ {_SearchOption'text = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SearchOption "maybe'text" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SearchOption'text (\ x__ y__ -> x__ {_SearchOption'text = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SearchOption "criteria" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SearchOption'criteria
           (\ x__ y__ -> x__ {_SearchOption'criteria = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField SearchOption "vec'criteria" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SearchOption'criteria
           (\ x__ y__ -> x__ {_SearchOption'criteria = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SearchOption "matchingRule" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SearchOption'matchingRule
           (\ x__ y__ -> x__ {_SearchOption'matchingRule = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField SearchOption "maybe'matchingRule" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SearchOption'matchingRule
           (\ x__ y__ -> x__ {_SearchOption'matchingRule = y__}))
        Prelude.id
instance Data.ProtoLens.Message SearchOption where
  messageName _ = Data.Text.pack "common_1.SearchOption"
  packedMessageDescriptor _
    = "\n\
      \\fSearchOption\DC2\DC2\n\
      \\EOTtext\CAN\SOH \SOH(\tR\EOTtext\DC2\SUB\n\
      \\bcriteria\CAN\STX \ETX(\rR\bcriteria\DC2#\n\
      \\rmatching_rule\CAN\ETX \SOH(\rR\fmatchingRule\"f\n\
      \\fMatchingRule\DC2\f\n\
      \\bCONTAINS\DLE\NUL\DC2\SI\n\
      \\vSTARTS_WITH\DLE\SOH\DC2\r\n\
      \\tENDS_WITH\DLE\STX\DC2\DC2\n\
      \\SOEXACT_EQUALITY\DLE\ETX\DC2\DC4\n\
      \\DLEIN_MATCHING_RULE\DLE\EOT"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        text__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "text"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'text")) ::
              Data.ProtoLens.FieldDescriptor SearchOption
        criteria__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "criteria"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"criteria")) ::
              Data.ProtoLens.FieldDescriptor SearchOption
        matchingRule__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "matching_rule"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'matchingRule")) ::
              Data.ProtoLens.FieldDescriptor SearchOption
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, text__field_descriptor),
           (Data.ProtoLens.Tag 2, criteria__field_descriptor),
           (Data.ProtoLens.Tag 3, matchingRule__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _SearchOption'_unknownFields
        (\ x__ y__ -> x__ {_SearchOption'_unknownFields = y__})
  defMessage
    = SearchOption'_constructor
        {_SearchOption'text = Prelude.Nothing,
         _SearchOption'criteria = Data.Vector.Generic.empty,
         _SearchOption'matchingRule = Prelude.Nothing,
         _SearchOption'_unknownFields = []}
  parseMessage
    = let
        loop ::
          SearchOption
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
             -> Data.ProtoLens.Encoding.Bytes.Parser SearchOption
        loop x mutable'criteria
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'criteria <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'criteria)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'criteria") frozen'criteria x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "text"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"text") y x)
                                  mutable'criteria
                        16
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "criteria"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'criteria y)
                                loop x v
                        18
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "criteria"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'criteria)
                                loop x y
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "matching_rule"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"matchingRule") y x)
                                  mutable'criteria
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'criteria
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'criteria <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'criteria)
          "SearchOption"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'text") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                           ((Prelude..)
                              Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'criteria") _x))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'matchingRule") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData SearchOption where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_SearchOption'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_SearchOption'text x__)
                (Control.DeepSeq.deepseq
                   (_SearchOption'criteria x__)
                   (Control.DeepSeq.deepseq (_SearchOption'matchingRule x__) ())))
data SearchOption'MatchingRule
  = SearchOption'CONTAINS |
    SearchOption'STARTS_WITH |
    SearchOption'ENDS_WITH |
    SearchOption'EXACT_EQUALITY |
    SearchOption'IN_MATCHING_RULE
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum SearchOption'MatchingRule where
  maybeToEnum 0 = Prelude.Just SearchOption'CONTAINS
  maybeToEnum 1 = Prelude.Just SearchOption'STARTS_WITH
  maybeToEnum 2 = Prelude.Just SearchOption'ENDS_WITH
  maybeToEnum 3 = Prelude.Just SearchOption'EXACT_EQUALITY
  maybeToEnum 4 = Prelude.Just SearchOption'IN_MATCHING_RULE
  maybeToEnum _ = Prelude.Nothing
  showEnum SearchOption'CONTAINS = "CONTAINS"
  showEnum SearchOption'STARTS_WITH = "STARTS_WITH"
  showEnum SearchOption'ENDS_WITH = "ENDS_WITH"
  showEnum SearchOption'EXACT_EQUALITY = "EXACT_EQUALITY"
  showEnum SearchOption'IN_MATCHING_RULE = "IN_MATCHING_RULE"
  readEnum k
    | (Prelude.==) k "CONTAINS" = Prelude.Just SearchOption'CONTAINS
    | (Prelude.==) k "STARTS_WITH"
    = Prelude.Just SearchOption'STARTS_WITH
    | (Prelude.==) k "ENDS_WITH" = Prelude.Just SearchOption'ENDS_WITH
    | (Prelude.==) k "EXACT_EQUALITY"
    = Prelude.Just SearchOption'EXACT_EQUALITY
    | (Prelude.==) k "IN_MATCHING_RULE"
    = Prelude.Just SearchOption'IN_MATCHING_RULE
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded SearchOption'MatchingRule where
  minBound = SearchOption'CONTAINS
  maxBound = SearchOption'IN_MATCHING_RULE
instance Prelude.Enum SearchOption'MatchingRule where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum MatchingRule: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum SearchOption'CONTAINS = 0
  fromEnum SearchOption'STARTS_WITH = 1
  fromEnum SearchOption'ENDS_WITH = 2
  fromEnum SearchOption'EXACT_EQUALITY = 3
  fromEnum SearchOption'IN_MATCHING_RULE = 4
  succ SearchOption'IN_MATCHING_RULE
    = Prelude.error
        "SearchOption'MatchingRule.succ: bad argument SearchOption'IN_MATCHING_RULE. This value would be out of bounds."
  succ SearchOption'CONTAINS = SearchOption'STARTS_WITH
  succ SearchOption'STARTS_WITH = SearchOption'ENDS_WITH
  succ SearchOption'ENDS_WITH = SearchOption'EXACT_EQUALITY
  succ SearchOption'EXACT_EQUALITY = SearchOption'IN_MATCHING_RULE
  pred SearchOption'CONTAINS
    = Prelude.error
        "SearchOption'MatchingRule.pred: bad argument SearchOption'CONTAINS. This value would be out of bounds."
  pred SearchOption'STARTS_WITH = SearchOption'CONTAINS
  pred SearchOption'ENDS_WITH = SearchOption'STARTS_WITH
  pred SearchOption'EXACT_EQUALITY = SearchOption'ENDS_WITH
  pred SearchOption'IN_MATCHING_RULE = SearchOption'EXACT_EQUALITY
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault SearchOption'MatchingRule where
  fieldDefault = SearchOption'CONTAINS
instance Control.DeepSeq.NFData SearchOption'MatchingRule where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.serviceId' @:: Lens' ServicePriceOverride Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'serviceId' @:: Lens' ServicePriceOverride (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.price' @:: Lens' ServicePriceOverride Price@
         * 'Proto.CMS.Common1_Fields.maybe'price' @:: Lens' ServicePriceOverride (Prelude.Maybe Price)@ -}
data ServicePriceOverride
  = ServicePriceOverride'_constructor {_ServicePriceOverride'serviceId :: !(Prelude.Maybe Data.Text.Text),
                                       _ServicePriceOverride'price :: !(Prelude.Maybe Price),
                                       _ServicePriceOverride'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show ServicePriceOverride where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField ServicePriceOverride "serviceId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ServicePriceOverride'serviceId
           (\ x__ y__ -> x__ {_ServicePriceOverride'serviceId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField ServicePriceOverride "maybe'serviceId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ServicePriceOverride'serviceId
           (\ x__ y__ -> x__ {_ServicePriceOverride'serviceId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField ServicePriceOverride "price" Price where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ServicePriceOverride'price
           (\ x__ y__ -> x__ {_ServicePriceOverride'price = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField ServicePriceOverride "maybe'price" (Prelude.Maybe Price) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _ServicePriceOverride'price
           (\ x__ y__ -> x__ {_ServicePriceOverride'price = y__}))
        Prelude.id
instance Data.ProtoLens.Message ServicePriceOverride where
  messageName _ = Data.Text.pack "common_1.ServicePriceOverride"
  packedMessageDescriptor _
    = "\n\
      \\DC4ServicePriceOverride\DC2\GS\n\
      \\n\
      \service_id\CAN\SOH \SOH(\tR\tserviceId\DC2%\n\
      \\ENQprice\CAN\STX \SOH(\v2\SI.common_1.PriceR\ENQprice"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        serviceId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "service_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'serviceId")) ::
              Data.ProtoLens.FieldDescriptor ServicePriceOverride
        price__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "price"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Price)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'price")) ::
              Data.ProtoLens.FieldDescriptor ServicePriceOverride
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, serviceId__field_descriptor),
           (Data.ProtoLens.Tag 2, price__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _ServicePriceOverride'_unknownFields
        (\ x__ y__ -> x__ {_ServicePriceOverride'_unknownFields = y__})
  defMessage
    = ServicePriceOverride'_constructor
        {_ServicePriceOverride'serviceId = Prelude.Nothing,
         _ServicePriceOverride'price = Prelude.Nothing,
         _ServicePriceOverride'_unknownFields = []}
  parseMessage
    = let
        loop ::
          ServicePriceOverride
          -> Data.ProtoLens.Encoding.Bytes.Parser ServicePriceOverride
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "service_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"serviceId") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "price"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"price") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "ServicePriceOverride"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'serviceId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'price") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData ServicePriceOverride where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_ServicePriceOverride'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_ServicePriceOverride'serviceId x__)
                (Control.DeepSeq.deepseq (_ServicePriceOverride'price x__) ()))
{- | Fields :
      -}
data TradingFeaturesRequest
  = TradingFeaturesRequest'_constructor {_TradingFeaturesRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TradingFeaturesRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message TradingFeaturesRequest where
  messageName _ = Data.Text.pack "common_1.TradingFeaturesRequest"
  packedMessageDescriptor _
    = "\n\
      \\SYNTradingFeaturesRequest"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TradingFeaturesRequest'_unknownFields
        (\ x__ y__ -> x__ {_TradingFeaturesRequest'_unknownFields = y__})
  defMessage
    = TradingFeaturesRequest'_constructor
        {_TradingFeaturesRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TradingFeaturesRequest
          -> Data.ProtoLens.Encoding.Bytes.Parser TradingFeaturesRequest
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "TradingFeaturesRequest"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData TradingFeaturesRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TradingFeaturesRequest'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.tradingInterfaceElements' @:: Lens' TradingFeaturesResult [TradingInterfaceElement]@
         * 'Proto.CMS.Common1_Fields.vec'tradingInterfaceElements' @:: Lens' TradingFeaturesResult (Data.Vector.Vector TradingInterfaceElement)@ -}
data TradingFeaturesResult
  = TradingFeaturesResult'_constructor {_TradingFeaturesResult'tradingInterfaceElements :: !(Data.Vector.Vector TradingInterfaceElement),
                                        _TradingFeaturesResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TradingFeaturesResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TradingFeaturesResult "tradingInterfaceElements" [TradingInterfaceElement] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TradingFeaturesResult'tradingInterfaceElements
           (\ x__ y__
              -> x__ {_TradingFeaturesResult'tradingInterfaceElements = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TradingFeaturesResult "vec'tradingInterfaceElements" (Data.Vector.Vector TradingInterfaceElement) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TradingFeaturesResult'tradingInterfaceElements
           (\ x__ y__
              -> x__ {_TradingFeaturesResult'tradingInterfaceElements = y__}))
        Prelude.id
instance Data.ProtoLens.Message TradingFeaturesResult where
  messageName _ = Data.Text.pack "common_1.TradingFeaturesResult"
  packedMessageDescriptor _
    = "\n\
      \\NAKTradingFeaturesResult\DC2_\n\
      \\SUBtrading_interface_elements\CAN\SOH \ETX(\v2!.common_1.TradingInterfaceElementR\CANtradingInterfaceElements"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        tradingInterfaceElements__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "trading_interface_elements"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TradingInterfaceElement)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"tradingInterfaceElements")) ::
              Data.ProtoLens.FieldDescriptor TradingFeaturesResult
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, 
            tradingInterfaceElements__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TradingFeaturesResult'_unknownFields
        (\ x__ y__ -> x__ {_TradingFeaturesResult'_unknownFields = y__})
  defMessage
    = TradingFeaturesResult'_constructor
        {_TradingFeaturesResult'tradingInterfaceElements = Data.Vector.Generic.empty,
         _TradingFeaturesResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TradingFeaturesResult
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld TradingInterfaceElement
             -> Data.ProtoLens.Encoding.Bytes.Parser TradingFeaturesResult
        loop x mutable'tradingInterfaceElements
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'tradingInterfaceElements <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                              mutable'tradingInterfaceElements)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'tradingInterfaceElements")
                              frozen'tradingInterfaceElements x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "trading_interface_elements"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'tradingInterfaceElements y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'tradingInterfaceElements
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'tradingInterfaceElements <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                    Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'tradingInterfaceElements)
          "TradingFeaturesResult"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'tradingInterfaceElements") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData TradingFeaturesResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TradingFeaturesResult'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TradingFeaturesResult'tradingInterfaceElements x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' TradingInterfaceElement Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'id' @:: Lens' TradingInterfaceElement (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.name' @:: Lens' TradingInterfaceElement Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.maybe'name' @:: Lens' TradingInterfaceElement (Prelude.Maybe Proto.Common.Shared1.Text)@
         * 'Proto.CMS.Common1_Fields.disableOnly' @:: Lens' TradingInterfaceElement Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'disableOnly' @:: Lens' TradingInterfaceElement (Prelude.Maybe Prelude.Bool)@ -}
data TradingInterfaceElement
  = TradingInterfaceElement'_constructor {_TradingInterfaceElement'id :: !(Prelude.Maybe Data.Text.Text),
                                          _TradingInterfaceElement'name :: !(Prelude.Maybe Proto.Common.Shared1.Text),
                                          _TradingInterfaceElement'disableOnly :: !(Prelude.Maybe Prelude.Bool),
                                          _TradingInterfaceElement'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TradingInterfaceElement where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TradingInterfaceElement "id" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TradingInterfaceElement'id
           (\ x__ y__ -> x__ {_TradingInterfaceElement'id = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TradingInterfaceElement "maybe'id" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TradingInterfaceElement'id
           (\ x__ y__ -> x__ {_TradingInterfaceElement'id = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TradingInterfaceElement "name" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TradingInterfaceElement'name
           (\ x__ y__ -> x__ {_TradingInterfaceElement'name = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField TradingInterfaceElement "maybe'name" (Prelude.Maybe Proto.Common.Shared1.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TradingInterfaceElement'name
           (\ x__ y__ -> x__ {_TradingInterfaceElement'name = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TradingInterfaceElement "disableOnly" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TradingInterfaceElement'disableOnly
           (\ x__ y__ -> x__ {_TradingInterfaceElement'disableOnly = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TradingInterfaceElement "maybe'disableOnly" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TradingInterfaceElement'disableOnly
           (\ x__ y__ -> x__ {_TradingInterfaceElement'disableOnly = y__}))
        Prelude.id
instance Data.ProtoLens.Message TradingInterfaceElement where
  messageName _ = Data.Text.pack "common_1.TradingInterfaceElement"
  packedMessageDescriptor _
    = "\n\
      \\ETBTradingInterfaceElement\DC2\SO\n\
      \\STXid\CAN\SOH \SOH(\tR\STXid\DC2\"\n\
      \\EOTname\CAN\STX \SOH(\v2\SO.shared_1.TextR\EOTname\DC2!\n\
      \\fdisable_only\CAN\ETX \SOH(\bR\vdisableOnly"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'id")) ::
              Data.ProtoLens.FieldDescriptor TradingInterfaceElement
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'name")) ::
              Data.ProtoLens.FieldDescriptor TradingInterfaceElement
        disableOnly__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "disable_only"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'disableOnly")) ::
              Data.ProtoLens.FieldDescriptor TradingInterfaceElement
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, id__field_descriptor),
           (Data.ProtoLens.Tag 2, name__field_descriptor),
           (Data.ProtoLens.Tag 3, disableOnly__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TradingInterfaceElement'_unknownFields
        (\ x__ y__ -> x__ {_TradingInterfaceElement'_unknownFields = y__})
  defMessage
    = TradingInterfaceElement'_constructor
        {_TradingInterfaceElement'id = Prelude.Nothing,
         _TradingInterfaceElement'name = Prelude.Nothing,
         _TradingInterfaceElement'disableOnly = Prelude.Nothing,
         _TradingInterfaceElement'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TradingInterfaceElement
          -> Data.ProtoLens.Encoding.Bytes.Parser TradingInterfaceElement
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "id"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "name"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "disable_only"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"disableOnly") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "TradingInterfaceElement"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'id") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'name") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'disableOnly") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt (\ b -> if b then 1 else 0)
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData TradingInterfaceElement where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TradingInterfaceElement'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TradingInterfaceElement'id x__)
                (Control.DeepSeq.deepseq
                   (_TradingInterfaceElement'name x__)
                   (Control.DeepSeq.deepseq
                      (_TradingInterfaceElement'disableOnly x__) ())))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.first' @:: Lens' Tuple Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'first' @:: Lens' Tuple (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.second' @:: Lens' Tuple Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'second' @:: Lens' Tuple (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.third' @:: Lens' Tuple Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'third' @:: Lens' Tuple (Prelude.Maybe Data.Text.Text)@ -}
data Tuple
  = Tuple'_constructor {_Tuple'first :: !(Prelude.Maybe Data.Text.Text),
                        _Tuple'second :: !(Prelude.Maybe Data.Text.Text),
                        _Tuple'third :: !(Prelude.Maybe Data.Text.Text),
                        _Tuple'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show Tuple where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField Tuple "first" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Tuple'first (\ x__ y__ -> x__ {_Tuple'first = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Tuple "maybe'first" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Tuple'first (\ x__ y__ -> x__ {_Tuple'first = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Tuple "second" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Tuple'second (\ x__ y__ -> x__ {_Tuple'second = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Tuple "maybe'second" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Tuple'second (\ x__ y__ -> x__ {_Tuple'second = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField Tuple "third" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Tuple'third (\ x__ y__ -> x__ {_Tuple'third = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField Tuple "maybe'third" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _Tuple'third (\ x__ y__ -> x__ {_Tuple'third = y__}))
        Prelude.id
instance Data.ProtoLens.Message Tuple where
  messageName _ = Data.Text.pack "common_1.Tuple"
  packedMessageDescriptor _
    = "\n\
      \\ENQTuple\DC2\DC4\n\
      \\ENQfirst\CAN\SOH \SOH(\tR\ENQfirst\DC2\SYN\n\
      \\ACKsecond\CAN\STX \SOH(\tR\ACKsecond\DC2\DC4\n\
      \\ENQthird\CAN\ETX \SOH(\tR\ENQthird"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        first__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "first"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'first")) ::
              Data.ProtoLens.FieldDescriptor Tuple
        second__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "second"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'second")) ::
              Data.ProtoLens.FieldDescriptor Tuple
        third__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "third"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'third")) ::
              Data.ProtoLens.FieldDescriptor Tuple
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, first__field_descriptor),
           (Data.ProtoLens.Tag 2, second__field_descriptor),
           (Data.ProtoLens.Tag 3, third__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _Tuple'_unknownFields
        (\ x__ y__ -> x__ {_Tuple'_unknownFields = y__})
  defMessage
    = Tuple'_constructor
        {_Tuple'first = Prelude.Nothing, _Tuple'second = Prelude.Nothing,
         _Tuple'third = Prelude.Nothing, _Tuple'_unknownFields = []}
  parseMessage
    = let
        loop :: Tuple -> Data.ProtoLens.Encoding.Bytes.Parser Tuple
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "first"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"first") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "second"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"second") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "third"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"third") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "Tuple"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'first") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'second") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'third") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData Tuple where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_Tuple'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_Tuple'first x__)
                (Control.DeepSeq.deepseq
                   (_Tuple'second x__)
                   (Control.DeepSeq.deepseq (_Tuple'third x__) ())))
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.linksToSet' @:: Lens' UpdateCustomerSalesSeriesAuthorizationList [CustomerSalesSeriesLink]@
         * 'Proto.CMS.Common1_Fields.vec'linksToSet' @:: Lens' UpdateCustomerSalesSeriesAuthorizationList (Data.Vector.Vector CustomerSalesSeriesLink)@
         * 'Proto.CMS.Common1_Fields.linksToRemove' @:: Lens' UpdateCustomerSalesSeriesAuthorizationList [Tuple]@
         * 'Proto.CMS.Common1_Fields.vec'linksToRemove' @:: Lens' UpdateCustomerSalesSeriesAuthorizationList (Data.Vector.Vector Tuple)@ -}
data UpdateCustomerSalesSeriesAuthorizationList
  = UpdateCustomerSalesSeriesAuthorizationList'_constructor {_UpdateCustomerSalesSeriesAuthorizationList'linksToSet :: !(Data.Vector.Vector CustomerSalesSeriesLink),
                                                             _UpdateCustomerSalesSeriesAuthorizationList'linksToRemove :: !(Data.Vector.Vector Tuple),
                                                             _UpdateCustomerSalesSeriesAuthorizationList'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UpdateCustomerSalesSeriesAuthorizationList where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField UpdateCustomerSalesSeriesAuthorizationList "linksToSet" [CustomerSalesSeriesLink] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateCustomerSalesSeriesAuthorizationList'linksToSet
           (\ x__ y__
              -> x__
                   {_UpdateCustomerSalesSeriesAuthorizationList'linksToSet = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField UpdateCustomerSalesSeriesAuthorizationList "vec'linksToSet" (Data.Vector.Vector CustomerSalesSeriesLink) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateCustomerSalesSeriesAuthorizationList'linksToSet
           (\ x__ y__
              -> x__
                   {_UpdateCustomerSalesSeriesAuthorizationList'linksToSet = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UpdateCustomerSalesSeriesAuthorizationList "linksToRemove" [Tuple] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateCustomerSalesSeriesAuthorizationList'linksToRemove
           (\ x__ y__
              -> x__
                   {_UpdateCustomerSalesSeriesAuthorizationList'linksToRemove = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField UpdateCustomerSalesSeriesAuthorizationList "vec'linksToRemove" (Data.Vector.Vector Tuple) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateCustomerSalesSeriesAuthorizationList'linksToRemove
           (\ x__ y__
              -> x__
                   {_UpdateCustomerSalesSeriesAuthorizationList'linksToRemove = y__}))
        Prelude.id
instance Data.ProtoLens.Message UpdateCustomerSalesSeriesAuthorizationList where
  messageName _
    = Data.Text.pack
        "common_1.UpdateCustomerSalesSeriesAuthorizationList"
  packedMessageDescriptor _
    = "\n\
      \*UpdateCustomerSalesSeriesAuthorizationList\DC2C\n\
      \\flinks_to_set\CAN\SOH \ETX(\v2!.common_1.CustomerSalesSeriesLinkR\n\
      \linksToSet\DC27\n\
      \\SIlinks_to_remove\CAN\STX \ETX(\v2\SI.common_1.TupleR\rlinksToRemove"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        linksToSet__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "links_to_set"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CustomerSalesSeriesLink)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"linksToSet")) ::
              Data.ProtoLens.FieldDescriptor UpdateCustomerSalesSeriesAuthorizationList
        linksToRemove__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "links_to_remove"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Tuple)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"linksToRemove")) ::
              Data.ProtoLens.FieldDescriptor UpdateCustomerSalesSeriesAuthorizationList
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, linksToSet__field_descriptor),
           (Data.ProtoLens.Tag 2, linksToRemove__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UpdateCustomerSalesSeriesAuthorizationList'_unknownFields
        (\ x__ y__
           -> x__
                {_UpdateCustomerSalesSeriesAuthorizationList'_unknownFields = y__})
  defMessage
    = UpdateCustomerSalesSeriesAuthorizationList'_constructor
        {_UpdateCustomerSalesSeriesAuthorizationList'linksToSet = Data.Vector.Generic.empty,
         _UpdateCustomerSalesSeriesAuthorizationList'linksToRemove = Data.Vector.Generic.empty,
         _UpdateCustomerSalesSeriesAuthorizationList'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UpdateCustomerSalesSeriesAuthorizationList
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Tuple
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld CustomerSalesSeriesLink
                -> Data.ProtoLens.Encoding.Bytes.Parser UpdateCustomerSalesSeriesAuthorizationList
        loop x mutable'linksToRemove mutable'linksToSet
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'linksToRemove <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                   mutable'linksToRemove)
                      frozen'linksToSet <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'linksToSet)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'linksToRemove")
                              frozen'linksToRemove
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'linksToSet") frozen'linksToSet
                                 x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "links_to_set"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'linksToSet y)
                                loop x mutable'linksToRemove v
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "links_to_remove"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'linksToRemove y)
                                loop x v mutable'linksToSet
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'linksToRemove mutable'linksToSet
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'linksToRemove <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         Data.ProtoLens.Encoding.Growing.new
              mutable'linksToSet <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage mutable'linksToRemove mutable'linksToSet)
          "UpdateCustomerSalesSeriesAuthorizationList"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'linksToSet") _x))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'linksToRemove") _x))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData UpdateCustomerSalesSeriesAuthorizationList where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UpdateCustomerSalesSeriesAuthorizationList'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_UpdateCustomerSalesSeriesAuthorizationList'linksToSet x__)
                (Control.DeepSeq.deepseq
                   (_UpdateCustomerSalesSeriesAuthorizationList'linksToRemove x__)
                   ()))
{- | Fields :
      -}
data UpdateCustomerSalesSeriesAuthorizationListResult
  = UpdateCustomerSalesSeriesAuthorizationListResult'_constructor {_UpdateCustomerSalesSeriesAuthorizationListResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UpdateCustomerSalesSeriesAuthorizationListResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message UpdateCustomerSalesSeriesAuthorizationListResult where
  messageName _
    = Data.Text.pack
        "common_1.UpdateCustomerSalesSeriesAuthorizationListResult"
  packedMessageDescriptor _
    = "\n\
      \0UpdateCustomerSalesSeriesAuthorizationListResult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UpdateCustomerSalesSeriesAuthorizationListResult'_unknownFields
        (\ x__ y__
           -> x__
                {_UpdateCustomerSalesSeriesAuthorizationListResult'_unknownFields = y__})
  defMessage
    = UpdateCustomerSalesSeriesAuthorizationListResult'_constructor
        {_UpdateCustomerSalesSeriesAuthorizationListResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UpdateCustomerSalesSeriesAuthorizationListResult
          -> Data.ProtoLens.Encoding.Bytes.Parser UpdateCustomerSalesSeriesAuthorizationListResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "UpdateCustomerSalesSeriesAuthorizationListResult"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData UpdateCustomerSalesSeriesAuthorizationListResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UpdateCustomerSalesSeriesAuthorizationListResult'_unknownFields
                x__)
             ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.linksToSet' @:: Lens' UpdateEntityLinks [Tuple]@
         * 'Proto.CMS.Common1_Fields.vec'linksToSet' @:: Lens' UpdateEntityLinks (Data.Vector.Vector Tuple)@
         * 'Proto.CMS.Common1_Fields.linksToRemove' @:: Lens' UpdateEntityLinks [Tuple]@
         * 'Proto.CMS.Common1_Fields.vec'linksToRemove' @:: Lens' UpdateEntityLinks (Data.Vector.Vector Tuple)@ -}
data UpdateEntityLinks
  = UpdateEntityLinks'_constructor {_UpdateEntityLinks'linksToSet :: !(Data.Vector.Vector Tuple),
                                    _UpdateEntityLinks'linksToRemove :: !(Data.Vector.Vector Tuple),
                                    _UpdateEntityLinks'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UpdateEntityLinks where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField UpdateEntityLinks "linksToSet" [Tuple] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateEntityLinks'linksToSet
           (\ x__ y__ -> x__ {_UpdateEntityLinks'linksToSet = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField UpdateEntityLinks "vec'linksToSet" (Data.Vector.Vector Tuple) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateEntityLinks'linksToSet
           (\ x__ y__ -> x__ {_UpdateEntityLinks'linksToSet = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UpdateEntityLinks "linksToRemove" [Tuple] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateEntityLinks'linksToRemove
           (\ x__ y__ -> x__ {_UpdateEntityLinks'linksToRemove = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField UpdateEntityLinks "vec'linksToRemove" (Data.Vector.Vector Tuple) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateEntityLinks'linksToRemove
           (\ x__ y__ -> x__ {_UpdateEntityLinks'linksToRemove = y__}))
        Prelude.id
instance Data.ProtoLens.Message UpdateEntityLinks where
  messageName _ = Data.Text.pack "common_1.UpdateEntityLinks"
  packedMessageDescriptor _
    = "\n\
      \\DC1UpdateEntityLinks\DC21\n\
      \\flinks_to_set\CAN\SOH \ETX(\v2\SI.common_1.TupleR\n\
      \linksToSet\DC27\n\
      \\SIlinks_to_remove\CAN\STX \ETX(\v2\SI.common_1.TupleR\rlinksToRemove"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        linksToSet__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "links_to_set"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Tuple)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"linksToSet")) ::
              Data.ProtoLens.FieldDescriptor UpdateEntityLinks
        linksToRemove__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "links_to_remove"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Tuple)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"linksToRemove")) ::
              Data.ProtoLens.FieldDescriptor UpdateEntityLinks
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, linksToSet__field_descriptor),
           (Data.ProtoLens.Tag 2, linksToRemove__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UpdateEntityLinks'_unknownFields
        (\ x__ y__ -> x__ {_UpdateEntityLinks'_unknownFields = y__})
  defMessage
    = UpdateEntityLinks'_constructor
        {_UpdateEntityLinks'linksToSet = Data.Vector.Generic.empty,
         _UpdateEntityLinks'linksToRemove = Data.Vector.Generic.empty,
         _UpdateEntityLinks'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UpdateEntityLinks
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Tuple
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Tuple
                -> Data.ProtoLens.Encoding.Bytes.Parser UpdateEntityLinks
        loop x mutable'linksToRemove mutable'linksToSet
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'linksToRemove <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                   mutable'linksToRemove)
                      frozen'linksToSet <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'linksToSet)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'linksToRemove")
                              frozen'linksToRemove
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'linksToSet") frozen'linksToSet
                                 x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "links_to_set"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'linksToSet y)
                                loop x mutable'linksToRemove v
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "links_to_remove"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'linksToRemove y)
                                loop x v mutable'linksToSet
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'linksToRemove mutable'linksToSet
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'linksToRemove <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         Data.ProtoLens.Encoding.Growing.new
              mutable'linksToSet <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage mutable'linksToRemove mutable'linksToSet)
          "UpdateEntityLinks"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'linksToSet") _x))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'linksToRemove") _x))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData UpdateEntityLinks where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UpdateEntityLinks'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_UpdateEntityLinks'linksToSet x__)
                (Control.DeepSeq.deepseq
                   (_UpdateEntityLinks'linksToRemove x__) ()))
{- | Fields :
      -}
data UpdateEntityLinksResult
  = UpdateEntityLinksResult'_constructor {_UpdateEntityLinksResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UpdateEntityLinksResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message UpdateEntityLinksResult where
  messageName _ = Data.Text.pack "common_1.UpdateEntityLinksResult"
  packedMessageDescriptor _
    = "\n\
      \\ETBUpdateEntityLinksResult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UpdateEntityLinksResult'_unknownFields
        (\ x__ y__ -> x__ {_UpdateEntityLinksResult'_unknownFields = y__})
  defMessage
    = UpdateEntityLinksResult'_constructor
        {_UpdateEntityLinksResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UpdateEntityLinksResult
          -> Data.ProtoLens.Encoding.Bytes.Parser UpdateEntityLinksResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "UpdateEntityLinksResult"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData UpdateEntityLinksResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UpdateEntityLinksResult'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginId' @:: Lens' UpdateLoginBillingCustomData Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'loginId' @:: Lens' UpdateLoginBillingCustomData (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.loginBillingCustomData' @:: Lens' UpdateLoginBillingCustomData [LoginBillingCustomData]@
         * 'Proto.CMS.Common1_Fields.vec'loginBillingCustomData' @:: Lens' UpdateLoginBillingCustomData (Data.Vector.Vector LoginBillingCustomData)@ -}
data UpdateLoginBillingCustomData
  = UpdateLoginBillingCustomData'_constructor {_UpdateLoginBillingCustomData'loginId :: !(Prelude.Maybe Data.Text.Text),
                                               _UpdateLoginBillingCustomData'loginBillingCustomData :: !(Data.Vector.Vector LoginBillingCustomData),
                                               _UpdateLoginBillingCustomData'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UpdateLoginBillingCustomData where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField UpdateLoginBillingCustomData "loginId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateLoginBillingCustomData'loginId
           (\ x__ y__ -> x__ {_UpdateLoginBillingCustomData'loginId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UpdateLoginBillingCustomData "maybe'loginId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateLoginBillingCustomData'loginId
           (\ x__ y__ -> x__ {_UpdateLoginBillingCustomData'loginId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UpdateLoginBillingCustomData "loginBillingCustomData" [LoginBillingCustomData] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateLoginBillingCustomData'loginBillingCustomData
           (\ x__ y__
              -> x__
                   {_UpdateLoginBillingCustomData'loginBillingCustomData = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField UpdateLoginBillingCustomData "vec'loginBillingCustomData" (Data.Vector.Vector LoginBillingCustomData) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateLoginBillingCustomData'loginBillingCustomData
           (\ x__ y__
              -> x__
                   {_UpdateLoginBillingCustomData'loginBillingCustomData = y__}))
        Prelude.id
instance Data.ProtoLens.Message UpdateLoginBillingCustomData where
  messageName _
    = Data.Text.pack "common_1.UpdateLoginBillingCustomData"
  packedMessageDescriptor _
    = "\n\
      \\FSUpdateLoginBillingCustomData\DC2\EM\n\
      \\blogin_id\CAN\SOH \SOH(\tR\aloginId\DC2[\n\
      \\EMlogin_billing_custom_data\CAN\STX \ETX(\v2 .common_1.LoginBillingCustomDataR\SYNloginBillingCustomData"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'loginId")) ::
              Data.ProtoLens.FieldDescriptor UpdateLoginBillingCustomData
        loginBillingCustomData__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_billing_custom_data"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor LoginBillingCustomData)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"loginBillingCustomData")) ::
              Data.ProtoLens.FieldDescriptor UpdateLoginBillingCustomData
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginId__field_descriptor),
           (Data.ProtoLens.Tag 2, loginBillingCustomData__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UpdateLoginBillingCustomData'_unknownFields
        (\ x__ y__
           -> x__ {_UpdateLoginBillingCustomData'_unknownFields = y__})
  defMessage
    = UpdateLoginBillingCustomData'_constructor
        {_UpdateLoginBillingCustomData'loginId = Prelude.Nothing,
         _UpdateLoginBillingCustomData'loginBillingCustomData = Data.Vector.Generic.empty,
         _UpdateLoginBillingCustomData'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UpdateLoginBillingCustomData
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld LoginBillingCustomData
             -> Data.ProtoLens.Encoding.Bytes.Parser UpdateLoginBillingCustomData
        loop x mutable'loginBillingCustomData
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'loginBillingCustomData <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                         (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                            mutable'loginBillingCustomData)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'loginBillingCustomData")
                              frozen'loginBillingCustomData x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "login_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"loginId") y x)
                                  mutable'loginBillingCustomData
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "login_billing_custom_data"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'loginBillingCustomData y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'loginBillingCustomData
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'loginBillingCustomData <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                  Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'loginBillingCustomData)
          "UpdateLoginBillingCustomData"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'loginId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'loginBillingCustomData") _x))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData UpdateLoginBillingCustomData where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UpdateLoginBillingCustomData'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_UpdateLoginBillingCustomData'loginId x__)
                (Control.DeepSeq.deepseq
                   (_UpdateLoginBillingCustomData'loginBillingCustomData x__) ()))
{- | Fields :
      -}
data UpdateLoginBillingCustomDataResult
  = UpdateLoginBillingCustomDataResult'_constructor {_UpdateLoginBillingCustomDataResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UpdateLoginBillingCustomDataResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message UpdateLoginBillingCustomDataResult where
  messageName _
    = Data.Text.pack "common_1.UpdateLoginBillingCustomDataResult"
  packedMessageDescriptor _
    = "\n\
      \\"UpdateLoginBillingCustomDataResult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UpdateLoginBillingCustomDataResult'_unknownFields
        (\ x__ y__
           -> x__ {_UpdateLoginBillingCustomDataResult'_unknownFields = y__})
  defMessage
    = UpdateLoginBillingCustomDataResult'_constructor
        {_UpdateLoginBillingCustomDataResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UpdateLoginBillingCustomDataResult
          -> Data.ProtoLens.Encoding.Bytes.Parser UpdateLoginBillingCustomDataResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "UpdateLoginBillingCustomDataResult"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData UpdateLoginBillingCustomDataResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UpdateLoginBillingCustomDataResult'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginId' @:: Lens' UpdateLoginExchangeMemberIdList Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'loginId' @:: Lens' UpdateLoginExchangeMemberIdList (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.memberIdsToSet' @:: Lens' UpdateLoginExchangeMemberIdList [LoginExchangeMemberId]@
         * 'Proto.CMS.Common1_Fields.vec'memberIdsToSet' @:: Lens' UpdateLoginExchangeMemberIdList (Data.Vector.Vector LoginExchangeMemberId)@
         * 'Proto.CMS.Common1_Fields.memberIdsToRemove' @:: Lens' UpdateLoginExchangeMemberIdList [Tuple]@
         * 'Proto.CMS.Common1_Fields.vec'memberIdsToRemove' @:: Lens' UpdateLoginExchangeMemberIdList (Data.Vector.Vector Tuple)@ -}
data UpdateLoginExchangeMemberIdList
  = UpdateLoginExchangeMemberIdList'_constructor {_UpdateLoginExchangeMemberIdList'loginId :: !(Prelude.Maybe Data.Text.Text),
                                                  _UpdateLoginExchangeMemberIdList'memberIdsToSet :: !(Data.Vector.Vector LoginExchangeMemberId),
                                                  _UpdateLoginExchangeMemberIdList'memberIdsToRemove :: !(Data.Vector.Vector Tuple),
                                                  _UpdateLoginExchangeMemberIdList'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UpdateLoginExchangeMemberIdList where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField UpdateLoginExchangeMemberIdList "loginId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateLoginExchangeMemberIdList'loginId
           (\ x__ y__
              -> x__ {_UpdateLoginExchangeMemberIdList'loginId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UpdateLoginExchangeMemberIdList "maybe'loginId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateLoginExchangeMemberIdList'loginId
           (\ x__ y__
              -> x__ {_UpdateLoginExchangeMemberIdList'loginId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UpdateLoginExchangeMemberIdList "memberIdsToSet" [LoginExchangeMemberId] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateLoginExchangeMemberIdList'memberIdsToSet
           (\ x__ y__
              -> x__ {_UpdateLoginExchangeMemberIdList'memberIdsToSet = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField UpdateLoginExchangeMemberIdList "vec'memberIdsToSet" (Data.Vector.Vector LoginExchangeMemberId) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateLoginExchangeMemberIdList'memberIdsToSet
           (\ x__ y__
              -> x__ {_UpdateLoginExchangeMemberIdList'memberIdsToSet = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UpdateLoginExchangeMemberIdList "memberIdsToRemove" [Tuple] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateLoginExchangeMemberIdList'memberIdsToRemove
           (\ x__ y__
              -> x__ {_UpdateLoginExchangeMemberIdList'memberIdsToRemove = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField UpdateLoginExchangeMemberIdList "vec'memberIdsToRemove" (Data.Vector.Vector Tuple) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateLoginExchangeMemberIdList'memberIdsToRemove
           (\ x__ y__
              -> x__ {_UpdateLoginExchangeMemberIdList'memberIdsToRemove = y__}))
        Prelude.id
instance Data.ProtoLens.Message UpdateLoginExchangeMemberIdList where
  messageName _
    = Data.Text.pack "common_1.UpdateLoginExchangeMemberIdList"
  packedMessageDescriptor _
    = "\n\
      \\USUpdateLoginExchangeMemberIdList\DC2\EM\n\
      \\blogin_id\CAN\SOH \SOH(\tR\aloginId\DC2J\n\
      \\DC1member_ids_to_set\CAN\STX \ETX(\v2\US.common_1.LoginExchangeMemberIdR\SOmemberIdsToSet\DC2@\n\
      \\DC4member_ids_to_remove\CAN\ETX \ETX(\v2\SI.common_1.TupleR\DC1memberIdsToRemove"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'loginId")) ::
              Data.ProtoLens.FieldDescriptor UpdateLoginExchangeMemberIdList
        memberIdsToSet__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "member_ids_to_set"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor LoginExchangeMemberId)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"memberIdsToSet")) ::
              Data.ProtoLens.FieldDescriptor UpdateLoginExchangeMemberIdList
        memberIdsToRemove__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "member_ids_to_remove"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Tuple)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"memberIdsToRemove")) ::
              Data.ProtoLens.FieldDescriptor UpdateLoginExchangeMemberIdList
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginId__field_descriptor),
           (Data.ProtoLens.Tag 2, memberIdsToSet__field_descriptor),
           (Data.ProtoLens.Tag 3, memberIdsToRemove__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UpdateLoginExchangeMemberIdList'_unknownFields
        (\ x__ y__
           -> x__ {_UpdateLoginExchangeMemberIdList'_unknownFields = y__})
  defMessage
    = UpdateLoginExchangeMemberIdList'_constructor
        {_UpdateLoginExchangeMemberIdList'loginId = Prelude.Nothing,
         _UpdateLoginExchangeMemberIdList'memberIdsToSet = Data.Vector.Generic.empty,
         _UpdateLoginExchangeMemberIdList'memberIdsToRemove = Data.Vector.Generic.empty,
         _UpdateLoginExchangeMemberIdList'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UpdateLoginExchangeMemberIdList
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Tuple
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld LoginExchangeMemberId
                -> Data.ProtoLens.Encoding.Bytes.Parser UpdateLoginExchangeMemberIdList
        loop x mutable'memberIdsToRemove mutable'memberIdsToSet
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'memberIdsToRemove <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                    (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                       mutable'memberIdsToRemove)
                      frozen'memberIdsToSet <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                    mutable'memberIdsToSet)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'memberIdsToRemove")
                              frozen'memberIdsToRemove
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'memberIdsToSet")
                                 frozen'memberIdsToSet x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "login_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"loginId") y x)
                                  mutable'memberIdsToRemove mutable'memberIdsToSet
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "member_ids_to_set"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'memberIdsToSet y)
                                loop x mutable'memberIdsToRemove v
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "member_ids_to_remove"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'memberIdsToRemove y)
                                loop x v mutable'memberIdsToSet
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'memberIdsToRemove mutable'memberIdsToSet
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'memberIdsToRemove <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             Data.ProtoLens.Encoding.Growing.new
              mutable'memberIdsToSet <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage mutable'memberIdsToRemove
                mutable'memberIdsToSet)
          "UpdateLoginExchangeMemberIdList"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'loginId") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'memberIdsToSet") _x))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                              ((Prelude..)
                                 (\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Data.ProtoLens.encodeMessage _v))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'memberIdsToRemove") _x))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData UpdateLoginExchangeMemberIdList where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UpdateLoginExchangeMemberIdList'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_UpdateLoginExchangeMemberIdList'loginId x__)
                (Control.DeepSeq.deepseq
                   (_UpdateLoginExchangeMemberIdList'memberIdsToSet x__)
                   (Control.DeepSeq.deepseq
                      (_UpdateLoginExchangeMemberIdList'memberIdsToRemove x__) ())))
{- | Fields :
      -}
data UpdateLoginExchangeMemberIdListResult
  = UpdateLoginExchangeMemberIdListResult'_constructor {_UpdateLoginExchangeMemberIdListResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UpdateLoginExchangeMemberIdListResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message UpdateLoginExchangeMemberIdListResult where
  messageName _
    = Data.Text.pack "common_1.UpdateLoginExchangeMemberIdListResult"
  packedMessageDescriptor _
    = "\n\
      \%UpdateLoginExchangeMemberIdListResult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UpdateLoginExchangeMemberIdListResult'_unknownFields
        (\ x__ y__
           -> x__
                {_UpdateLoginExchangeMemberIdListResult'_unknownFields = y__})
  defMessage
    = UpdateLoginExchangeMemberIdListResult'_constructor
        {_UpdateLoginExchangeMemberIdListResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UpdateLoginExchangeMemberIdListResult
          -> Data.ProtoLens.Encoding.Bytes.Parser UpdateLoginExchangeMemberIdListResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage)
          "UpdateLoginExchangeMemberIdListResult"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData UpdateLoginExchangeMemberIdListResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UpdateLoginExchangeMemberIdListResult'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.loginSettings' @:: Lens' UpdateLoginSettings LoginSettings@
         * 'Proto.CMS.Common1_Fields.maybe'loginSettings' @:: Lens' UpdateLoginSettings (Prelude.Maybe LoginSettings)@ -}
data UpdateLoginSettings
  = UpdateLoginSettings'_constructor {_UpdateLoginSettings'loginSettings :: !(Prelude.Maybe LoginSettings),
                                      _UpdateLoginSettings'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UpdateLoginSettings where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField UpdateLoginSettings "loginSettings" LoginSettings where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateLoginSettings'loginSettings
           (\ x__ y__ -> x__ {_UpdateLoginSettings'loginSettings = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField UpdateLoginSettings "maybe'loginSettings" (Prelude.Maybe LoginSettings) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateLoginSettings'loginSettings
           (\ x__ y__ -> x__ {_UpdateLoginSettings'loginSettings = y__}))
        Prelude.id
instance Data.ProtoLens.Message UpdateLoginSettings where
  messageName _ = Data.Text.pack "common_1.UpdateLoginSettings"
  packedMessageDescriptor _
    = "\n\
      \\DC3UpdateLoginSettings\DC2>\n\
      \\SOlogin_settings\CAN\SOH \SOH(\v2\ETB.common_1.LoginSettingsR\rloginSettings"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        loginSettings__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "login_settings"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor LoginSettings)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'loginSettings")) ::
              Data.ProtoLens.FieldDescriptor UpdateLoginSettings
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, loginSettings__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UpdateLoginSettings'_unknownFields
        (\ x__ y__ -> x__ {_UpdateLoginSettings'_unknownFields = y__})
  defMessage
    = UpdateLoginSettings'_constructor
        {_UpdateLoginSettings'loginSettings = Prelude.Nothing,
         _UpdateLoginSettings'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UpdateLoginSettings
          -> Data.ProtoLens.Encoding.Bytes.Parser UpdateLoginSettings
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "login_settings"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"loginSettings") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "UpdateLoginSettings"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'loginSettings") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData UpdateLoginSettings where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UpdateLoginSettings'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_UpdateLoginSettings'loginSettings x__) ())
{- | Fields :
      -}
data UpdateLoginSettingsResult
  = UpdateLoginSettingsResult'_constructor {_UpdateLoginSettingsResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UpdateLoginSettingsResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message UpdateLoginSettingsResult where
  messageName _ = Data.Text.pack "common_1.UpdateLoginSettingsResult"
  packedMessageDescriptor _
    = "\n\
      \\EMUpdateLoginSettingsResult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UpdateLoginSettingsResult'_unknownFields
        (\ x__ y__
           -> x__ {_UpdateLoginSettingsResult'_unknownFields = y__})
  defMessage
    = UpdateLoginSettingsResult'_constructor
        {_UpdateLoginSettingsResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UpdateLoginSettingsResult
          -> Data.ProtoLens.Encoding.Bytes.Parser UpdateLoginSettingsResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "UpdateLoginSettingsResult"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData UpdateLoginSettingsResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UpdateLoginSettingsResult'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.user' @:: Lens' UpdateUser User@
         * 'Proto.CMS.Common1_Fields.maybe'user' @:: Lens' UpdateUser (Prelude.Maybe User)@
         * 'Proto.CMS.Common1_Fields.obsoleteOriginalUser' @:: Lens' UpdateUser User@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteOriginalUser' @:: Lens' UpdateUser (Prelude.Maybe User)@ -}
data UpdateUser
  = UpdateUser'_constructor {_UpdateUser'user :: !(Prelude.Maybe User),
                             _UpdateUser'obsoleteOriginalUser :: !(Prelude.Maybe User),
                             _UpdateUser'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UpdateUser where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField UpdateUser "user" User where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateUser'user (\ x__ y__ -> x__ {_UpdateUser'user = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField UpdateUser "maybe'user" (Prelude.Maybe User) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateUser'user (\ x__ y__ -> x__ {_UpdateUser'user = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UpdateUser "obsoleteOriginalUser" User where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateUser'obsoleteOriginalUser
           (\ x__ y__ -> x__ {_UpdateUser'obsoleteOriginalUser = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField UpdateUser "maybe'obsoleteOriginalUser" (Prelude.Maybe User) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UpdateUser'obsoleteOriginalUser
           (\ x__ y__ -> x__ {_UpdateUser'obsoleteOriginalUser = y__}))
        Prelude.id
instance Data.ProtoLens.Message UpdateUser where
  messageName _ = Data.Text.pack "common_1.UpdateUser"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \UpdateUser\DC2\"\n\
      \\EOTuser\CAN\SOH \SOH(\v2\SO.common_1.UserR\EOTuser\DC2H\n\
      \\SYNobsolete_original_user\CAN\STX \SOH(\v2\SO.common_1.UserR\DC4obsoleteOriginalUserB\STX\CAN\SOH"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        user__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "user"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor User)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'user")) ::
              Data.ProtoLens.FieldDescriptor UpdateUser
        obsoleteOriginalUser__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_original_user"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor User)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsoleteOriginalUser")) ::
              Data.ProtoLens.FieldDescriptor UpdateUser
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, user__field_descriptor),
           (Data.ProtoLens.Tag 2, obsoleteOriginalUser__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UpdateUser'_unknownFields
        (\ x__ y__ -> x__ {_UpdateUser'_unknownFields = y__})
  defMessage
    = UpdateUser'_constructor
        {_UpdateUser'user = Prelude.Nothing,
         _UpdateUser'obsoleteOriginalUser = Prelude.Nothing,
         _UpdateUser'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UpdateUser -> Data.ProtoLens.Encoding.Bytes.Parser UpdateUser
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "user"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"user") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "obsolete_original_user"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteOriginalUser") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "UpdateUser"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'user") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'obsoleteOriginalUser") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData UpdateUser where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UpdateUser'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_UpdateUser'user x__)
                (Control.DeepSeq.deepseq
                   (_UpdateUser'obsoleteOriginalUser x__) ()))
{- | Fields :
      -}
data UpdateUserResult
  = UpdateUserResult'_constructor {_UpdateUserResult'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UpdateUserResult where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message UpdateUserResult where
  messageName _ = Data.Text.pack "common_1.UpdateUserResult"
  packedMessageDescriptor _
    = "\n\
      \\DLEUpdateUserResult"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UpdateUserResult'_unknownFields
        (\ x__ y__ -> x__ {_UpdateUserResult'_unknownFields = y__})
  defMessage
    = UpdateUserResult'_constructor
        {_UpdateUserResult'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UpdateUserResult
          -> Data.ProtoLens.Encoding.Bytes.Parser UpdateUserResult
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "UpdateUserResult"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData UpdateUserResult where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UpdateUserResult'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.clearedFields' @:: Lens' User [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'clearedFields' @:: Lens' User (Data.Vector.Unboxed.Vector Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.id' @:: Lens' User Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'id' @:: Lens' User (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.userName' @:: Lens' User Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'userName' @:: Lens' User (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.obsoleteFirstName' @:: Lens' User Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteFirstName' @:: Lens' User (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.obsoleteLastName' @:: Lens' User Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteLastName' @:: Lens' User (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.obsoleteEmail' @:: Lens' User Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteEmail' @:: Lens' User (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.customerIds' @:: Lens' User [Data.Text.Text]@
         * 'Proto.CMS.Common1_Fields.vec'customerIds' @:: Lens' User (Data.Vector.Vector Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.subscriberType' @:: Lens' User Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'subscriberType' @:: Lens' User (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.removalDate' @:: Lens' User Data.Int.Int64@
         * 'Proto.CMS.Common1_Fields.maybe'removalDate' @:: Lens' User (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.CMS.Common1_Fields.systemId' @:: Lens' User Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'systemId' @:: Lens' User (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.traderId' @:: Lens' User Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'traderId' @:: Lens' User (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.enforcedConstraintGroup' @:: Lens' User [Data.Text.Text]@
         * 'Proto.CMS.Common1_Fields.vec'enforcedConstraintGroup' @:: Lens' User (Data.Vector.Vector Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.currency' @:: Lens' User Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'currency' @:: Lens' User (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.domain' @:: Lens' User Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'domain' @:: Lens' User (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.removed' @:: Lens' User Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'removed' @:: Lens' User (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.class'' @:: Lens' User Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'class'' @:: Lens' User (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.isTemporary' @:: Lens' User Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'isTemporary' @:: Lens' User (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.isActive' @:: Lens' User Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'isActive' @:: Lens' User (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.expirationTime' @:: Lens' User Data.Int.Int64@
         * 'Proto.CMS.Common1_Fields.maybe'expirationTime' @:: Lens' User (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.CMS.Common1_Fields.castUserId' @:: Lens' User Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'castUserId' @:: Lens' User (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.scope' @:: Lens' User Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'scope' @:: Lens' User (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.enforceIpWhitelist' @:: Lens' User Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'enforceIpWhitelist' @:: Lens' User (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.ipWhitelist' @:: Lens' User [Data.Text.Text]@
         * 'Proto.CMS.Common1_Fields.vec'ipWhitelist' @:: Lens' User (Data.Vector.Vector Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.profileIds' @:: Lens' User [Data.Text.Text]@
         * 'Proto.CMS.Common1_Fields.vec'profileIds' @:: Lens' User (Data.Vector.Vector Data.Text.Text)@ -}
data User
  = User'_constructor {_User'clearedFields :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                       _User'id :: !(Prelude.Maybe Data.Text.Text),
                       _User'userName :: !(Prelude.Maybe Data.Text.Text),
                       _User'obsoleteFirstName :: !(Prelude.Maybe Data.Text.Text),
                       _User'obsoleteLastName :: !(Prelude.Maybe Data.Text.Text),
                       _User'obsoleteEmail :: !(Prelude.Maybe Data.Text.Text),
                       _User'customerIds :: !(Data.Vector.Vector Data.Text.Text),
                       _User'subscriberType :: !(Prelude.Maybe Data.Word.Word32),
                       _User'removalDate :: !(Prelude.Maybe Data.Int.Int64),
                       _User'systemId :: !(Prelude.Maybe Data.Text.Text),
                       _User'traderId :: !(Prelude.Maybe Data.Text.Text),
                       _User'enforcedConstraintGroup :: !(Data.Vector.Vector Data.Text.Text),
                       _User'currency :: !(Prelude.Maybe Data.Text.Text),
                       _User'domain :: !(Prelude.Maybe Data.Word.Word32),
                       _User'removed :: !(Prelude.Maybe Prelude.Bool),
                       _User'class' :: !(Prelude.Maybe Data.Word.Word32),
                       _User'isTemporary :: !(Prelude.Maybe Prelude.Bool),
                       _User'isActive :: !(Prelude.Maybe Prelude.Bool),
                       _User'expirationTime :: !(Prelude.Maybe Data.Int.Int64),
                       _User'castUserId :: !(Prelude.Maybe Data.Text.Text),
                       _User'scope :: !(Prelude.Maybe Data.Word.Word32),
                       _User'enforceIpWhitelist :: !(Prelude.Maybe Prelude.Bool),
                       _User'ipWhitelist :: !(Data.Vector.Vector Data.Text.Text),
                       _User'profileIds :: !(Data.Vector.Vector Data.Text.Text),
                       _User'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show User where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField User "clearedFields" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'clearedFields (\ x__ y__ -> x__ {_User'clearedFields = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField User "vec'clearedFields" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'clearedFields (\ x__ y__ -> x__ {_User'clearedFields = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "id" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'id (\ x__ y__ -> x__ {_User'id = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'id" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'id (\ x__ y__ -> x__ {_User'id = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "userName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'userName (\ x__ y__ -> x__ {_User'userName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'userName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'userName (\ x__ y__ -> x__ {_User'userName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "obsoleteFirstName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'obsoleteFirstName
           (\ x__ y__ -> x__ {_User'obsoleteFirstName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'obsoleteFirstName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'obsoleteFirstName
           (\ x__ y__ -> x__ {_User'obsoleteFirstName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "obsoleteLastName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'obsoleteLastName
           (\ x__ y__ -> x__ {_User'obsoleteLastName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'obsoleteLastName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'obsoleteLastName
           (\ x__ y__ -> x__ {_User'obsoleteLastName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "obsoleteEmail" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'obsoleteEmail (\ x__ y__ -> x__ {_User'obsoleteEmail = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'obsoleteEmail" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'obsoleteEmail (\ x__ y__ -> x__ {_User'obsoleteEmail = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "customerIds" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'customerIds (\ x__ y__ -> x__ {_User'customerIds = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField User "vec'customerIds" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'customerIds (\ x__ y__ -> x__ {_User'customerIds = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "subscriberType" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'subscriberType
           (\ x__ y__ -> x__ {_User'subscriberType = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'subscriberType" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'subscriberType
           (\ x__ y__ -> x__ {_User'subscriberType = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "removalDate" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'removalDate (\ x__ y__ -> x__ {_User'removalDate = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'removalDate" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'removalDate (\ x__ y__ -> x__ {_User'removalDate = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "systemId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'systemId (\ x__ y__ -> x__ {_User'systemId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'systemId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'systemId (\ x__ y__ -> x__ {_User'systemId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "traderId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'traderId (\ x__ y__ -> x__ {_User'traderId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'traderId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'traderId (\ x__ y__ -> x__ {_User'traderId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "enforcedConstraintGroup" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'enforcedConstraintGroup
           (\ x__ y__ -> x__ {_User'enforcedConstraintGroup = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField User "vec'enforcedConstraintGroup" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'enforcedConstraintGroup
           (\ x__ y__ -> x__ {_User'enforcedConstraintGroup = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "currency" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'currency (\ x__ y__ -> x__ {_User'currency = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'currency" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'currency (\ x__ y__ -> x__ {_User'currency = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "domain" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'domain (\ x__ y__ -> x__ {_User'domain = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'domain" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'domain (\ x__ y__ -> x__ {_User'domain = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "removed" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'removed (\ x__ y__ -> x__ {_User'removed = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'removed" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'removed (\ x__ y__ -> x__ {_User'removed = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "class'" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'class' (\ x__ y__ -> x__ {_User'class' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'class'" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'class' (\ x__ y__ -> x__ {_User'class' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "isTemporary" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'isTemporary (\ x__ y__ -> x__ {_User'isTemporary = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'isTemporary" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'isTemporary (\ x__ y__ -> x__ {_User'isTemporary = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "isActive" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'isActive (\ x__ y__ -> x__ {_User'isActive = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'isActive" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'isActive (\ x__ y__ -> x__ {_User'isActive = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "expirationTime" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'expirationTime
           (\ x__ y__ -> x__ {_User'expirationTime = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'expirationTime" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'expirationTime
           (\ x__ y__ -> x__ {_User'expirationTime = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "castUserId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'castUserId (\ x__ y__ -> x__ {_User'castUserId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'castUserId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'castUserId (\ x__ y__ -> x__ {_User'castUserId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "scope" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'scope (\ x__ y__ -> x__ {_User'scope = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'scope" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'scope (\ x__ y__ -> x__ {_User'scope = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "enforceIpWhitelist" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'enforceIpWhitelist
           (\ x__ y__ -> x__ {_User'enforceIpWhitelist = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField User "maybe'enforceIpWhitelist" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'enforceIpWhitelist
           (\ x__ y__ -> x__ {_User'enforceIpWhitelist = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "ipWhitelist" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'ipWhitelist (\ x__ y__ -> x__ {_User'ipWhitelist = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField User "vec'ipWhitelist" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'ipWhitelist (\ x__ y__ -> x__ {_User'ipWhitelist = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField User "profileIds" [Data.Text.Text] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'profileIds (\ x__ y__ -> x__ {_User'profileIds = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField User "vec'profileIds" (Data.Vector.Vector Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _User'profileIds (\ x__ y__ -> x__ {_User'profileIds = y__}))
        Prelude.id
instance Data.ProtoLens.Message User where
  messageName _ = Data.Text.pack "common_1.User"
  packedMessageDescriptor _
    = "\n\
      \\EOTUser\DC2%\n\
      \\SOcleared_fields\CAN\ETB \ETX(\rR\rclearedFields\DC2\SO\n\
      \\STXid\CAN\SOH \SOH(\tR\STXid\DC2\ESC\n\
      \\tuser_name\CAN\STX \SOH(\tR\buserName\DC22\n\
      \\DC3obsolete_first_name\CAN\ETX \SOH(\tR\DC1obsoleteFirstNameB\STX\CAN\SOH\DC20\n\
      \\DC2obsolete_last_name\CAN\EOT \SOH(\tR\DLEobsoleteLastNameB\STX\CAN\SOH\DC2)\n\
      \\SOobsolete_email\CAN\ENQ \SOH(\tR\robsoleteEmailB\STX\CAN\SOH\DC2!\n\
      \\fcustomer_ids\CAN\ACK \ETX(\tR\vcustomerIds\DC2'\n\
      \\SIsubscriber_type\CAN\a \SOH(\rR\SOsubscriberType\DC2!\n\
      \\fremoval_date\CAN\b \SOH(\DC2R\vremovalDate\DC2\ESC\n\
      \\tsystem_id\CAN\t \SOH(\tR\bsystemId\DC2\ESC\n\
      \\ttrader_id\CAN\n\
      \ \SOH(\tR\btraderId\DC2:\n\
      \\EMenforced_constraint_group\CAN\v \ETX(\tR\ETBenforcedConstraintGroup\DC2\SUB\n\
      \\bcurrency\CAN\f \SOH(\tR\bcurrency\DC2\SYN\n\
      \\ACKdomain\CAN\r \SOH(\rR\ACKdomain\DC2\CAN\n\
      \\aremoved\CAN\SO \SOH(\bR\aremoved\DC2\DC4\n\
      \\ENQclass\CAN\SI \SOH(\rR\ENQclass\DC2!\n\
      \\fis_temporary\CAN\DLE \SOH(\bR\visTemporary\DC2\ESC\n\
      \\tis_active\CAN\DC1 \SOH(\bR\bisActive\DC2'\n\
      \\SIexpiration_time\CAN\DC2 \SOH(\DC2R\SOexpirationTime\DC2 \n\
      \\fcast_user_id\CAN\DC3 \SOH(\tR\n\
      \castUserId\DC2\DC4\n\
      \\ENQscope\CAN\DC4 \SOH(\rR\ENQscope\DC20\n\
      \\DC4enforce_ip_whitelist\CAN\NAK \SOH(\bR\DC2enforceIpWhitelist\DC2!\n\
      \\fip_whitelist\CAN\SYN \ETX(\tR\vipWhitelist\DC2\US\n\
      \\vprofile_ids\CAN\CAN \ETX(\tR\n\
      \profileIds\"&\n\
      \\SOSubscriberType\DC2\a\n\
      \\ETXPRO\DLE\NUL\DC2\v\n\
      \\aNON_PRO\DLE\SOH\"J\n\
      \\n\
      \LoginClass\DC2\v\n\
      \\aREGULAR\DLE\SOH\DC2\SO\n\
      \\n\
      \FIX_DIRECT\DLE\STX\DC2\DC1\n\
      \\rORDER_HANDLER\DLE\ETX\DC2\f\n\
      \\bTEMPLATE\DLE\EOT"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        clearedFields__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cleared_fields"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"clearedFields")) ::
              Data.ProtoLens.FieldDescriptor User
        id__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'id")) ::
              Data.ProtoLens.FieldDescriptor User
        userName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "user_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'userName")) ::
              Data.ProtoLens.FieldDescriptor User
        obsoleteFirstName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_first_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsoleteFirstName")) ::
              Data.ProtoLens.FieldDescriptor User
        obsoleteLastName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_last_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsoleteLastName")) ::
              Data.ProtoLens.FieldDescriptor User
        obsoleteEmail__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_email"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsoleteEmail")) ::
              Data.ProtoLens.FieldDescriptor User
        customerIds__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "customer_ids"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"customerIds")) ::
              Data.ProtoLens.FieldDescriptor User
        subscriberType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "subscriber_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'subscriberType")) ::
              Data.ProtoLens.FieldDescriptor User
        removalDate__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "removal_date"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'removalDate")) ::
              Data.ProtoLens.FieldDescriptor User
        systemId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "system_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'systemId")) ::
              Data.ProtoLens.FieldDescriptor User
        traderId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "trader_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'traderId")) ::
              Data.ProtoLens.FieldDescriptor User
        enforcedConstraintGroup__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "enforced_constraint_group"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"enforcedConstraintGroup")) ::
              Data.ProtoLens.FieldDescriptor User
        currency__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "currency"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'currency")) ::
              Data.ProtoLens.FieldDescriptor User
        domain__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "domain"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'domain")) ::
              Data.ProtoLens.FieldDescriptor User
        removed__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "removed"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'removed")) ::
              Data.ProtoLens.FieldDescriptor User
        class'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "class"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'class'")) ::
              Data.ProtoLens.FieldDescriptor User
        isTemporary__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "is_temporary"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'isTemporary")) ::
              Data.ProtoLens.FieldDescriptor User
        isActive__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "is_active"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'isActive")) ::
              Data.ProtoLens.FieldDescriptor User
        expirationTime__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "expiration_time"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'expirationTime")) ::
              Data.ProtoLens.FieldDescriptor User
        castUserId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cast_user_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'castUserId")) ::
              Data.ProtoLens.FieldDescriptor User
        scope__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "scope"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'scope")) ::
              Data.ProtoLens.FieldDescriptor User
        enforceIpWhitelist__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "enforce_ip_whitelist"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'enforceIpWhitelist")) ::
              Data.ProtoLens.FieldDescriptor User
        ipWhitelist__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ip_whitelist"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"ipWhitelist")) ::
              Data.ProtoLens.FieldDescriptor User
        profileIds__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "profile_ids"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"profileIds")) ::
              Data.ProtoLens.FieldDescriptor User
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 23, clearedFields__field_descriptor),
           (Data.ProtoLens.Tag 1, id__field_descriptor),
           (Data.ProtoLens.Tag 2, userName__field_descriptor),
           (Data.ProtoLens.Tag 3, obsoleteFirstName__field_descriptor),
           (Data.ProtoLens.Tag 4, obsoleteLastName__field_descriptor),
           (Data.ProtoLens.Tag 5, obsoleteEmail__field_descriptor),
           (Data.ProtoLens.Tag 6, customerIds__field_descriptor),
           (Data.ProtoLens.Tag 7, subscriberType__field_descriptor),
           (Data.ProtoLens.Tag 8, removalDate__field_descriptor),
           (Data.ProtoLens.Tag 9, systemId__field_descriptor),
           (Data.ProtoLens.Tag 10, traderId__field_descriptor),
           (Data.ProtoLens.Tag 11, enforcedConstraintGroup__field_descriptor),
           (Data.ProtoLens.Tag 12, currency__field_descriptor),
           (Data.ProtoLens.Tag 13, domain__field_descriptor),
           (Data.ProtoLens.Tag 14, removed__field_descriptor),
           (Data.ProtoLens.Tag 15, class'__field_descriptor),
           (Data.ProtoLens.Tag 16, isTemporary__field_descriptor),
           (Data.ProtoLens.Tag 17, isActive__field_descriptor),
           (Data.ProtoLens.Tag 18, expirationTime__field_descriptor),
           (Data.ProtoLens.Tag 19, castUserId__field_descriptor),
           (Data.ProtoLens.Tag 20, scope__field_descriptor),
           (Data.ProtoLens.Tag 21, enforceIpWhitelist__field_descriptor),
           (Data.ProtoLens.Tag 22, ipWhitelist__field_descriptor),
           (Data.ProtoLens.Tag 24, profileIds__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _User'_unknownFields
        (\ x__ y__ -> x__ {_User'_unknownFields = y__})
  defMessage
    = User'_constructor
        {_User'clearedFields = Data.Vector.Generic.empty,
         _User'id = Prelude.Nothing, _User'userName = Prelude.Nothing,
         _User'obsoleteFirstName = Prelude.Nothing,
         _User'obsoleteLastName = Prelude.Nothing,
         _User'obsoleteEmail = Prelude.Nothing,
         _User'customerIds = Data.Vector.Generic.empty,
         _User'subscriberType = Prelude.Nothing,
         _User'removalDate = Prelude.Nothing,
         _User'systemId = Prelude.Nothing, _User'traderId = Prelude.Nothing,
         _User'enforcedConstraintGroup = Data.Vector.Generic.empty,
         _User'currency = Prelude.Nothing, _User'domain = Prelude.Nothing,
         _User'removed = Prelude.Nothing, _User'class' = Prelude.Nothing,
         _User'isTemporary = Prelude.Nothing,
         _User'isActive = Prelude.Nothing,
         _User'expirationTime = Prelude.Nothing,
         _User'castUserId = Prelude.Nothing, _User'scope = Prelude.Nothing,
         _User'enforceIpWhitelist = Prelude.Nothing,
         _User'ipWhitelist = Data.Vector.Generic.empty,
         _User'profileIds = Data.Vector.Generic.empty,
         _User'_unknownFields = []}
  parseMessage
    = let
        loop ::
          User
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
                   -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
                      -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Text.Text
                         -> Data.ProtoLens.Encoding.Bytes.Parser User
        loop
          x
          mutable'clearedFields
          mutable'customerIds
          mutable'enforcedConstraintGroup
          mutable'ipWhitelist
          mutable'profileIds
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'clearedFields <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                   mutable'clearedFields)
                      frozen'customerIds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                 mutable'customerIds)
                      frozen'enforcedConstraintGroup <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                             mutable'enforcedConstraintGroup)
                      frozen'ipWhitelist <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                              (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                 mutable'ipWhitelist)
                      frozen'profileIds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'profileIds)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'clearedFields")
                              frozen'clearedFields
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'customerIds") frozen'customerIds
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'enforcedConstraintGroup")
                                    frozen'enforcedConstraintGroup
                                    (Lens.Family2.set
                                       (Data.ProtoLens.Field.field @"vec'ipWhitelist")
                                       frozen'ipWhitelist
                                       (Lens.Family2.set
                                          (Data.ProtoLens.Field.field @"vec'profileIds")
                                          frozen'profileIds x))))))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        184
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "cleared_fields"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'clearedFields y)
                                loop
                                  x v mutable'customerIds mutable'enforcedConstraintGroup
                                  mutable'ipWhitelist mutable'profileIds
                        186
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "cleared_fields"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'clearedFields)
                                loop
                                  x y mutable'customerIds mutable'enforcedConstraintGroup
                                  mutable'ipWhitelist mutable'profileIds
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"id") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "user_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"userName") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "obsolete_first_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteFirstName") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "obsolete_last_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteLastName") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "obsolete_email"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteEmail") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        50
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getText
                                              (Prelude.fromIntegral len))
                                        "customer_ids"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'customerIds y)
                                loop
                                  x mutable'clearedFields v mutable'enforcedConstraintGroup
                                  mutable'ipWhitelist mutable'profileIds
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "subscriber_type"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"subscriberType") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "removal_date"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"removalDate") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        74
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "system_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"systemId") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        82
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "trader_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"traderId") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        90
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getText
                                              (Prelude.fromIntegral len))
                                        "enforced_constraint_group"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'enforcedConstraintGroup y)
                                loop
                                  x mutable'clearedFields mutable'customerIds v mutable'ipWhitelist
                                  mutable'profileIds
                        98
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "currency"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"currency") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        104
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "domain"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"domain") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        112
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "removed"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"removed") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        120
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "class"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"class'") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        128
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "is_temporary"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"isTemporary") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        136
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "is_active"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"isActive") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        144
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "expiration_time"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"expirationTime") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        154
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "cast_user_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"castUserId") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        160
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "scope"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"scope") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        168
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "enforce_ip_whitelist"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"enforceIpWhitelist") y x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
                        178
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getText
                                              (Prelude.fromIntegral len))
                                        "ip_whitelist"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'ipWhitelist y)
                                loop
                                  x mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup v mutable'profileIds
                        194
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getText
                                              (Prelude.fromIntegral len))
                                        "profile_ids"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'profileIds y)
                                loop
                                  x mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'clearedFields mutable'customerIds
                                  mutable'enforcedConstraintGroup mutable'ipWhitelist
                                  mutable'profileIds
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'clearedFields <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         Data.ProtoLens.Encoding.Growing.new
              mutable'customerIds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       Data.ProtoLens.Encoding.Growing.new
              mutable'enforcedConstraintGroup <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                   Data.ProtoLens.Encoding.Growing.new
              mutable'ipWhitelist <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       Data.ProtoLens.Encoding.Growing.new
              mutable'profileIds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage mutable'clearedFields mutable'customerIds
                mutable'enforcedConstraintGroup mutable'ipWhitelist
                mutable'profileIds)
          "User"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 184)
                        ((Prelude..)
                           Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'clearedFields") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'id") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'userName") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'obsoleteFirstName") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8 _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'obsoleteLastName") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8 _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'obsoleteEmail") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.Text.Encoding.encodeUtf8 _v))
                            ((Data.Monoid.<>)
                               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                  (\ _v
                                     -> (Data.Monoid.<>)
                                          (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                          ((Prelude..)
                                             (\ bs
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (Prelude.fromIntegral
                                                           (Data.ByteString.length bs)))
                                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                             Data.Text.Encoding.encodeUtf8 _v))
                                  (Lens.Family2.view
                                     (Data.ProtoLens.Field.field @"vec'customerIds") _x))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'subscriberType") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'removalDate") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                               ((Prelude..)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral)
                                                  Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'systemId") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                                  ((Prelude..)
                                                     (\ bs
                                                        -> (Data.Monoid.<>)
                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                (Prelude.fromIntegral
                                                                   (Data.ByteString.length bs)))
                                                             (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                bs))
                                                     Data.Text.Encoding.encodeUtf8 _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'traderId") _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                                                     ((Prelude..)
                                                        (\ bs
                                                           -> (Data.Monoid.<>)
                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                   (Prelude.fromIntegral
                                                                      (Data.ByteString.length bs)))
                                                                (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                   bs))
                                                        Data.Text.Encoding.encodeUtf8 _v))
                                           ((Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                                 (\ _v
                                                    -> (Data.Monoid.<>)
                                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                            90)
                                                         ((Prelude..)
                                                            (\ bs
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       (Prelude.fromIntegral
                                                                          (Data.ByteString.length
                                                                             bs)))
                                                                    (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                       bs))
                                                            Data.Text.Encoding.encodeUtf8 _v))
                                                 (Lens.Family2.view
                                                    (Data.ProtoLens.Field.field
                                                       @"vec'enforcedConstraintGroup")
                                                    _x))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field
                                                           @"maybe'currency")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              98)
                                                           ((Prelude..)
                                                              (\ bs
                                                                 -> (Data.Monoid.<>)
                                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                         (Prelude.fromIntegral
                                                                            (Data.ByteString.length
                                                                               bs)))
                                                                      (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                         bs))
                                                              Data.Text.Encoding.encodeUtf8 _v))
                                                 ((Data.Monoid.<>)
                                                    (case
                                                         Lens.Family2.view
                                                           (Data.ProtoLens.Field.field
                                                              @"maybe'domain")
                                                           _x
                                                     of
                                                       Prelude.Nothing -> Data.Monoid.mempty
                                                       (Prelude.Just _v)
                                                         -> (Data.Monoid.<>)
                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 104)
                                                              ((Prelude..)
                                                                 Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 Prelude.fromIntegral _v))
                                                    ((Data.Monoid.<>)
                                                       (case
                                                            Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"maybe'removed")
                                                              _x
                                                        of
                                                          Prelude.Nothing -> Data.Monoid.mempty
                                                          (Prelude.Just _v)
                                                            -> (Data.Monoid.<>)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    112)
                                                                 ((Prelude..)
                                                                    Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    (\ b -> if b then 1 else 0) _v))
                                                       ((Data.Monoid.<>)
                                                          (case
                                                               Lens.Family2.view
                                                                 (Data.ProtoLens.Field.field
                                                                    @"maybe'class'")
                                                                 _x
                                                           of
                                                             Prelude.Nothing -> Data.Monoid.mempty
                                                             (Prelude.Just _v)
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       120)
                                                                    ((Prelude..)
                                                                       Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       Prelude.fromIntegral _v))
                                                          ((Data.Monoid.<>)
                                                             (case
                                                                  Lens.Family2.view
                                                                    (Data.ProtoLens.Field.field
                                                                       @"maybe'isTemporary")
                                                                    _x
                                                              of
                                                                Prelude.Nothing
                                                                  -> Data.Monoid.mempty
                                                                (Prelude.Just _v)
                                                                  -> (Data.Monoid.<>)
                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                          128)
                                                                       ((Prelude..)
                                                                          Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                          (\ b
                                                                             -> if b then 1 else 0)
                                                                          _v))
                                                             ((Data.Monoid.<>)
                                                                (case
                                                                     Lens.Family2.view
                                                                       (Data.ProtoLens.Field.field
                                                                          @"maybe'isActive")
                                                                       _x
                                                                 of
                                                                   Prelude.Nothing
                                                                     -> Data.Monoid.mempty
                                                                   (Prelude.Just _v)
                                                                     -> (Data.Monoid.<>)
                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             136)
                                                                          ((Prelude..)
                                                                             Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             (\ b
                                                                                -> if b then
                                                                                       1
                                                                                   else
                                                                                       0)
                                                                             _v))
                                                                ((Data.Monoid.<>)
                                                                   (case
                                                                        Lens.Family2.view
                                                                          (Data.ProtoLens.Field.field
                                                                             @"maybe'expirationTime")
                                                                          _x
                                                                    of
                                                                      Prelude.Nothing
                                                                        -> Data.Monoid.mempty
                                                                      (Prelude.Just _v)
                                                                        -> (Data.Monoid.<>)
                                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                144)
                                                                             ((Prelude..)
                                                                                ((Prelude..)
                                                                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                   Prelude.fromIntegral)
                                                                                Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                                                                                _v))
                                                                   ((Data.Monoid.<>)
                                                                      (case
                                                                           Lens.Family2.view
                                                                             (Data.ProtoLens.Field.field
                                                                                @"maybe'castUserId")
                                                                             _x
                                                                       of
                                                                         Prelude.Nothing
                                                                           -> Data.Monoid.mempty
                                                                         (Prelude.Just _v)
                                                                           -> (Data.Monoid.<>)
                                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                   154)
                                                                                ((Prelude..)
                                                                                   (\ bs
                                                                                      -> (Data.Monoid.<>)
                                                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                              (Prelude.fromIntegral
                                                                                                 (Data.ByteString.length
                                                                                                    bs)))
                                                                                           (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                              bs))
                                                                                   Data.Text.Encoding.encodeUtf8
                                                                                   _v))
                                                                      ((Data.Monoid.<>)
                                                                         (case
                                                                              Lens.Family2.view
                                                                                (Data.ProtoLens.Field.field
                                                                                   @"maybe'scope")
                                                                                _x
                                                                          of
                                                                            Prelude.Nothing
                                                                              -> Data.Monoid.mempty
                                                                            (Prelude.Just _v)
                                                                              -> (Data.Monoid.<>)
                                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                      160)
                                                                                   ((Prelude..)
                                                                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                      Prelude.fromIntegral
                                                                                      _v))
                                                                         ((Data.Monoid.<>)
                                                                            (case
                                                                                 Lens.Family2.view
                                                                                   (Data.ProtoLens.Field.field
                                                                                      @"maybe'enforceIpWhitelist")
                                                                                   _x
                                                                             of
                                                                               Prelude.Nothing
                                                                                 -> Data.Monoid.mempty
                                                                               (Prelude.Just _v)
                                                                                 -> (Data.Monoid.<>)
                                                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                         168)
                                                                                      ((Prelude..)
                                                                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                         (\ b
                                                                                            -> if b then
                                                                                                   1
                                                                                               else
                                                                                                   0)
                                                                                         _v))
                                                                            ((Data.Monoid.<>)
                                                                               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                                                                  (\ _v
                                                                                     -> (Data.Monoid.<>)
                                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                             178)
                                                                                          ((Prelude..)
                                                                                             (\ bs
                                                                                                -> (Data.Monoid.<>)
                                                                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                        (Prelude.fromIntegral
                                                                                                           (Data.ByteString.length
                                                                                                              bs)))
                                                                                                     (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                        bs))
                                                                                             Data.Text.Encoding.encodeUtf8
                                                                                             _v))
                                                                                  (Lens.Family2.view
                                                                                     (Data.ProtoLens.Field.field
                                                                                        @"vec'ipWhitelist")
                                                                                     _x))
                                                                               ((Data.Monoid.<>)
                                                                                  (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                                                                     (\ _v
                                                                                        -> (Data.Monoid.<>)
                                                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                194)
                                                                                             ((Prelude..)
                                                                                                (\ bs
                                                                                                   -> (Data.Monoid.<>)
                                                                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                           (Prelude.fromIntegral
                                                                                                              (Data.ByteString.length
                                                                                                                 bs)))
                                                                                                        (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                           bs))
                                                                                                Data.Text.Encoding.encodeUtf8
                                                                                                _v))
                                                                                     (Lens.Family2.view
                                                                                        (Data.ProtoLens.Field.field
                                                                                           @"vec'profileIds")
                                                                                        _x))
                                                                                  (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                                                     (Lens.Family2.view
                                                                                        Data.ProtoLens.unknownFields
                                                                                        _x)))))))))))))))))))))))))
instance Control.DeepSeq.NFData User where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_User'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_User'clearedFields x__)
                (Control.DeepSeq.deepseq
                   (_User'id x__)
                   (Control.DeepSeq.deepseq
                      (_User'userName x__)
                      (Control.DeepSeq.deepseq
                         (_User'obsoleteFirstName x__)
                         (Control.DeepSeq.deepseq
                            (_User'obsoleteLastName x__)
                            (Control.DeepSeq.deepseq
                               (_User'obsoleteEmail x__)
                               (Control.DeepSeq.deepseq
                                  (_User'customerIds x__)
                                  (Control.DeepSeq.deepseq
                                     (_User'subscriberType x__)
                                     (Control.DeepSeq.deepseq
                                        (_User'removalDate x__)
                                        (Control.DeepSeq.deepseq
                                           (_User'systemId x__)
                                           (Control.DeepSeq.deepseq
                                              (_User'traderId x__)
                                              (Control.DeepSeq.deepseq
                                                 (_User'enforcedConstraintGroup x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_User'currency x__)
                                                    (Control.DeepSeq.deepseq
                                                       (_User'domain x__)
                                                       (Control.DeepSeq.deepseq
                                                          (_User'removed x__)
                                                          (Control.DeepSeq.deepseq
                                                             (_User'class' x__)
                                                             (Control.DeepSeq.deepseq
                                                                (_User'isTemporary x__)
                                                                (Control.DeepSeq.deepseq
                                                                   (_User'isActive x__)
                                                                   (Control.DeepSeq.deepseq
                                                                      (_User'expirationTime x__)
                                                                      (Control.DeepSeq.deepseq
                                                                         (_User'castUserId x__)
                                                                         (Control.DeepSeq.deepseq
                                                                            (_User'scope x__)
                                                                            (Control.DeepSeq.deepseq
                                                                               (_User'enforceIpWhitelist
                                                                                  x__)
                                                                               (Control.DeepSeq.deepseq
                                                                                  (_User'ipWhitelist
                                                                                     x__)
                                                                                  (Control.DeepSeq.deepseq
                                                                                     (_User'profileIds
                                                                                        x__)
                                                                                     ()))))))))))))))))))))))))
data User'LoginClass
  = User'REGULAR |
    User'FIX_DIRECT |
    User'ORDER_HANDLER |
    User'TEMPLATE
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum User'LoginClass where
  maybeToEnum 1 = Prelude.Just User'REGULAR
  maybeToEnum 2 = Prelude.Just User'FIX_DIRECT
  maybeToEnum 3 = Prelude.Just User'ORDER_HANDLER
  maybeToEnum 4 = Prelude.Just User'TEMPLATE
  maybeToEnum _ = Prelude.Nothing
  showEnum User'REGULAR = "REGULAR"
  showEnum User'FIX_DIRECT = "FIX_DIRECT"
  showEnum User'ORDER_HANDLER = "ORDER_HANDLER"
  showEnum User'TEMPLATE = "TEMPLATE"
  readEnum k
    | (Prelude.==) k "REGULAR" = Prelude.Just User'REGULAR
    | (Prelude.==) k "FIX_DIRECT" = Prelude.Just User'FIX_DIRECT
    | (Prelude.==) k "ORDER_HANDLER" = Prelude.Just User'ORDER_HANDLER
    | (Prelude.==) k "TEMPLATE" = Prelude.Just User'TEMPLATE
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded User'LoginClass where
  minBound = User'REGULAR
  maxBound = User'TEMPLATE
instance Prelude.Enum User'LoginClass where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum LoginClass: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum User'REGULAR = 1
  fromEnum User'FIX_DIRECT = 2
  fromEnum User'ORDER_HANDLER = 3
  fromEnum User'TEMPLATE = 4
  succ User'TEMPLATE
    = Prelude.error
        "User'LoginClass.succ: bad argument User'TEMPLATE. This value would be out of bounds."
  succ User'REGULAR = User'FIX_DIRECT
  succ User'FIX_DIRECT = User'ORDER_HANDLER
  succ User'ORDER_HANDLER = User'TEMPLATE
  pred User'REGULAR
    = Prelude.error
        "User'LoginClass.pred: bad argument User'REGULAR. This value would be out of bounds."
  pred User'FIX_DIRECT = User'REGULAR
  pred User'ORDER_HANDLER = User'FIX_DIRECT
  pred User'TEMPLATE = User'ORDER_HANDLER
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault User'LoginClass where
  fieldDefault = User'REGULAR
instance Control.DeepSeq.NFData User'LoginClass where
  rnf x__ = Prelude.seq x__ ()
data User'SubscriberType
  = User'PRO | User'NON_PRO
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum User'SubscriberType where
  maybeToEnum 0 = Prelude.Just User'PRO
  maybeToEnum 1 = Prelude.Just User'NON_PRO
  maybeToEnum _ = Prelude.Nothing
  showEnum User'PRO = "PRO"
  showEnum User'NON_PRO = "NON_PRO"
  readEnum k
    | (Prelude.==) k "PRO" = Prelude.Just User'PRO
    | (Prelude.==) k "NON_PRO" = Prelude.Just User'NON_PRO
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded User'SubscriberType where
  minBound = User'PRO
  maxBound = User'NON_PRO
instance Prelude.Enum User'SubscriberType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum SubscriberType: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum User'PRO = 0
  fromEnum User'NON_PRO = 1
  succ User'NON_PRO
    = Prelude.error
        "User'SubscriberType.succ: bad argument User'NON_PRO. This value would be out of bounds."
  succ User'PRO = User'NON_PRO
  pred User'PRO
    = Prelude.error
        "User'SubscriberType.pred: bad argument User'PRO. This value would be out of bounds."
  pred User'NON_PRO = User'PRO
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault User'SubscriberType where
  fieldDefault = User'PRO
instance Control.DeepSeq.NFData User'SubscriberType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.userId' @:: Lens' UserInfoRequest Data.Text.Text@ -}
data UserInfoRequest
  = UserInfoRequest'_constructor {_UserInfoRequest'userId :: !Data.Text.Text,
                                  _UserInfoRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UserInfoRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField UserInfoRequest "userId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserInfoRequest'userId
           (\ x__ y__ -> x__ {_UserInfoRequest'userId = y__}))
        Prelude.id
instance Data.ProtoLens.Message UserInfoRequest where
  messageName _ = Data.Text.pack "common_1.UserInfoRequest"
  packedMessageDescriptor _
    = "\n\
      \\SIUserInfoRequest\DC2\ETB\n\
      \\auser_id\CAN\EOT \STX(\tR\ACKuserId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        userId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "user_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"userId")) ::
              Data.ProtoLens.FieldDescriptor UserInfoRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 4, userId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UserInfoRequest'_unknownFields
        (\ x__ y__ -> x__ {_UserInfoRequest'_unknownFields = y__})
  defMessage
    = UserInfoRequest'_constructor
        {_UserInfoRequest'userId = Data.ProtoLens.fieldDefault,
         _UserInfoRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UserInfoRequest
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser UserInfoRequest
        loop x required'userId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'userId then (:) "user_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "user_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"userId") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'userId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "UserInfoRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"userId") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData UserInfoRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UserInfoRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq (_UserInfoRequest'userId x__) ())
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.messageType' @:: Lens' UserMessage Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.source' @:: Lens' UserMessage Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'source' @:: Lens' UserMessage (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.subject' @:: Lens' UserMessage Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'subject' @:: Lens' UserMessage (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.text' @:: Lens' UserMessage Proto.Common.Shared1.Text@
         * 'Proto.CMS.Common1_Fields.expirationUtcTime' @:: Lens' UserMessage Data.Int.Int64@
         * 'Proto.CMS.Common1_Fields.maybe'expirationUtcTime' @:: Lens' UserMessage (Prelude.Maybe Data.Int.Int64)@ -}
data UserMessage
  = UserMessage'_constructor {_UserMessage'messageType :: !Data.Word.Word32,
                              _UserMessage'source :: !(Prelude.Maybe Data.Text.Text),
                              _UserMessage'subject :: !(Prelude.Maybe Data.Text.Text),
                              _UserMessage'text :: !Proto.Common.Shared1.Text,
                              _UserMessage'expirationUtcTime :: !(Prelude.Maybe Data.Int.Int64),
                              _UserMessage'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UserMessage where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField UserMessage "messageType" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserMessage'messageType
           (\ x__ y__ -> x__ {_UserMessage'messageType = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserMessage "source" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserMessage'source (\ x__ y__ -> x__ {_UserMessage'source = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserMessage "maybe'source" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserMessage'source (\ x__ y__ -> x__ {_UserMessage'source = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserMessage "subject" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserMessage'subject
           (\ x__ y__ -> x__ {_UserMessage'subject = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserMessage "maybe'subject" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserMessage'subject
           (\ x__ y__ -> x__ {_UserMessage'subject = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserMessage "text" Proto.Common.Shared1.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserMessage'text (\ x__ y__ -> x__ {_UserMessage'text = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserMessage "expirationUtcTime" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserMessage'expirationUtcTime
           (\ x__ y__ -> x__ {_UserMessage'expirationUtcTime = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserMessage "maybe'expirationUtcTime" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserMessage'expirationUtcTime
           (\ x__ y__ -> x__ {_UserMessage'expirationUtcTime = y__}))
        Prelude.id
instance Data.ProtoLens.Message UserMessage where
  messageName _ = Data.Text.pack "common_1.UserMessage"
  packedMessageDescriptor _
    = "\n\
      \\vUserMessage\DC2!\n\
      \\fmessage_type\CAN\SOH \STX(\rR\vmessageType\DC2\SYN\n\
      \\ACKsource\CAN\STX \SOH(\tR\ACKsource\DC2\CAN\n\
      \\asubject\CAN\ETX \SOH(\tR\asubject\DC2\"\n\
      \\EOTtext\CAN\EOT \STX(\v2\SO.shared_1.TextR\EOTtext\DC2.\n\
      \\DC3expiration_utc_time\CAN\ENQ \SOH(\DC2R\DC1expirationUtcTime\"A\n\
      \\vMessageType\DC2\DC2\n\
      \\SOCRITICAL_ERROR\DLE\SOH\DC2\v\n\
      \\aWARNING\DLE\STX\DC2\b\n\
      \\EOTINFO\DLE\ETX\DC2\a\n\
      \\ETXLOG\DLE\EOT"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        messageType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "message_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"messageType")) ::
              Data.ProtoLens.FieldDescriptor UserMessage
        source__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "source"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'source")) ::
              Data.ProtoLens.FieldDescriptor UserMessage
        subject__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "subject"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'subject")) ::
              Data.ProtoLens.FieldDescriptor UserMessage
        text__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "text"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor Proto.Common.Shared1.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"text")) ::
              Data.ProtoLens.FieldDescriptor UserMessage
        expirationUtcTime__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "expiration_utc_time"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'expirationUtcTime")) ::
              Data.ProtoLens.FieldDescriptor UserMessage
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, messageType__field_descriptor),
           (Data.ProtoLens.Tag 2, source__field_descriptor),
           (Data.ProtoLens.Tag 3, subject__field_descriptor),
           (Data.ProtoLens.Tag 4, text__field_descriptor),
           (Data.ProtoLens.Tag 5, expirationUtcTime__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UserMessage'_unknownFields
        (\ x__ y__ -> x__ {_UserMessage'_unknownFields = y__})
  defMessage
    = UserMessage'_constructor
        {_UserMessage'messageType = Data.ProtoLens.fieldDefault,
         _UserMessage'source = Prelude.Nothing,
         _UserMessage'subject = Prelude.Nothing,
         _UserMessage'text = Data.ProtoLens.defMessage,
         _UserMessage'expirationUtcTime = Prelude.Nothing,
         _UserMessage'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UserMessage
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser UserMessage
        loop x required'messageType required'text
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'messageType then (:) "message_type" else Prelude.id)
                               ((if required'text then (:) "text" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "message_type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"messageType") y x)
                                  Prelude.False required'text
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "source"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"source") y x)
                                  required'messageType required'text
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "subject"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"subject") y x)
                                  required'messageType required'text
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "text"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"text") y x)
                                  required'messageType Prelude.False
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "expiration_utc_time"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"expirationUtcTime") y x)
                                  required'messageType required'text
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'messageType required'text
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "UserMessage"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                ((Prelude..)
                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"messageType") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'source") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.Text.Encoding.encodeUtf8 _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'subject") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   ((Data.Monoid.<>)
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                         ((Prelude..)
                            (\ bs
                               -> (Data.Monoid.<>)
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                       (Prelude.fromIntegral (Data.ByteString.length bs)))
                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                            Data.ProtoLens.encodeMessage
                            (Lens.Family2.view (Data.ProtoLens.Field.field @"text") _x)))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'expirationUtcTime") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral)
                                      Data.ProtoLens.Encoding.Bytes.signedInt64ToWord _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData UserMessage where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UserMessage'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_UserMessage'messageType x__)
                (Control.DeepSeq.deepseq
                   (_UserMessage'source x__)
                   (Control.DeepSeq.deepseq
                      (_UserMessage'subject x__)
                      (Control.DeepSeq.deepseq
                         (_UserMessage'text x__)
                         (Control.DeepSeq.deepseq
                            (_UserMessage'expirationUtcTime x__) ())))))
data UserMessage'MessageType
  = UserMessage'CRITICAL_ERROR |
    UserMessage'WARNING |
    UserMessage'INFO |
    UserMessage'LOG
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum UserMessage'MessageType where
  maybeToEnum 1 = Prelude.Just UserMessage'CRITICAL_ERROR
  maybeToEnum 2 = Prelude.Just UserMessage'WARNING
  maybeToEnum 3 = Prelude.Just UserMessage'INFO
  maybeToEnum 4 = Prelude.Just UserMessage'LOG
  maybeToEnum _ = Prelude.Nothing
  showEnum UserMessage'CRITICAL_ERROR = "CRITICAL_ERROR"
  showEnum UserMessage'WARNING = "WARNING"
  showEnum UserMessage'INFO = "INFO"
  showEnum UserMessage'LOG = "LOG"
  readEnum k
    | (Prelude.==) k "CRITICAL_ERROR"
    = Prelude.Just UserMessage'CRITICAL_ERROR
    | (Prelude.==) k "WARNING" = Prelude.Just UserMessage'WARNING
    | (Prelude.==) k "INFO" = Prelude.Just UserMessage'INFO
    | (Prelude.==) k "LOG" = Prelude.Just UserMessage'LOG
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded UserMessage'MessageType where
  minBound = UserMessage'CRITICAL_ERROR
  maxBound = UserMessage'LOG
instance Prelude.Enum UserMessage'MessageType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum MessageType: " (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum UserMessage'CRITICAL_ERROR = 1
  fromEnum UserMessage'WARNING = 2
  fromEnum UserMessage'INFO = 3
  fromEnum UserMessage'LOG = 4
  succ UserMessage'LOG
    = Prelude.error
        "UserMessage'MessageType.succ: bad argument UserMessage'LOG. This value would be out of bounds."
  succ UserMessage'CRITICAL_ERROR = UserMessage'WARNING
  succ UserMessage'WARNING = UserMessage'INFO
  succ UserMessage'INFO = UserMessage'LOG
  pred UserMessage'CRITICAL_ERROR
    = Prelude.error
        "UserMessage'MessageType.pred: bad argument UserMessage'CRITICAL_ERROR. This value would be out of bounds."
  pred UserMessage'WARNING = UserMessage'CRITICAL_ERROR
  pred UserMessage'INFO = UserMessage'WARNING
  pred UserMessage'LOG = UserMessage'INFO
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault UserMessage'MessageType where
  fieldDefault = UserMessage'CRITICAL_ERROR
instance Control.DeepSeq.NFData UserMessage'MessageType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.obsoleteText' @:: Lens' UserSearchRequest Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'obsoleteText' @:: Lens' UserSearchRequest (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.obsoleteSearchCriteria' @:: Lens' UserSearchRequest [Data.Word.Word32]@
         * 'Proto.CMS.Common1_Fields.vec'obsoleteSearchCriteria' @:: Lens' UserSearchRequest (Data.Vector.Unboxed.Vector Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.searchOptions' @:: Lens' UserSearchRequest [SearchOption]@
         * 'Proto.CMS.Common1_Fields.vec'searchOptions' @:: Lens' UserSearchRequest (Data.Vector.Vector SearchOption)@
         * 'Proto.CMS.Common1_Fields.allMatchMode' @:: Lens' UserSearchRequest Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'allMatchMode' @:: Lens' UserSearchRequest (Prelude.Maybe Prelude.Bool)@ -}
data UserSearchRequest
  = UserSearchRequest'_constructor {_UserSearchRequest'obsoleteText :: !(Prelude.Maybe Data.Text.Text),
                                    _UserSearchRequest'obsoleteSearchCriteria :: !(Data.Vector.Unboxed.Vector Data.Word.Word32),
                                    _UserSearchRequest'searchOptions :: !(Data.Vector.Vector SearchOption),
                                    _UserSearchRequest'allMatchMode :: !(Prelude.Maybe Prelude.Bool),
                                    _UserSearchRequest'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UserSearchRequest where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField UserSearchRequest "obsoleteText" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchRequest'obsoleteText
           (\ x__ y__ -> x__ {_UserSearchRequest'obsoleteText = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserSearchRequest "maybe'obsoleteText" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchRequest'obsoleteText
           (\ x__ y__ -> x__ {_UserSearchRequest'obsoleteText = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchRequest "obsoleteSearchCriteria" [Data.Word.Word32] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchRequest'obsoleteSearchCriteria
           (\ x__ y__
              -> x__ {_UserSearchRequest'obsoleteSearchCriteria = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField UserSearchRequest "vec'obsoleteSearchCriteria" (Data.Vector.Unboxed.Vector Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchRequest'obsoleteSearchCriteria
           (\ x__ y__
              -> x__ {_UserSearchRequest'obsoleteSearchCriteria = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchRequest "searchOptions" [SearchOption] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchRequest'searchOptions
           (\ x__ y__ -> x__ {_UserSearchRequest'searchOptions = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField UserSearchRequest "vec'searchOptions" (Data.Vector.Vector SearchOption) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchRequest'searchOptions
           (\ x__ y__ -> x__ {_UserSearchRequest'searchOptions = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchRequest "allMatchMode" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchRequest'allMatchMode
           (\ x__ y__ -> x__ {_UserSearchRequest'allMatchMode = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField UserSearchRequest "maybe'allMatchMode" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchRequest'allMatchMode
           (\ x__ y__ -> x__ {_UserSearchRequest'allMatchMode = y__}))
        Prelude.id
instance Data.ProtoLens.Message UserSearchRequest where
  messageName _ = Data.Text.pack "common_1.UserSearchRequest"
  packedMessageDescriptor _
    = "\n\
      \\DC1UserSearchRequest\DC2'\n\
      \\robsolete_text\CAN\SOH \SOH(\tR\fobsoleteTextB\STX\CAN\SOH\DC2<\n\
      \\CANobsolete_search_criteria\CAN\STX \ETX(\rR\SYNobsoleteSearchCriteriaB\STX\CAN\SOH\DC2=\n\
      \\SOsearch_options\CAN\ETX \ETX(\v2\SYN.common_1.SearchOptionR\rsearchOptions\DC2+\n\
      \\SOall_match_mode\CAN\EOT \SOH(\b:\ENQfalseR\fallMatchMode\"\196\STX\n\
      \\SOSearchCriteria\DC2\v\n\
      \\aUSER_ID\DLE\SOH\DC2\r\n\
      \\tUSER_NAME\DLE\EOT\DC2\US\n\
      \\ESCPROFILE_SALES_SERIES_NUMBER\DLE\ENQ\DC2\GS\n\
      \\EMPROFILE_SALES_SERIES_NAME\DLE\ACK\DC2\DC3\n\
      \\SISALES_SERIES_ID\DLE\a\DC2\SI\n\
      \\vCUSTOMER_ID\DLE\b\DC2\DLE\n\
      \\fBROKERAGE_ID\DLE\t\DC2\DC2\n\
      \\SOBROKERAGE_NAME\DLE\n\
      \\DC2\t\n\
      \\ENQCLASS\DLE\v\DC2\DLE\n\
      \\fLOGIN_DOMAIN\DLE\f\DC2\SO\n\
      \\n\
      \PROFILE_ID\DLE\r\DC2\ESC\n\
      \\ETBPROFILE_SALES_SERIES_ID\DLE\SO\DC2\DC3\n\
      \\SIAUTH_PARTNER_ID\DLE\SI\DC2\DC4\n\
      \\DLEEXTERNAL_USER_ID\DLE\DLE\DC2\NAK\n\
      \\DC1AUTH_PARTNER_NAME\DLE\DC1"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        obsoleteText__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_text"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'obsoleteText")) ::
              Data.ProtoLens.FieldDescriptor UserSearchRequest
        obsoleteSearchCriteria__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "obsolete_search_criteria"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"obsoleteSearchCriteria")) ::
              Data.ProtoLens.FieldDescriptor UserSearchRequest
        searchOptions__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "search_options"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor SearchOption)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"searchOptions")) ::
              Data.ProtoLens.FieldDescriptor UserSearchRequest
        allMatchMode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "all_match_mode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'allMatchMode")) ::
              Data.ProtoLens.FieldDescriptor UserSearchRequest
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, obsoleteText__field_descriptor),
           (Data.ProtoLens.Tag 2, obsoleteSearchCriteria__field_descriptor),
           (Data.ProtoLens.Tag 3, searchOptions__field_descriptor),
           (Data.ProtoLens.Tag 4, allMatchMode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UserSearchRequest'_unknownFields
        (\ x__ y__ -> x__ {_UserSearchRequest'_unknownFields = y__})
  defMessage
    = UserSearchRequest'_constructor
        {_UserSearchRequest'obsoleteText = Prelude.Nothing,
         _UserSearchRequest'obsoleteSearchCriteria = Data.Vector.Generic.empty,
         _UserSearchRequest'searchOptions = Data.Vector.Generic.empty,
         _UserSearchRequest'allMatchMode = Prelude.Nothing,
         _UserSearchRequest'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UserSearchRequest
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Unboxed.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.Word.Word32
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld SearchOption
                -> Data.ProtoLens.Encoding.Bytes.Parser UserSearchRequest
        loop x mutable'obsoleteSearchCriteria mutable'searchOptions
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'obsoleteSearchCriteria <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                         (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                            mutable'obsoleteSearchCriteria)
                      frozen'searchOptions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                   mutable'searchOptions)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'obsoleteSearchCriteria")
                              frozen'obsoleteSearchCriteria
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'searchOptions")
                                 frozen'searchOptions x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "obsolete_text"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"obsoleteText") y x)
                                  mutable'obsoleteSearchCriteria mutable'searchOptions
                        16
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (Prelude.fmap
                                           Prelude.fromIntegral
                                           Data.ProtoLens.Encoding.Bytes.getVarInt)
                                        "obsolete_search_criteria"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'obsoleteSearchCriteria y)
                                loop x v mutable'searchOptions
                        18
                          -> do y <- do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                        Data.ProtoLens.Encoding.Bytes.isolate
                                          (Prelude.fromIntegral len)
                                          ((let
                                              ploop qs
                                                = do packedEnd <- Data.ProtoLens.Encoding.Bytes.atEnd
                                                     if packedEnd then
                                                         Prelude.return qs
                                                     else
                                                         do !q <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                                                    (Prelude.fmap
                                                                       Prelude.fromIntegral
                                                                       Data.ProtoLens.Encoding.Bytes.getVarInt)
                                                                    "obsolete_search_criteria"
                                                            qs' <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                                     (Data.ProtoLens.Encoding.Growing.append
                                                                        qs q)
                                                            ploop qs'
                                            in ploop)
                                             mutable'obsoleteSearchCriteria)
                                loop x y mutable'searchOptions
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "search_options"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'searchOptions y)
                                loop x mutable'obsoleteSearchCriteria v
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "all_match_mode"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"allMatchMode") y x)
                                  mutable'obsoleteSearchCriteria mutable'searchOptions
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'obsoleteSearchCriteria mutable'searchOptions
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'obsoleteSearchCriteria <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                  Data.ProtoLens.Encoding.Growing.new
              mutable'searchOptions <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage mutable'obsoleteSearchCriteria
                mutable'searchOptions)
          "UserSearchRequest"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'obsoleteText") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.Text.Encoding.encodeUtf8 _v))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                           ((Prelude..)
                              Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'obsoleteSearchCriteria") _x))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                              ((Prelude..)
                                 (\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Data.ProtoLens.encodeMessage _v))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'searchOptions") _x))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'allMatchMode") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0) _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData UserSearchRequest where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UserSearchRequest'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_UserSearchRequest'obsoleteText x__)
                (Control.DeepSeq.deepseq
                   (_UserSearchRequest'obsoleteSearchCriteria x__)
                   (Control.DeepSeq.deepseq
                      (_UserSearchRequest'searchOptions x__)
                      (Control.DeepSeq.deepseq
                         (_UserSearchRequest'allMatchMode x__) ()))))
data UserSearchRequest'SearchCriteria
  = UserSearchRequest'USER_ID |
    UserSearchRequest'USER_NAME |
    UserSearchRequest'PROFILE_SALES_SERIES_NUMBER |
    UserSearchRequest'PROFILE_SALES_SERIES_NAME |
    UserSearchRequest'SALES_SERIES_ID |
    UserSearchRequest'CUSTOMER_ID |
    UserSearchRequest'BROKERAGE_ID |
    UserSearchRequest'BROKERAGE_NAME |
    UserSearchRequest'CLASS |
    UserSearchRequest'LOGIN_DOMAIN |
    UserSearchRequest'PROFILE_ID |
    UserSearchRequest'PROFILE_SALES_SERIES_ID |
    UserSearchRequest'AUTH_PARTNER_ID |
    UserSearchRequest'EXTERNAL_USER_ID |
    UserSearchRequest'AUTH_PARTNER_NAME
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum UserSearchRequest'SearchCriteria where
  maybeToEnum 1 = Prelude.Just UserSearchRequest'USER_ID
  maybeToEnum 4 = Prelude.Just UserSearchRequest'USER_NAME
  maybeToEnum 5
    = Prelude.Just UserSearchRequest'PROFILE_SALES_SERIES_NUMBER
  maybeToEnum 6
    = Prelude.Just UserSearchRequest'PROFILE_SALES_SERIES_NAME
  maybeToEnum 7 = Prelude.Just UserSearchRequest'SALES_SERIES_ID
  maybeToEnum 8 = Prelude.Just UserSearchRequest'CUSTOMER_ID
  maybeToEnum 9 = Prelude.Just UserSearchRequest'BROKERAGE_ID
  maybeToEnum 10 = Prelude.Just UserSearchRequest'BROKERAGE_NAME
  maybeToEnum 11 = Prelude.Just UserSearchRequest'CLASS
  maybeToEnum 12 = Prelude.Just UserSearchRequest'LOGIN_DOMAIN
  maybeToEnum 13 = Prelude.Just UserSearchRequest'PROFILE_ID
  maybeToEnum 14
    = Prelude.Just UserSearchRequest'PROFILE_SALES_SERIES_ID
  maybeToEnum 15 = Prelude.Just UserSearchRequest'AUTH_PARTNER_ID
  maybeToEnum 16 = Prelude.Just UserSearchRequest'EXTERNAL_USER_ID
  maybeToEnum 17 = Prelude.Just UserSearchRequest'AUTH_PARTNER_NAME
  maybeToEnum _ = Prelude.Nothing
  showEnum UserSearchRequest'USER_ID = "USER_ID"
  showEnum UserSearchRequest'USER_NAME = "USER_NAME"
  showEnum UserSearchRequest'PROFILE_SALES_SERIES_NUMBER
    = "PROFILE_SALES_SERIES_NUMBER"
  showEnum UserSearchRequest'PROFILE_SALES_SERIES_NAME
    = "PROFILE_SALES_SERIES_NAME"
  showEnum UserSearchRequest'SALES_SERIES_ID = "SALES_SERIES_ID"
  showEnum UserSearchRequest'CUSTOMER_ID = "CUSTOMER_ID"
  showEnum UserSearchRequest'BROKERAGE_ID = "BROKERAGE_ID"
  showEnum UserSearchRequest'BROKERAGE_NAME = "BROKERAGE_NAME"
  showEnum UserSearchRequest'CLASS = "CLASS"
  showEnum UserSearchRequest'LOGIN_DOMAIN = "LOGIN_DOMAIN"
  showEnum UserSearchRequest'PROFILE_ID = "PROFILE_ID"
  showEnum UserSearchRequest'PROFILE_SALES_SERIES_ID
    = "PROFILE_SALES_SERIES_ID"
  showEnum UserSearchRequest'AUTH_PARTNER_ID = "AUTH_PARTNER_ID"
  showEnum UserSearchRequest'EXTERNAL_USER_ID = "EXTERNAL_USER_ID"
  showEnum UserSearchRequest'AUTH_PARTNER_NAME = "AUTH_PARTNER_NAME"
  readEnum k
    | (Prelude.==) k "USER_ID" = Prelude.Just UserSearchRequest'USER_ID
    | (Prelude.==) k "USER_NAME"
    = Prelude.Just UserSearchRequest'USER_NAME
    | (Prelude.==) k "PROFILE_SALES_SERIES_NUMBER"
    = Prelude.Just UserSearchRequest'PROFILE_SALES_SERIES_NUMBER
    | (Prelude.==) k "PROFILE_SALES_SERIES_NAME"
    = Prelude.Just UserSearchRequest'PROFILE_SALES_SERIES_NAME
    | (Prelude.==) k "SALES_SERIES_ID"
    = Prelude.Just UserSearchRequest'SALES_SERIES_ID
    | (Prelude.==) k "CUSTOMER_ID"
    = Prelude.Just UserSearchRequest'CUSTOMER_ID
    | (Prelude.==) k "BROKERAGE_ID"
    = Prelude.Just UserSearchRequest'BROKERAGE_ID
    | (Prelude.==) k "BROKERAGE_NAME"
    = Prelude.Just UserSearchRequest'BROKERAGE_NAME
    | (Prelude.==) k "CLASS" = Prelude.Just UserSearchRequest'CLASS
    | (Prelude.==) k "LOGIN_DOMAIN"
    = Prelude.Just UserSearchRequest'LOGIN_DOMAIN
    | (Prelude.==) k "PROFILE_ID"
    = Prelude.Just UserSearchRequest'PROFILE_ID
    | (Prelude.==) k "PROFILE_SALES_SERIES_ID"
    = Prelude.Just UserSearchRequest'PROFILE_SALES_SERIES_ID
    | (Prelude.==) k "AUTH_PARTNER_ID"
    = Prelude.Just UserSearchRequest'AUTH_PARTNER_ID
    | (Prelude.==) k "EXTERNAL_USER_ID"
    = Prelude.Just UserSearchRequest'EXTERNAL_USER_ID
    | (Prelude.==) k "AUTH_PARTNER_NAME"
    = Prelude.Just UserSearchRequest'AUTH_PARTNER_NAME
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded UserSearchRequest'SearchCriteria where
  minBound = UserSearchRequest'USER_ID
  maxBound = UserSearchRequest'AUTH_PARTNER_NAME
instance Prelude.Enum UserSearchRequest'SearchCriteria where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum SearchCriteria: "
              (Prelude.show k__)))
        Prelude.id (Data.ProtoLens.maybeToEnum k__)
  fromEnum UserSearchRequest'USER_ID = 1
  fromEnum UserSearchRequest'USER_NAME = 4
  fromEnum UserSearchRequest'PROFILE_SALES_SERIES_NUMBER = 5
  fromEnum UserSearchRequest'PROFILE_SALES_SERIES_NAME = 6
  fromEnum UserSearchRequest'SALES_SERIES_ID = 7
  fromEnum UserSearchRequest'CUSTOMER_ID = 8
  fromEnum UserSearchRequest'BROKERAGE_ID = 9
  fromEnum UserSearchRequest'BROKERAGE_NAME = 10
  fromEnum UserSearchRequest'CLASS = 11
  fromEnum UserSearchRequest'LOGIN_DOMAIN = 12
  fromEnum UserSearchRequest'PROFILE_ID = 13
  fromEnum UserSearchRequest'PROFILE_SALES_SERIES_ID = 14
  fromEnum UserSearchRequest'AUTH_PARTNER_ID = 15
  fromEnum UserSearchRequest'EXTERNAL_USER_ID = 16
  fromEnum UserSearchRequest'AUTH_PARTNER_NAME = 17
  succ UserSearchRequest'AUTH_PARTNER_NAME
    = Prelude.error
        "UserSearchRequest'SearchCriteria.succ: bad argument UserSearchRequest'AUTH_PARTNER_NAME. This value would be out of bounds."
  succ UserSearchRequest'USER_ID = UserSearchRequest'USER_NAME
  succ UserSearchRequest'USER_NAME
    = UserSearchRequest'PROFILE_SALES_SERIES_NUMBER
  succ UserSearchRequest'PROFILE_SALES_SERIES_NUMBER
    = UserSearchRequest'PROFILE_SALES_SERIES_NAME
  succ UserSearchRequest'PROFILE_SALES_SERIES_NAME
    = UserSearchRequest'SALES_SERIES_ID
  succ UserSearchRequest'SALES_SERIES_ID
    = UserSearchRequest'CUSTOMER_ID
  succ UserSearchRequest'CUSTOMER_ID = UserSearchRequest'BROKERAGE_ID
  succ UserSearchRequest'BROKERAGE_ID
    = UserSearchRequest'BROKERAGE_NAME
  succ UserSearchRequest'BROKERAGE_NAME = UserSearchRequest'CLASS
  succ UserSearchRequest'CLASS = UserSearchRequest'LOGIN_DOMAIN
  succ UserSearchRequest'LOGIN_DOMAIN = UserSearchRequest'PROFILE_ID
  succ UserSearchRequest'PROFILE_ID
    = UserSearchRequest'PROFILE_SALES_SERIES_ID
  succ UserSearchRequest'PROFILE_SALES_SERIES_ID
    = UserSearchRequest'AUTH_PARTNER_ID
  succ UserSearchRequest'AUTH_PARTNER_ID
    = UserSearchRequest'EXTERNAL_USER_ID
  succ UserSearchRequest'EXTERNAL_USER_ID
    = UserSearchRequest'AUTH_PARTNER_NAME
  pred UserSearchRequest'USER_ID
    = Prelude.error
        "UserSearchRequest'SearchCriteria.pred: bad argument UserSearchRequest'USER_ID. This value would be out of bounds."
  pred UserSearchRequest'USER_NAME = UserSearchRequest'USER_ID
  pred UserSearchRequest'PROFILE_SALES_SERIES_NUMBER
    = UserSearchRequest'USER_NAME
  pred UserSearchRequest'PROFILE_SALES_SERIES_NAME
    = UserSearchRequest'PROFILE_SALES_SERIES_NUMBER
  pred UserSearchRequest'SALES_SERIES_ID
    = UserSearchRequest'PROFILE_SALES_SERIES_NAME
  pred UserSearchRequest'CUSTOMER_ID
    = UserSearchRequest'SALES_SERIES_ID
  pred UserSearchRequest'BROKERAGE_ID = UserSearchRequest'CUSTOMER_ID
  pred UserSearchRequest'BROKERAGE_NAME
    = UserSearchRequest'BROKERAGE_ID
  pred UserSearchRequest'CLASS = UserSearchRequest'BROKERAGE_NAME
  pred UserSearchRequest'LOGIN_DOMAIN = UserSearchRequest'CLASS
  pred UserSearchRequest'PROFILE_ID = UserSearchRequest'LOGIN_DOMAIN
  pred UserSearchRequest'PROFILE_SALES_SERIES_ID
    = UserSearchRequest'PROFILE_ID
  pred UserSearchRequest'AUTH_PARTNER_ID
    = UserSearchRequest'PROFILE_SALES_SERIES_ID
  pred UserSearchRequest'EXTERNAL_USER_ID
    = UserSearchRequest'AUTH_PARTNER_ID
  pred UserSearchRequest'AUTH_PARTNER_NAME
    = UserSearchRequest'EXTERNAL_USER_ID
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault UserSearchRequest'SearchCriteria where
  fieldDefault = UserSearchRequest'USER_ID
instance Control.DeepSeq.NFData UserSearchRequest'SearchCriteria where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.CMS.Common1_Fields.userId' @:: Lens' UserSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.userName' @:: Lens' UserSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.firstName' @:: Lens' UserSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'firstName' @:: Lens' UserSearchResultRecord (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.lastName' @:: Lens' UserSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'lastName' @:: Lens' UserSearchResultRecord (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.customerId' @:: Lens' UserSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'customerId' @:: Lens' UserSearchResultRecord (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.customerName' @:: Lens' UserSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'customerName' @:: Lens' UserSearchResultRecord (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.customerBrokerageName' @:: Lens' UserSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'customerBrokerageName' @:: Lens' UserSearchResultRecord (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.removed' @:: Lens' UserSearchResultRecord Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'removed' @:: Lens' UserSearchResultRecord (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.class'' @:: Lens' UserSearchResultRecord Data.Word.Word32@
         * 'Proto.CMS.Common1_Fields.maybe'class'' @:: Lens' UserSearchResultRecord (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.CMS.Common1_Fields.isTemporary' @:: Lens' UserSearchResultRecord Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'isTemporary' @:: Lens' UserSearchResultRecord (Prelude.Maybe Prelude.Bool)@
         * 'Proto.CMS.Common1_Fields.profileId' @:: Lens' UserSearchResultRecord Data.Text.Text@
         * 'Proto.CMS.Common1_Fields.maybe'profileId' @:: Lens' UserSearchResultRecord (Prelude.Maybe Data.Text.Text)@
         * 'Proto.CMS.Common1_Fields.externalAuth' @:: Lens' UserSearchResultRecord ExternalAuth@
         * 'Proto.CMS.Common1_Fields.maybe'externalAuth' @:: Lens' UserSearchResultRecord (Prelude.Maybe ExternalAuth)@
         * 'Proto.CMS.Common1_Fields.isActive' @:: Lens' UserSearchResultRecord Prelude.Bool@
         * 'Proto.CMS.Common1_Fields.maybe'isActive' @:: Lens' UserSearchResultRecord (Prelude.Maybe Prelude.Bool)@ -}
data UserSearchResultRecord
  = UserSearchResultRecord'_constructor {_UserSearchResultRecord'userId :: !Data.Text.Text,
                                         _UserSearchResultRecord'userName :: !Data.Text.Text,
                                         _UserSearchResultRecord'firstName :: !(Prelude.Maybe Data.Text.Text),
                                         _UserSearchResultRecord'lastName :: !(Prelude.Maybe Data.Text.Text),
                                         _UserSearchResultRecord'customerId :: !(Prelude.Maybe Data.Text.Text),
                                         _UserSearchResultRecord'customerName :: !(Prelude.Maybe Data.Text.Text),
                                         _UserSearchResultRecord'customerBrokerageName :: !(Prelude.Maybe Data.Text.Text),
                                         _UserSearchResultRecord'removed :: !(Prelude.Maybe Prelude.Bool),
                                         _UserSearchResultRecord'class' :: !(Prelude.Maybe Data.Word.Word32),
                                         _UserSearchResultRecord'isTemporary :: !(Prelude.Maybe Prelude.Bool),
                                         _UserSearchResultRecord'profileId :: !(Prelude.Maybe Data.Text.Text),
                                         _UserSearchResultRecord'externalAuth :: !(Prelude.Maybe ExternalAuth),
                                         _UserSearchResultRecord'isActive :: !(Prelude.Maybe Prelude.Bool),
                                         _UserSearchResultRecord'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show UserSearchResultRecord where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "userId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'userId
           (\ x__ y__ -> x__ {_UserSearchResultRecord'userId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "userName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'userName
           (\ x__ y__ -> x__ {_UserSearchResultRecord'userName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "firstName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'firstName
           (\ x__ y__ -> x__ {_UserSearchResultRecord'firstName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "maybe'firstName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'firstName
           (\ x__ y__ -> x__ {_UserSearchResultRecord'firstName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "lastName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'lastName
           (\ x__ y__ -> x__ {_UserSearchResultRecord'lastName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "maybe'lastName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'lastName
           (\ x__ y__ -> x__ {_UserSearchResultRecord'lastName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "customerId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'customerId
           (\ x__ y__ -> x__ {_UserSearchResultRecord'customerId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "maybe'customerId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'customerId
           (\ x__ y__ -> x__ {_UserSearchResultRecord'customerId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "customerName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'customerName
           (\ x__ y__ -> x__ {_UserSearchResultRecord'customerName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "maybe'customerName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'customerName
           (\ x__ y__ -> x__ {_UserSearchResultRecord'customerName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "customerBrokerageName" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'customerBrokerageName
           (\ x__ y__
              -> x__ {_UserSearchResultRecord'customerBrokerageName = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "maybe'customerBrokerageName" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'customerBrokerageName
           (\ x__ y__
              -> x__ {_UserSearchResultRecord'customerBrokerageName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "removed" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'removed
           (\ x__ y__ -> x__ {_UserSearchResultRecord'removed = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "maybe'removed" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'removed
           (\ x__ y__ -> x__ {_UserSearchResultRecord'removed = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "class'" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'class'
           (\ x__ y__ -> x__ {_UserSearchResultRecord'class' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "maybe'class'" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'class'
           (\ x__ y__ -> x__ {_UserSearchResultRecord'class' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "isTemporary" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'isTemporary
           (\ x__ y__ -> x__ {_UserSearchResultRecord'isTemporary = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "maybe'isTemporary" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'isTemporary
           (\ x__ y__ -> x__ {_UserSearchResultRecord'isTemporary = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "profileId" Data.Text.Text where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'profileId
           (\ x__ y__ -> x__ {_UserSearchResultRecord'profileId = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "maybe'profileId" (Prelude.Maybe Data.Text.Text) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'profileId
           (\ x__ y__ -> x__ {_UserSearchResultRecord'profileId = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "externalAuth" ExternalAuth where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'externalAuth
           (\ x__ y__ -> x__ {_UserSearchResultRecord'externalAuth = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "maybe'externalAuth" (Prelude.Maybe ExternalAuth) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'externalAuth
           (\ x__ y__ -> x__ {_UserSearchResultRecord'externalAuth = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "isActive" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'isActive
           (\ x__ y__ -> x__ {_UserSearchResultRecord'isActive = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField UserSearchResultRecord "maybe'isActive" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _UserSearchResultRecord'isActive
           (\ x__ y__ -> x__ {_UserSearchResultRecord'isActive = y__}))
        Prelude.id
instance Data.ProtoLens.Message UserSearchResultRecord where
  messageName _ = Data.Text.pack "common_1.UserSearchResultRecord"
  packedMessageDescriptor _
    = "\n\
      \\SYNUserSearchResultRecord\DC2\ETB\n\
      \\auser_id\CAN\SOH \STX(\tR\ACKuserId\DC2\ESC\n\
      \\tuser_name\CAN\STX \STX(\tR\buserName\DC2\GS\n\
      \\n\
      \first_name\CAN\ETX \SOH(\tR\tfirstName\DC2\ESC\n\
      \\tlast_name\CAN\EOT \SOH(\tR\blastName\DC2\US\n\
      \\vcustomer_id\CAN\ENQ \SOH(\tR\n\
      \customerId\DC2#\n\
      \\rcustomer_name\CAN\ACK \SOH(\tR\fcustomerName\DC26\n\
      \\ETBcustomer_brokerage_name\CAN\a \SOH(\tR\NAKcustomerBrokerageName\DC2\CAN\n\
      \\aremoved\CAN\b \SOH(\bR\aremoved\DC2\DC4\n\
      \\ENQclass\CAN\t \SOH(\rR\ENQclass\DC2!\n\
      \\fis_temporary\CAN\n\
      \ \SOH(\bR\visTemporary\DC2\GS\n\
      \\n\
      \profile_id\CAN\v \SOH(\tR\tprofileId\DC2;\n\
      \\rexternal_auth\CAN\f \SOH(\v2\SYN.common_1.ExternalAuthR\fexternalAuth\DC2\ESC\n\
      \\tis_active\CAN\r \SOH(\bR\bisActive"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        userId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "user_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"userId")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
        userName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "user_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"userName")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
        firstName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "first_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'firstName")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
        lastName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "last_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lastName")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
        customerId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "customer_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'customerId")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
        customerName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "customer_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'customerName")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
        customerBrokerageName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "customer_brokerage_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'customerBrokerageName")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
        removed__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "removed"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'removed")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
        class'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "class"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'class'")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
        isTemporary__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "is_temporary"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'isTemporary")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
        profileId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "profile_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.StringField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Text.Text)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'profileId")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
        externalAuth__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "external_auth"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor ExternalAuth)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'externalAuth")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
        isActive__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "is_active"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'isActive")) ::
              Data.ProtoLens.FieldDescriptor UserSearchResultRecord
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, userId__field_descriptor),
           (Data.ProtoLens.Tag 2, userName__field_descriptor),
           (Data.ProtoLens.Tag 3, firstName__field_descriptor),
           (Data.ProtoLens.Tag 4, lastName__field_descriptor),
           (Data.ProtoLens.Tag 5, customerId__field_descriptor),
           (Data.ProtoLens.Tag 6, customerName__field_descriptor),
           (Data.ProtoLens.Tag 7, customerBrokerageName__field_descriptor),
           (Data.ProtoLens.Tag 8, removed__field_descriptor),
           (Data.ProtoLens.Tag 9, class'__field_descriptor),
           (Data.ProtoLens.Tag 10, isTemporary__field_descriptor),
           (Data.ProtoLens.Tag 11, profileId__field_descriptor),
           (Data.ProtoLens.Tag 12, externalAuth__field_descriptor),
           (Data.ProtoLens.Tag 13, isActive__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _UserSearchResultRecord'_unknownFields
        (\ x__ y__ -> x__ {_UserSearchResultRecord'_unknownFields = y__})
  defMessage
    = UserSearchResultRecord'_constructor
        {_UserSearchResultRecord'userId = Data.ProtoLens.fieldDefault,
         _UserSearchResultRecord'userName = Data.ProtoLens.fieldDefault,
         _UserSearchResultRecord'firstName = Prelude.Nothing,
         _UserSearchResultRecord'lastName = Prelude.Nothing,
         _UserSearchResultRecord'customerId = Prelude.Nothing,
         _UserSearchResultRecord'customerName = Prelude.Nothing,
         _UserSearchResultRecord'customerBrokerageName = Prelude.Nothing,
         _UserSearchResultRecord'removed = Prelude.Nothing,
         _UserSearchResultRecord'class' = Prelude.Nothing,
         _UserSearchResultRecord'isTemporary = Prelude.Nothing,
         _UserSearchResultRecord'profileId = Prelude.Nothing,
         _UserSearchResultRecord'externalAuth = Prelude.Nothing,
         _UserSearchResultRecord'isActive = Prelude.Nothing,
         _UserSearchResultRecord'_unknownFields = []}
  parseMessage
    = let
        loop ::
          UserSearchResultRecord
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser UserSearchResultRecord
        loop x required'userId required'userName
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'userId then (:) "user_id" else Prelude.id)
                               ((if required'userName then (:) "user_name" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "user_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"userId") y x)
                                  Prelude.False required'userName
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "user_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"userName") y x)
                                  required'userId Prelude.False
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "first_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"firstName") y x)
                                  required'userId required'userName
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "last_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"lastName") y x)
                                  required'userId required'userName
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "customer_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"customerId") y x)
                                  required'userId required'userName
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "customer_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"customerName") y x)
                                  required'userId required'userName
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "customer_brokerage_name"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"customerBrokerageName") y x)
                                  required'userId required'userName
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "removed"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"removed") y x)
                                  required'userId required'userName
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "class"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"class'") y x)
                                  required'userId required'userName
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "is_temporary"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"isTemporary") y x)
                                  required'userId required'userName
                        90
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getText
                                             (Prelude.fromIntegral len))
                                       "profile_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"profileId") y x)
                                  required'userId required'userName
                        98
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "external_auth"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"externalAuth") y x)
                                  required'userId required'userName
                        104
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "is_active"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"isActive") y x)
                                  required'userId required'userName
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'userId required'userName
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "UserSearchResultRecord"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.Text.Encoding.encodeUtf8
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"userId") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.Text.Encoding.encodeUtf8
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"userName") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'firstName") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.Text.Encoding.encodeUtf8 _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'lastName") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.Text.Encoding.encodeUtf8 _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'customerId") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.Text.Encoding.encodeUtf8 _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'customerName") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.Text.Encoding.encodeUtf8 _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'customerBrokerageName") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                         ((Prelude..)
                                            (\ bs
                                               -> (Data.Monoid.<>)
                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                       (Prelude.fromIntegral
                                                          (Data.ByteString.length bs)))
                                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            Data.Text.Encoding.encodeUtf8 _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'removed") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (\ b -> if b then 1 else 0) _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'class'") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'isTemporary") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (\ b -> if b then 1 else 0) _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'profileId") _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 90)
                                                     ((Prelude..)
                                                        (\ bs
                                                           -> (Data.Monoid.<>)
                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                   (Prelude.fromIntegral
                                                                      (Data.ByteString.length bs)))
                                                                (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                   bs))
                                                        Data.Text.Encoding.encodeUtf8 _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field
                                                        @"maybe'externalAuth")
                                                     _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 98)
                                                        ((Prelude..)
                                                           (\ bs
                                                              -> (Data.Monoid.<>)
                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                      (Prelude.fromIntegral
                                                                         (Data.ByteString.length
                                                                            bs)))
                                                                   (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                      bs))
                                                           Data.ProtoLens.encodeMessage _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field
                                                           @"maybe'isActive")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              104)
                                                           ((Prelude..)
                                                              Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              (\ b -> if b then 1 else 0) _v))
                                                 (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                    (Lens.Family2.view
                                                       Data.ProtoLens.unknownFields _x))))))))))))))
instance Control.DeepSeq.NFData UserSearchResultRecord where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_UserSearchResultRecord'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_UserSearchResultRecord'userId x__)
                (Control.DeepSeq.deepseq
                   (_UserSearchResultRecord'userName x__)
                   (Control.DeepSeq.deepseq
                      (_UserSearchResultRecord'firstName x__)
                      (Control.DeepSeq.deepseq
                         (_UserSearchResultRecord'lastName x__)
                         (Control.DeepSeq.deepseq
                            (_UserSearchResultRecord'customerId x__)
                            (Control.DeepSeq.deepseq
                               (_UserSearchResultRecord'customerName x__)
                               (Control.DeepSeq.deepseq
                                  (_UserSearchResultRecord'customerBrokerageName x__)
                                  (Control.DeepSeq.deepseq
                                     (_UserSearchResultRecord'removed x__)
                                     (Control.DeepSeq.deepseq
                                        (_UserSearchResultRecord'class' x__)
                                        (Control.DeepSeq.deepseq
                                           (_UserSearchResultRecord'isTemporary x__)
                                           (Control.DeepSeq.deepseq
                                              (_UserSearchResultRecord'profileId x__)
                                              (Control.DeepSeq.deepseq
                                                 (_UserSearchResultRecord'externalAuth x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_UserSearchResultRecord'isActive x__)
                                                    ())))))))))))))
packedFileDescriptor :: Data.ByteString.ByteString
packedFileDescriptor
  = "\n\
    \\DC2CMS/common_1.proto\DC2\bcommon_1\SUB\NAKcommon/shared_1.proto\"\249\SOH\n\
    \\vUserMessage\DC2!\n\
    \\fmessage_type\CAN\SOH \STX(\rR\vmessageType\DC2\SYN\n\
    \\ACKsource\CAN\STX \SOH(\tR\ACKsource\DC2\CAN\n\
    \\asubject\CAN\ETX \SOH(\tR\asubject\DC2\"\n\
    \\EOTtext\CAN\EOT \STX(\v2\SO.shared_1.TextR\EOTtext\DC2.\n\
    \\DC3expiration_utc_time\CAN\ENQ \SOH(\DC2R\DC1expirationUtcTime\"A\n\
    \\vMessageType\DC2\DC2\n\
    \\SOCRITICAL_ERROR\DLE\SOH\DC2\v\n\
    \\aWARNING\DLE\STX\DC2\b\n\
    \\EOTINFO\DLE\ETX\DC2\a\n\
    \\ETXLOG\DLE\EOT\"\234\EOT\n\
    \\ENQLogon\DC24\n\
    \\SYNprotocol_version_minor\CAN\SOH \SOH(\rR\DC4protocolVersionMinor\DC24\n\
    \\SYNprotocol_version_major\CAN\STX \SOH(\rR\DC4protocolVersionMajor\DC2\ESC\n\
    \\tuser_name\CAN\ETX \SOH(\tR\buserName\DC2\SUB\n\
    \\bpassword\CAN\EOT \SOH(\tR\bpassword\DC2\"\n\
    \\rclient_app_id\CAN\ENQ \SOH(\tR\vclientAppId\DC2%\n\
    \\SOclient_version\CAN\ACK \SOH(\tR\rclientVersion\DC2)\n\
    \\DLEsession_settings\CAN\a \ETX(\rR\SIsessionSettings\DC26\n\
    \\ETBdrop_concurrent_session\CAN\b \SOH(\bR\NAKdropConcurrentSession\DC2#\n\
    \\rprivate_label\CAN\t \SOH(\tR\fprivateLabel\DC2!\n\
    \\faccess_token\CAN\n\
    \ \SOH(\tR\vaccessToken\DC2Q\n\
    \\"subscribe_on_request_status_change\CAN\v \SOH(\b:\ENQfalseR\RSsubscribeOnRequestStatusChange\DC2.\n\
    \\DC3max_deferred_period\CAN\f \SOH(\rR\DC1maxDeferredPeriod\"C\n\
    \\SOSessionSetting\DC2\EM\n\
    \\NAKALLOW_SESSION_RESTORE\DLE\SOH\DC2\SYN\n\
    \\DC2ALLOW_SESSION_JOIN\DLE\STX\"\173\STX\n\
    \\DC4RestoreOrJoinSession\DC2#\n\
    \\rsession_token\CAN\SOH \STX(\tR\fsessionToken\DC2\"\n\
    \\rclient_app_id\CAN\STX \STX(\tR\vclientAppId\DC2*\n\
    \\DC1client_ip_address\CAN\ETX \SOH(\tR\SIclientIpAddress\DC2Q\n\
    \\"subscribe_on_request_status_change\CAN\EOT \SOH(\b:\ENQfalseR\RSsubscribeOnRequestStatusChange\DC2%\n\
    \\SOoperation_type\CAN\ENQ \SOH(\rR\roperationType\"&\n\
    \\rOperationType\DC2\v\n\
    \\aRESTORE\DLE\SOH\DC2\b\n\
    \\EOTJOIN\DLE\STX\"\b\n\
    \\ACKLogoff\"F\n\
    \\vCredentials\DC2\ESC\n\
    \\tuser_name\CAN\SOH \STX(\tR\buserName\DC2\SUB\n\
    \\bpassword\CAN\STX \SOH(\tR\bpassword\"\254\SOH\n\
    \\vLogonResult\DC24\n\
    \\SYNprotocol_version_minor\CAN\SOH \STX(\rR\DC4protocolVersionMinor\DC24\n\
    \\SYNprotocol_version_major\CAN\STX \STX(\rR\DC4protocolVersionMajor\DC2)\n\
    \\DLEoperation_status\CAN\ETX \STX(\rR\SIoperationStatus\DC23\n\
    \\rerror_message\CAN\EOT \SOH(\v2\SO.shared_1.TextR\ferrorMessage\DC2#\n\
    \\rsession_token\CAN\ENQ \SOH(\tR\fsessionToken\"|\n\
    \\SUBRestoreOrJoinSessionResult\DC2)\n\
    \\DLEoperation_status\CAN\SOH \STX(\rR\SIoperationStatus\DC23\n\
    \\rerror_message\CAN\STX \SOH(\v2\SO.shared_1.TextR\ferrorMessage\"3\n\
    \\tLoggedOff\DC2&\n\
    \\ACKreason\CAN\STX \SOH(\v2\SO.shared_1.TextR\ACKreason\" \n\
    \\RSEntitlementCategoryListRequest\"Q\n\
    \\EMEntitlementServiceRequest\DC24\n\
    \\SYNentitlement_service_id\CAN\SOH \STX(\rR\DC4entitlementServiceId\"r\n\
    \\GSEntitlementServiceListRequest\DC2!\n\
    \\fbrokerage_id\CAN\SOH \ETX(\tR\vbrokerageId\DC2.\n\
    \\SIinclude_retired\CAN\STX \SOH(\b:\ENQfalseR\SOincludeRetired\"\178\b\n\
    \\DC2EntitlementService\DC2\SO\n\
    \\STXid\CAN\SOH \STX(\rR\STXid\DC2\"\n\
    \\EOTname\CAN\STX \STX(\v2\SO.shared_1.TextR\EOTname\DC2\US\n\
    \\vcategory_id\CAN\ETX \ETX(\rR\n\
    \categoryId\DC2%\n\
    \\ENQprice\CAN\EOT \ETX(\v2\SI.common_1.PriceR\ENQprice\DC20\n\
    \\vdescription\CAN\ENQ \STX(\v2\SO.shared_1.TextR\vdescription\DC2-\n\
    \\DC2authorization_type\CAN\ACK \STX(\rR\DC1authorizationType\DC2?\n\
    \\n\
    \constraint\CAN\a \ETX(\v2\US.common_1.EntitlementConstraintR\n\
    \constraint\DC2B\n\
    \\ESCobsolete_agreement_required\CAN\b \SOH(\bR\EMobsoleteAgreementRequiredB\STX\CAN\SOH\DC2A\n\
    \\DC2obsolete_agreement\CAN\t \SOH(\v2\SO.shared_1.TextR\DC1obsoleteAgreementB\STX\CAN\SOH\DC2'\n\
    \\SIsubscriber_type\CAN\n\
    \ \SOH(\rR\SOsubscriberType\DC2<\n\
    \\SUBbilling_brokerage_required\CAN\v \SOH(\bR\CANbillingBrokerageRequired\DC2#\n\
    \\rlogin_domains\CAN\f \ETX(\rR\floginDomains\DC2\CAN\n\
    \\aoptions\CAN\r \ETX(\rR\aoptions\DC26\n\
    \\ENQitems\CAN\SO \ETX(\v2 .common_1.EntitlementServiceItemR\ENQitems\DC21\n\
    \\DC4brokerage_assignable\CAN\SI \SOH(\bR\DC3brokerageAssignable\DC2H\n\
    \ brokerage_authorization_required\CAN\DLE \SOH(\bR\RSbrokerageAuthorizationRequired\DC2\CAN\n\
    \\adefault\CAN\DC1 \SOH(\bR\adefault\DC2-\n\
    \\DC3visible_by_cqg_only\CAN\DC2 \SOH(\bR\DLEvisibleByCqgOnly\DC2#\n\
    \\rcontract_type\CAN\DC3 \SOH(\tR\fcontractType\DC2\CAN\n\
    \\aretired\CAN\DC4 \SOH(\bR\aretired\"W\n\
    \\DC1AuthorizationType\DC2\DLE\n\
    \\fDISABLE_ONLY\DLE\SOH\DC2\r\n\
    \\tVIEW_ONLY\DLE\STX\DC2\SI\n\
    \\vENABLE_ONLY\DLE\ETX\DC2\DLE\n\
    \\fFULL_CONTROL\DLE\EOT\";\n\
    \\rServiceOption\DC2\DC4\n\
    \\DLEONLY_FOR_TRADERS\DLE\SOH\DC2\DC4\n\
    \\DLEFREE_FOR_TRADERS\DLE\STX\"\134\SOH\n\
    \\SYNEntitlementServiceItem\DC2\SO\n\
    \\STXid\CAN\SOH \SOH(\tR\STXid\DC28\n\
    \\EOTtype\CAN\STX \SOH(\v2$.common_1.EntitlementServiceItemTypeR\EOTtype\DC2\"\n\
    \\EOTname\CAN\ETX \SOH(\v2\SO.shared_1.TextR\EOTname\"\168\SOH\n\
    \\SUBEntitlementServiceItemType\DC2\SO\n\
    \\STXid\CAN\SOH \SOH(\tR\STXid\DC2\"\n\
    \\EOTname\CAN\STX \SOH(\v2\SO.shared_1.TextR\EOTname\DC20\n\
    \\vdescription\CAN\ETX \SOH(\v2\SO.shared_1.TextR\vdescription\DC2$\n\
    \\SOis_market_data\CAN\EOT \SOH(\bR\fisMarketData\"9\n\
    \\ENQPrice\DC2\SUB\n\
    \\bcurrency\CAN\SOH \STX(\tR\bcurrency\DC2\DC4\n\
    \\ENQvalue\CAN\STX \STX(\SOHR\ENQvalue\"\\\n\
    \\DC4ServicePriceOverride\DC2\GS\n\
    \\n\
    \service_id\CAN\SOH \SOH(\tR\tserviceId\DC2%\n\
    \\ENQprice\CAN\STX \SOH(\v2\SI.common_1.PriceR\ENQprice\"\190\SOH\n\
    \\DC3EntitlementCategory\DC2\SO\n\
    \\STXid\CAN\SOH \STX(\rR\STXid\DC2\"\n\
    \\EOTname\CAN\STX \STX(\v2\SO.shared_1.TextR\EOTname\DC2@\n\
    \\fsub_category\CAN\ETX \ETX(\v2\GS.common_1.EntitlementCategoryR\vsubCategory\DC21\n\
    \\DC4brokerage_assignable\CAN\EOT \SOH(\bR\DC3brokerageAssignable\"\131\STX\n\
    \\NAKEntitlementConstraint\DC2'\n\
    \\SIconstraint_type\CAN\SOH \STX(\rR\SOconstraintType\DC2$\n\
    \\SOref_service_id\CAN\STX \SOH(\rR\frefServiceId\DC2)\n\
    \\DLEconstraint_group\CAN\ETX \SOH(\tR\SIconstraintGroup\"p\n\
    \\EOTType\DC2\v\n\
    \\aEXCLUDE\DLE\SOH\DC2\v\n\
    \\aWARNING\DLE\STX\DC2\SYN\n\
    \\DC2MANDATORY_ONLY_ONE\DLE\ETX\DC2\f\n\
    \\bPICK_ONE\DLE\EOT\DC2\NAK\n\
    \\DC1PRODUCT_WHITELIST\DLE\ENQ\DC2\DC1\n\
    \\rINCLUDE_ITEMS\DLE\ACK\"*\n\
    \\SIUserInfoRequest\DC2\ETB\n\
    \\auser_id\CAN\EOT \STX(\tR\ACKuserId\"\191\a\n\
    \\EOTUser\DC2%\n\
    \\SOcleared_fields\CAN\ETB \ETX(\rR\rclearedFields\DC2\SO\n\
    \\STXid\CAN\SOH \SOH(\tR\STXid\DC2\ESC\n\
    \\tuser_name\CAN\STX \SOH(\tR\buserName\DC22\n\
    \\DC3obsolete_first_name\CAN\ETX \SOH(\tR\DC1obsoleteFirstNameB\STX\CAN\SOH\DC20\n\
    \\DC2obsolete_last_name\CAN\EOT \SOH(\tR\DLEobsoleteLastNameB\STX\CAN\SOH\DC2)\n\
    \\SOobsolete_email\CAN\ENQ \SOH(\tR\robsoleteEmailB\STX\CAN\SOH\DC2!\n\
    \\fcustomer_ids\CAN\ACK \ETX(\tR\vcustomerIds\DC2'\n\
    \\SIsubscriber_type\CAN\a \SOH(\rR\SOsubscriberType\DC2!\n\
    \\fremoval_date\CAN\b \SOH(\DC2R\vremovalDate\DC2\ESC\n\
    \\tsystem_id\CAN\t \SOH(\tR\bsystemId\DC2\ESC\n\
    \\ttrader_id\CAN\n\
    \ \SOH(\tR\btraderId\DC2:\n\
    \\EMenforced_constraint_group\CAN\v \ETX(\tR\ETBenforcedConstraintGroup\DC2\SUB\n\
    \\bcurrency\CAN\f \SOH(\tR\bcurrency\DC2\SYN\n\
    \\ACKdomain\CAN\r \SOH(\rR\ACKdomain\DC2\CAN\n\
    \\aremoved\CAN\SO \SOH(\bR\aremoved\DC2\DC4\n\
    \\ENQclass\CAN\SI \SOH(\rR\ENQclass\DC2!\n\
    \\fis_temporary\CAN\DLE \SOH(\bR\visTemporary\DC2\ESC\n\
    \\tis_active\CAN\DC1 \SOH(\bR\bisActive\DC2'\n\
    \\SIexpiration_time\CAN\DC2 \SOH(\DC2R\SOexpirationTime\DC2 \n\
    \\fcast_user_id\CAN\DC3 \SOH(\tR\n\
    \castUserId\DC2\DC4\n\
    \\ENQscope\CAN\DC4 \SOH(\rR\ENQscope\DC20\n\
    \\DC4enforce_ip_whitelist\CAN\NAK \SOH(\bR\DC2enforceIpWhitelist\DC2!\n\
    \\fip_whitelist\CAN\SYN \ETX(\tR\vipWhitelist\DC2\US\n\
    \\vprofile_ids\CAN\CAN \ETX(\tR\n\
    \profileIds\"&\n\
    \\SOSubscriberType\DC2\a\n\
    \\ETXPRO\DLE\NUL\DC2\v\n\
    \\aNON_PRO\DLE\SOH\"J\n\
    \\n\
    \LoginClass\DC2\v\n\
    \\aREGULAR\DLE\SOH\DC2\SO\n\
    \\n\
    \FIX_DIRECT\DLE\STX\DC2\DC1\n\
    \\rORDER_HANDLER\DLE\ETX\DC2\f\n\
    \\bTEMPLATE\DLE\EOT\"\166\a\n\
    \\rLoginSettings\DC2%\n\
    \\SOcleared_fields\CAN\a \ETX(\rR\rclearedFields\DC2\EM\n\
    \\blogin_id\CAN\SOH \SOH(\tR\aloginId\DC2A\n\
    \\GSpreferred_connection_point_id\CAN\STX \SOH(\tR\SUBpreferredConnectionPointId\DC2<\n\
    \\SUBconcurrent_sessions_number\CAN\ETX \SOH(\rR\CANconcurrentSessionsNumber\DC24\n\
    \\SYNpassword_never_expires\CAN\EOT \SOH(\bR\DC4passwordNeverExpires\DC2A\n\
    \\ESCobsolete_is_strategy_runner\CAN\ENQ \SOH(\bR\CANobsoleteIsStrategyRunnerB\STX\CAN\SOH\DC2E\n\
    \\USpreferred_connection_point_name\CAN\ACK \SOH(\tR\FSpreferredConnectionPointName\DC2&\n\
    \\SIlinked_login_id\CAN\b \SOH(\tR\rlinkedLoginId\DC2;\n\
    \\rexternal_auth\CAN\t \SOH(\v2\SYN.common_1.ExternalAuthR\fexternalAuth\DC2*\n\
    \\DC1daily_logon_limit\CAN\n\
    \ \SOH(\rR\SIdailyLogonLimit\DC2*\n\
    \\DC1daily_logon_count\CAN\v \SOH(\rR\SIdailyLogonCount\DC23\n\
    \\NAKauthentication_system\CAN\f \SOH(\tR\DC4authenticationSystem\DC2;\n\
    \\SUBallow_exceed_account_limit\CAN\r \SOH(\bR\ETBallowExceedAccountLimit\DC2?\n\
    \\FSon_session_disconnect_action\CAN\SO \SOH(\rR\EMonSessionDisconnectAction\DC2K\n\
    \\"reconnect_timeout_after_disconnect\CAN\SI \SOH(\rR\USreconnectTimeoutAfterDisconnect\DC2\ESC\n\
    \\ttime_zone\CAN\DLE \SOH(\tR\btimeZone\"8\n\
    \\DLEDisconnectAction\DC2\v\n\
    \\aNOTHING\DLE\SOH\DC2\n\
    \\n\
    \\ACKCANCEL\DLE\STX\DC2\v\n\
    \\aSUSPEND\DLE\ETX\"\173\EOT\n\
    \\DC1UserSearchRequest\DC2'\n\
    \\robsolete_text\CAN\SOH \SOH(\tR\fobsoleteTextB\STX\CAN\SOH\DC2<\n\
    \\CANobsolete_search_criteria\CAN\STX \ETX(\rR\SYNobsoleteSearchCriteriaB\STX\CAN\SOH\DC2=\n\
    \\SOsearch_options\CAN\ETX \ETX(\v2\SYN.common_1.SearchOptionR\rsearchOptions\DC2+\n\
    \\SOall_match_mode\CAN\EOT \SOH(\b:\ENQfalseR\fallMatchMode\"\196\STX\n\
    \\SOSearchCriteria\DC2\v\n\
    \\aUSER_ID\DLE\SOH\DC2\r\n\
    \\tUSER_NAME\DLE\EOT\DC2\US\n\
    \\ESCPROFILE_SALES_SERIES_NUMBER\DLE\ENQ\DC2\GS\n\
    \\EMPROFILE_SALES_SERIES_NAME\DLE\ACK\DC2\DC3\n\
    \\SISALES_SERIES_ID\DLE\a\DC2\SI\n\
    \\vCUSTOMER_ID\DLE\b\DC2\DLE\n\
    \\fBROKERAGE_ID\DLE\t\DC2\DC2\n\
    \\SOBROKERAGE_NAME\DLE\n\
    \\DC2\t\n\
    \\ENQCLASS\DLE\v\DC2\DLE\n\
    \\fLOGIN_DOMAIN\DLE\f\DC2\SO\n\
    \\n\
    \PROFILE_ID\DLE\r\DC2\ESC\n\
    \\ETBPROFILE_SALES_SERIES_ID\DLE\SO\DC2\DC3\n\
    \\SIAUTH_PARTNER_ID\DLE\SI\DC2\DC4\n\
    \\DLEEXTERNAL_USER_ID\DLE\DLE\DC2\NAK\n\
    \\DC1AUTH_PARTNER_NAME\DLE\DC1\"\212\ETX\n\
    \\SYNUserSearchResultRecord\DC2\ETB\n\
    \\auser_id\CAN\SOH \STX(\tR\ACKuserId\DC2\ESC\n\
    \\tuser_name\CAN\STX \STX(\tR\buserName\DC2\GS\n\
    \\n\
    \first_name\CAN\ETX \SOH(\tR\tfirstName\DC2\ESC\n\
    \\tlast_name\CAN\EOT \SOH(\tR\blastName\DC2\US\n\
    \\vcustomer_id\CAN\ENQ \SOH(\tR\n\
    \customerId\DC2#\n\
    \\rcustomer_name\CAN\ACK \SOH(\tR\fcustomerName\DC26\n\
    \\ETBcustomer_brokerage_name\CAN\a \SOH(\tR\NAKcustomerBrokerageName\DC2\CAN\n\
    \\aremoved\CAN\b \SOH(\bR\aremoved\DC2\DC4\n\
    \\ENQclass\CAN\t \SOH(\rR\ENQclass\DC2!\n\
    \\fis_temporary\CAN\n\
    \ \SOH(\bR\visTemporary\DC2\GS\n\
    \\n\
    \profile_id\CAN\v \SOH(\tR\tprofileId\DC2;\n\
    \\rexternal_auth\CAN\f \SOH(\v2\SYN.common_1.ExternalAuthR\fexternalAuth\DC2\ESC\n\
    \\tis_active\CAN\r \SOH(\bR\bisActive\"\239\EOT\n\
    \\tCloneUser\DC2$\n\
    \\SOsource_user_id\CAN\SOH \SOH(\tR\fsourceUserId\DC2*\n\
    \\DC1new_user_username\CAN\STX \SOH(\tR\SInewUserUsername\DC2B\n\
    \\FSobsolete_new_user_first_name\CAN\ETX \SOH(\tR\CANobsoleteNewUserFirstNameB\STX\CAN\SOH\DC2@\n\
    \\ESCobsolete_new_user_last_name\CAN\EOT \SOH(\tR\ETBobsoleteNewUserLastNameB\STX\CAN\SOH\DC2P\n\
    \\EMobsolete_new_user_address\CAN\ENQ \SOH(\v2\DC1.common_1.AddressR\SYNobsoleteNewUserAddressB\STX\CAN\SOH\DC2]\n\
    \\FSnew_user_contact_information\CAN\ACK \SOH(\v2\FS.common_1.ContactInformationR\EMnewUserContactInformation\DC2J\n\
    \ obsolete_new_user_middle_initial\CAN\a \SOH(\tR\FSobsoleteNewUserMiddleInitialB\STX\CAN\SOH\DC2*\n\
    \\DC1target_profile_id\CAN\b \SOH(\tR\SItargetProfileId\DC2(\n\
    \\DLEno_welcome_email\CAN\t \SOH(\bR\SOnoWelcomeEmail\DC27\n\
    \\CANnew_profile_brokerage_id\CAN\n\
    \ \SOH(\tR\NAKnewProfileBrokerageId\"W\n\
    \\SICloneUserResult\DC2\RS\n\
    \\vnew_user_id\CAN\SOH \STX(\tR\tnewUserId\DC2$\n\
    \\SOnew_profile_id\CAN\STX \SOH(\tR\fnewProfileId\"\189\STX\n\
    \\aAddress\DC2%\n\
    \\SOcleared_fields\CAN\t \ETX(\rR\rclearedFields\DC2\CAN\n\
    \\acountry\CAN\SOH \SOH(\tR\acountry\DC2\DC4\n\
    \\ENQstate\CAN\STX \SOH(\tR\ENQstate\DC2\DC2\n\
    \\EOTcity\CAN\ETX \SOH(\tR\EOTcity\DC2\DLE\n\
    \\ETXzip\CAN\EOT \SOH(\tR\ETXzip\DC2\CAN\n\
    \\aaddress\CAN\ENQ \SOH(\tR\aaddress\DC2\ESC\n\
    \\taddress_2\CAN\ACK \SOH(\tR\baddress2\DC2\DC2\n\
    \\EOTname\CAN\a \SOH(\tR\EOTname\DC2%\n\
    \\SOaddress_status\CAN\b \SOH(\rR\raddressStatus\"C\n\
    \\rAddressStatus\DC2\v\n\
    \\aINVALID\DLE\NUL\DC2\t\n\
    \\ENQVALID\DLE\SOH\DC2\DC1\n\
    \\rNO_VALIDATION\DLE\STX\DC2\a\n\
    \\ETXNEW\DLE\ETX\"\238\SOH\n\
    \\DC2ContactInformation\DC2%\n\
    \\ENQemail\CAN\SOH \ETX(\v2\SI.common_1.EmailR\ENQemail\DC2%\n\
    \\ENQphone\CAN\STX \ETX(\v2\SI.common_1.PhoneR\ENQphone\DC2!\n\
    \\ETXfax\CAN\ETX \ETX(\v2\SI.common_1.PhoneR\ETXfax\DC2\GS\n\
    \\n\
    \first_name\CAN\EOT \SOH(\tR\tfirstName\DC2\ESC\n\
    \\tlast_name\CAN\ENQ \SOH(\tR\blastName\DC2+\n\
    \\aaddress\CAN\ACK \ETX(\v2\DC1.common_1.AddressR\aaddress\"\GS\n\
    \\ENQEmail\DC2\DC4\n\
    \\ENQemail\CAN\SOH \STX(\tR\ENQemail\"\US\n\
    \\ENQPhone\DC2\SYN\n\
    \\ACKnumber\CAN\SOH \STX(\tR\ACKnumber\"0\n\
    \\n\
    \CreateUser\DC2\"\n\
    \\EOTuser\CAN\SOH \STX(\v2\SO.common_1.UserR\EOTuser\"z\n\
    \\n\
    \UpdateUser\DC2\"\n\
    \\EOTuser\CAN\SOH \SOH(\v2\SO.common_1.UserR\EOTuser\DC2H\n\
    \\SYNobsolete_original_user\CAN\STX \SOH(\v2\SO.common_1.UserR\DC4obsoleteOriginalUserB\STX\CAN\SOH\"\FS\n\
    \\n\
    \RemoveUser\DC2\SO\n\
    \\STXid\CAN\SOH \STX(\tR\STXid\"\GS\n\
    \\vRestoreUser\DC2\SO\n\
    \\STXid\CAN\SOH \STX(\tR\STXid\"\"\n\
    \\DLECreateUserResult\DC2\SO\n\
    \\STXid\CAN\SOH \SOH(\tR\STXid\"\DC2\n\
    \\DLEUpdateUserResult\"\DC3\n\
    \\DC1RestoreUserResult\"\DC2\n\
    \\DLERemoveUserResult\"\144\SOH\n\
    \\SOLookupProperty\DC2\DC2\n\
    \\EOTtype\CAN\SOH \STX(\rR\EOTtype\DC2\DC4\n\
    \\ENQvalue\CAN\STX \STX(\tR\ENQvalue\DC2\"\n\
    \\EOTname\CAN\ETX \STX(\v2\SO.shared_1.TextR\EOTname\DC20\n\
    \\vdescription\CAN\EOT \SOH(\v2\SO.shared_1.TextR\vdescription\"@\n\
    \\EMLookupPropertyListRequest\DC2#\n\
    \\rproperty_type\CAN\SOH \ETX(\rR\fpropertyType\"]\n\
    \\CANLookupPropertyListResult\DC2A\n\
    \\SIlookup_property\CAN\SOH \ETX(\v2\CAN.common_1.LookupPropertyR\SOlookupProperty\"\217\STX\n\
    \\CANSalesSeriesSearchRequest\DC2'\n\
    \\robsolete_text\CAN\SOH \SOH(\tR\fobsoleteTextB\STX\CAN\SOH\DC2<\n\
    \\CANobsolete_search_criteria\CAN\STX \ETX(\rR\SYNobsoleteSearchCriteriaB\STX\CAN\SOH\DC2=\n\
    \\SOsearch_options\CAN\ETX \ETX(\v2\SYN.common_1.SearchOptionR\rsearchOptions\DC2+\n\
    \\SOall_match_mode\CAN\EOT \SOH(\b:\ENQfalseR\fallMatchMode\"j\n\
    \\SOSearchCriteria\DC2\ACK\n\
    \\STXID\DLE\SOH\DC2\n\
    \\n\
    \\ACKNUMBER\DLE\STX\DC2\b\n\
    \\EOTNAME\DLE\ETX\DC2\DLE\n\
    \\fBROKERAGE_ID\DLE\EOT\DC2\SO\n\
    \\n\
    \FIRST_NAME\DLE\ENQ\DC2\r\n\
    \\tLAST_NAME\DLE\ACK\DC2\t\n\
    \\ENQEMAIL\DLE\a\"\219\STX\n\
    \\GSSalesSeriesSearchResultRecord\DC2&\n\
    \\SIsales_series_id\CAN\SOH \SOH(\tR\rsalesSeriesId\DC2*\n\
    \\DC1sales_series_name\CAN\STX \SOH(\tR\SIsalesSeriesName\DC2.\n\
    \\DC3sales_series_number\CAN\ETX \SOH(\tR\DC1salesSeriesNumber\DC2!\n\
    \\fbrokerage_id\CAN\EOT \SOH(\tR\vbrokerageId\DC2%\n\
    \\SObrokerage_name\CAN\ENQ \SOH(\tR\rbrokerageName\DC2\CAN\n\
    \\aremoved\CAN\ACK \SOH(\bR\aremoved\DC2\SYN\n\
    \\ACKemails\CAN\a \ETX(\tR\ACKemails\DC2\GS\n\
    \\n\
    \first_name\CAN\b \SOH(\tR\tfirstName\DC2\ESC\n\
    \\tlast_name\CAN\t \SOH(\tR\blastName\"K\n\
    \\ENQTuple\DC2\DC4\n\
    \\ENQfirst\CAN\SOH \SOH(\tR\ENQfirst\DC2\SYN\n\
    \\ACKsecond\CAN\STX \SOH(\tR\ACKsecond\DC2\DC4\n\
    \\ENQthird\CAN\ETX \SOH(\tR\ENQthird\"\222\SOH\n\
    \+CustomerSalesSeriesAuthorizationListRequest\DC2\US\n\
    \\vcustomer_id\CAN\SOH \SOH(\tR\n\
    \customerId\DC2&\n\
    \\SIsales_series_id\CAN\STX \SOH(\tR\rsalesSeriesId\DC2\DLE\n\
    \\ETXtop\CAN\ETX \SOH(\rR\ETXtop\DC2\GS\n\
    \\n\
    \profile_id\CAN\EOT \SOH(\tR\tprofileId\DC25\n\
    \\ETBprofile_sales_series_id\CAN\ENQ \SOH(\tR\DC4profileSalesSeriesId\"\170\SOH\n\
    \*UpdateCustomerSalesSeriesAuthorizationList\DC2C\n\
    \\flinks_to_set\CAN\SOH \ETX(\v2!.common_1.CustomerSalesSeriesLinkR\n\
    \linksToSet\DC27\n\
    \\SIlinks_to_remove\CAN\STX \ETX(\v2\SI.common_1.TupleR\rlinksToRemove\"\181\SOH\n\
    \*CustomerSalesSeriesAuthorizationListResult\DC2`\n\
    \\ESCcustomer_sales_series_links\CAN\SOH \ETX(\v2!.common_1.CustomerSalesSeriesLinkR\CANcustomerSalesSeriesLinks\DC2%\n\
    \\vis_complete\CAN\STX \SOH(\b:\EOTtrueR\n\
    \isComplete\"2\n\
    \0UpdateCustomerSalesSeriesAuthorizationListResult\"\148\STX\n\
    \\ETBCustomerSalesSeriesLink\DC2\US\n\
    \\vcustomer_id\CAN\SOH \SOH(\tR\n\
    \customerId\DC2&\n\
    \\SIsales_series_id\CAN\STX \SOH(\tR\rsalesSeriesId\DC2*\n\
    \\DC1sales_series_name\CAN\ETX \SOH(\tR\SIsalesSeriesName\DC2.\n\
    \\DC3sales_series_number\CAN\EOT \SOH(\tR\DC1salesSeriesNumber\DC2\GS\n\
    \\n\
    \profile_id\CAN\ENQ \SOH(\tR\tprofileId\DC25\n\
    \\ETBprofile_sales_series_id\CAN\ACK \SOH(\tR\DC4profileSalesSeriesId\"1\n\
    \\DC4LoginSettingsRequest\DC2\EM\n\
    \\blogin_id\CAN\SOH \SOH(\tR\aloginId\"U\n\
    \\DC3LoginSettingsResult\DC2>\n\
    \\SOlogin_settings\CAN\SOH \SOH(\v2\ETB.common_1.LoginSettingsR\rloginSettings\"U\n\
    \\DC3UpdateLoginSettings\DC2>\n\
    \\SOlogin_settings\CAN\SOH \SOH(\v2\ETB.common_1.LoginSettingsR\rloginSettings\"\ESC\n\
    \\EMUpdateLoginSettingsResult\"=\n\
    \ LoginExchangeMemberIdListRequest\DC2\EM\n\
    \\blogin_id\CAN\SOH \SOH(\tR\aloginId\"l\n\
    \\USLoginExchangeMemberIdListResult\DC2I\n\
    \\DLElogin_member_ids\CAN\SOH \ETX(\v2\US.common_1.LoginExchangeMemberIdR\SOloginMemberIds\"p\n\
    \\NAKLoginExchangeMemberId\DC2\EM\n\
    \\blogin_id\CAN\SOH \SOH(\tR\aloginId\DC2\US\n\
    \\vexchange_id\CAN\STX \SOH(\tR\n\
    \exchangeId\DC2\ESC\n\
    \\tmember_id\CAN\ETX \SOH(\tR\bmemberId\"\202\SOH\n\
    \\USUpdateLoginExchangeMemberIdList\DC2\EM\n\
    \\blogin_id\CAN\SOH \SOH(\tR\aloginId\DC2J\n\
    \\DC1member_ids_to_set\CAN\STX \ETX(\v2\US.common_1.LoginExchangeMemberIdR\SOmemberIdsToSet\DC2@\n\
    \\DC4member_ids_to_remove\CAN\ETX \ETX(\v2\SI.common_1.TupleR\DC1memberIdsToRemove\"'\n\
    \%UpdateLoginExchangeMemberIdListResult\"*\n\
    \\rActivateLogin\DC2\EM\n\
    \\blogin_id\CAN\SOH \SOH(\tR\aloginId\"\157\SOH\n\
    \\SIDeactivateLogin\DC2\EM\n\
    \\blogin_id\CAN\SOH \SOH(\tR\aloginId\DC2'\n\
    \\SIexpiration_time\CAN\STX \SOH(\DC2R\SOexpirationTime\DC2F\n\
    \\FSclean_up_event_subscriptions\CAN\ETX \SOH(\b:\ENQfalseR\EMcleanUpEventSubscriptions\"\NAK\n\
    \\DC3ActivateLoginResult\"\ETB\n\
    \\NAKDeactivateLoginResult\"_\n\
    \\ETBEraseCurrentCredentials\DC2\EM\n\
    \\blogin_id\CAN\SOH \SOH(\tR\aloginId\DC2)\n\
    \\DLEcredential_types\CAN\STX \ETX(\rR\SIcredentialTypes\"\US\n\
    \\GSEraseCurrentCredentialsResult\"\203\SOH\n\
    \\fSearchOption\DC2\DC2\n\
    \\EOTtext\CAN\SOH \SOH(\tR\EOTtext\DC2\SUB\n\
    \\bcriteria\CAN\STX \ETX(\rR\bcriteria\DC2#\n\
    \\rmatching_rule\CAN\ETX \SOH(\rR\fmatchingRule\"f\n\
    \\fMatchingRule\DC2\f\n\
    \\bCONTAINS\DLE\NUL\DC2\SI\n\
    \\vSTARTS_WITH\DLE\SOH\DC2\r\n\
    \\tENDS_WITH\DLE\STX\DC2\DC2\n\
    \\SOEXACT_EQUALITY\DLE\ETX\DC2\DC4\n\
    \\DLEIN_MATCHING_RULE\DLE\EOT\"A\n\
    \\vNamedEntity\DC2\SO\n\
    \\STXid\CAN\SOH \SOH(\tR\STXid\DC2\"\n\
    \\EOTname\CAN\STX \SOH(\v2\SO.shared_1.TextR\EOTname\"\DEL\n\
    \\DC1UpdateEntityLinks\DC21\n\
    \\flinks_to_set\CAN\SOH \ETX(\v2\SI.common_1.TupleR\n\
    \linksToSet\DC27\n\
    \\SIlinks_to_remove\CAN\STX \ETX(\v2\SI.common_1.TupleR\rlinksToRemove\"\EM\n\
    \\ETBUpdateEntityLinksResult\";\n\
    \\ETBLinkedEntityListRequest\DC2\SO\n\
    \\STXid\CAN\SOH \SOH(\tR\STXid\DC2\DLE\n\
    \\ETXtop\CAN\STX \SOH(\rR\ETXtop\"r\n\
    \\SYNLinkedEntityListResult\DC21\n\
    \\bentities\CAN\SOH \ETX(\v2\NAK.common_1.NamedEntityR\bentities\DC2%\n\
    \\vis_complete\CAN\STX \SOH(\b:\EOTtrueR\n\
    \isComplete\"|\n\
    \\NAKSalesSeriesListResult\DC2<\n\
    \\fsales_series\CAN\SOH \ETX(\v2\EM.common_1.SalesSeriesInfoR\vsalesSeries\DC2%\n\
    \\vis_complete\CAN\STX \SOH(\b:\EOTtrueR\n\
    \isComplete\"\156\SOH\n\
    \\SISalesSeriesInfo\DC2\SO\n\
    \\STXid\CAN\SOH \SOH(\tR\STXid\DC2*\n\
    \\DC1sales_series_name\CAN\STX \SOH(\tR\SIsalesSeriesName\DC2.\n\
    \\DC3sales_series_number\CAN\ETX \SOH(\tR\DC1salesSeriesNumber\DC2\GS\n\
    \\n\
    \profile_id\CAN\EOT \SOH(\tR\tprofileId\"I\n\
    \\fExternalAuth\DC2\GS\n\
    \\n\
    \partner_id\CAN\SOH \SOH(\tR\tpartnerId\DC2\SUB\n\
    \\busername\CAN\STX \SOH(\tR\busername\"\150\SOH\n\
    \\FSUpdateLoginBillingCustomData\DC2\EM\n\
    \\blogin_id\CAN\SOH \SOH(\tR\aloginId\DC2[\n\
    \\EMlogin_billing_custom_data\CAN\STX \ETX(\v2 .common_1.LoginBillingCustomDataR\SYNloginBillingCustomData\"$\n\
    \\"UpdateLoginBillingCustomDataResult\"g\n\
    \\SYNLoginBillingCustomData\DC2\GS\n\
    \\n\
    \account_id\CAN\SOH \SOH(\tR\taccountId\DC2.\n\
    \\DC3billing_custom_data\CAN\STX \ETX(\tR\DC1billingCustomData\":\n\
    \\GSLoginBillingCustomDataRequest\DC2\EM\n\
    \\blogin_id\CAN\SOH \SOH(\tR\aloginId\"{\n\
    \\FSLoginBillingCustomDataResult\DC2[\n\
    \\EMlogin_billing_custom_data\CAN\SOH \ETX(\v2 .common_1.LoginBillingCustomDataR\SYNloginBillingCustomData\"\CAN\n\
    \\SYNTradingFeaturesRequest\"x\n\
    \\NAKTradingFeaturesResult\DC2_\n\
    \\SUBtrading_interface_elements\CAN\SOH \ETX(\v2!.common_1.TradingInterfaceElementR\CANtradingInterfaceElements\"p\n\
    \\ETBTradingInterfaceElement\DC2\SO\n\
    \\STXid\CAN\SOH \SOH(\tR\STXid\DC2\"\n\
    \\EOTname\CAN\STX \SOH(\v2\SO.shared_1.TextR\EOTname\DC2!\n\
    \\fdisable_only\CAN\ETX \SOH(\bR\vdisableOnly\"\144\EOT\n\
    \\aProfile\DC2%\n\
    \\SOcleared_fields\CAN\t \ETX(\rR\rclearedFields\DC2\US\n\
    \\vcustomer_id\CAN\SOH \SOH(\tR\n\
    \customerId\DC2\GS\n\
    \\n\
    \legal_type\CAN\STX \SOH(\rR\tlegalType\DC2\DC2\n\
    \\EOTname\CAN\ETX \SOH(\tR\EOTname\DC2M\n\
    \\DC3contact_information\CAN\EOT \SOH(\v2\FS.common_1.ContactInformationR\DC2contactInformation\DC22\n\
    \\NAKprofile_brokerage_ids\CAN\ENQ \ETX(\tR\DC3profileBrokerageIds\DC2\CAN\n\
    \\aremoved\CAN\ACK \SOH(\bR\aremoved\DC2H\n\
    \\RSobsolete_authentication_system\CAN\a \SOH(\tR\FSobsoleteAuthenticationSystemB\STX\CAN\SOH\DC2$\n\
    \\fprofile_type\CAN\b \SOH(\r:\SOH1R\vprofileType\DC2\GS\n\
    \\n\
    \profile_id\CAN\v \SOH(\tR\tprofileId\DC2&\n\
    \\SIsales_series_id\CAN\f \SOH(\tR\rsalesSeriesId\DC2\SYN\n\
    \\ACKnumber\CAN\r \SOH(\tR\ACKnumber\DC2\RS\n\
    \\n\
    \simplified\CAN\SO \SOH(\bR\n\
    \simplified\"\130\SOH\n\
    \\SOPasswordPolicy\DC2\SO\n\
    \\STXid\CAN\SOH \SOH(\ENQR\STXid\DC2$\n\
    \\ENQtitle\CAN\STX \SOH(\v2\SO.shared_1.TextR\ENQtitle\DC2$\n\
    \\ENQlabel\CAN\ETX \SOH(\v2\SO.shared_1.TextR\ENQlabel\DC2\DC4\n\
    \\ENQvalue\CAN\EOT \SOH(\ENQR\ENQvalue\"\r\n\
    \\vDataRequest\"0\n\
    \\DC1EntityDataRequest\DC2\ESC\n\
    \\tentity_id\CAN\SOH \SOH(\tR\bentityId\"2\n\
    \\DC3EntitiesDataRequest\DC2\ESC\n\
    \\tentity_id\CAN\SOH \ETX(\tR\bentityId*f\n\
    \\SIOperationStatus\DC2\v\n\
    \\aSUCCESS\DLE\SOH\DC2\v\n\
    \\aFAILURE\DLE\STX\DC2\f\n\
    \\bACCEPTED\DLE\ETX\DC2\n\
    \\n\
    \\ACKQUEUED\DLE\EOT\DC2\DC1\n\
    \\rIN_PROCESSING\DLE\ENQ\DC2\f\n\
    \\bCANCELED\DLE\ACK*C\n\
    \\vLoginDomain\DC2\NAK\n\
    \\DC1CQG_TRADE_ROUTING\DLE\STX\DC2\SO\n\
    \\n\
    \CQG_SYSTEM\DLE\ETX\DC2\r\n\
    \\tCQG_ADMIN\DLE\EOT*\168\SOH\n\
    \\CANCommonLookupPropertyType\DC2\SUB\n\
    \\NAKAUTHENTICATION_SYSTEM\DLE\201\SOH\DC2\NAK\n\
    \\DLECONNECTION_POINT\DLE\202\SOH\DC2\r\n\
    \\bEXCHANGE\DLE\203\SOH\DC2\f\n\
    \\aCOUNTRY\DLE\204\SOH\DC2\v\n\
    \\ACKREGION\DLE\205\SOH\DC2\DC3\n\
    \\SOLOG_EVENT_TYPE\DLE\206\SOH\DC2\SUB\n\
    \\NAKREGEX_VALIDATION_RULE\DLE\207\SOH*\182\SOH\n\
    \\SUBAuthServerSpecialOperation\DC2\DC2\n\
    \\SOCOMPLETE_LOGON\DLE\NUL\DC2\DLE\n\
    \\fSET_PASSWORD\DLE\SOH\DC2\ETB\n\
    \\DC3SETUP_SECOND_FACTOR\DLE\STX\DC2\ESC\n\
    \\ETBCHANGE_EXPIRED_PASSWORD\DLE\ETX\DC2\DC2\n\
    \\SOSIGN_AGREEMENT\DLE\EOT\DC2\DLE\n\
    \\fVERIFY_PHONE\DLE\ENQ\DC2\SYN\n\
    \\DC2PASS_CERTIFICATION\DLE\ACK*8\n\
    \\SOCredentialType\DC2\DC3\n\
    \\SISTATIC_PASSWORD\DLE\SOH\DC2\DC1\n\
    \\rSECOND_FACTOR\DLE\STX*\140\SOH\n\
    \\n\
    \EntityType\DC2\ETB\n\
    \\DC3ENTITY_TYPE_ACCOUNT\DLE\SOH\DC2\NAK\n\
    \\DC1ENTITY_TYPE_ORDER\DLE\STX\DC2\NAK\n\
    \\DC1ENTITY_TYPE_LOGIN\DLE\ETX\DC2\ETB\n\
    \\DC3ENTITY_TYPE_PROFILE\DLE\EOT\DC2\RS\n\
    \\SUBENTITY_TYPE_LEGAL_DOCUMENT\DLE\ENQ*\218\STX\n\
    \\SILogonResultCode\DC2\DC1\n\
    \\rLOGON_SUCCESS\DLE\NUL\DC2\DC1\n\
    \\rLOGON_FAILURE\DLEe\DC2\ETB\n\
    \\DC3NO_ONETIME_PASSWORD\DLEg\DC2\DC4\n\
    \\DLEPASSWORD_EXPIRED\DLEh\DC2\DC1\n\
    \\rROUTINE_ERROR\DLEi\DC2\DC4\n\
    \\DLEWRONG_PARAMETERS\DLEj\DC2\NAK\n\
    \\DC1USER_AUTO_LOCKOUT\DLEk\DC2\ETB\n\
    \\DC3USER_MANUAL_LOCKOUT\DLEl\DC2\US\n\
    \\ESCSECOND_FACTOR_INIT_REQUIRED\DLEm\DC2\ETB\n\
    \\DC3INCOMPATIBLE_CLIENT\DLEn\DC2\SYN\n\
    \\DC2UNSIGNED_AGREEMENT\DLEo\DC2\DC3\n\
    \\SITOO_MANY_LOGONS\DLEp\DC2\US\n\
    \\ESCPHONE_VERIFICATION_REQUIRED\DLEq\DC2\DC1\n\
    \\rACCESS_DENIED\DLEr*D\n\
    \\SIAdminLoginScope\DC2\a\n\
    \\ETXCQG\DLE\SOH\DC2\r\n\
    \\tBROKERAGE\DLE\STX\DC2\r\n\
    \\tSALES_REP\DLE\ETX\DC2\n\
    \\n\
    \\ACKTRADER\DLE\EOT*x\n\
    \\DLEAuthActivityType\DC2\t\n\
    \\ENQLOGIN\DLE\SOH\DC2\DC3\n\
    \\SIPASSWORD_CHANGE\DLE\STX\DC2\DC1\n\
    \\rCLEAR_LOCKOUT\DLE\ETX\DC2\SO\n\
    \\n\
    \CHANGE_2FA\DLE\EOT\DC2\r\n\
    \\tERASE_2FA\DLE\ENQ\DC2\DC2\n\
    \\SOERASE_PASSWORD\DLE\ACK*^\n\
    \\tLegalType\DC2\SO\n\
    \\n\
    \INDIVIDUAL\DLE\SOH\DC2\t\n\
    \\ENQJOINT\DLE\STX\DC2\v\n\
    \\aLIMITED\DLE\ETX\DC2\t\n\
    \\ENQTRUST\DLE\EOT\DC2\r\n\
    \\tCORPORATE\DLE\ENQ\DC2\SI\n\
    \\vPARTNERSHIP\DLE\ACK*\152\SOH\n\
    \\vProfileType\DC2\EM\n\
    \\NAKPROFILE_TYPE_CUSTOMER\DLE\SOH\DC2\SYN\n\
    \\DC2PROFILE_TYPE_ADMIN\DLE\STX\DC2\SUB\n\
    \\SYNPROFILE_TYPE_BROKERAGE\DLE\ETX\DC2\ESC\n\
    \\ETBPROFILE_TYPE_SUBSCRIBER\DLE\EOT\DC2\GS\n\
    \\EMPROFILE_TYPE_SALES_SERIES\DLE\ENQ*\158\ETX\n\
    \\DC2InternalEntityType\DC2 \n\
    \\FSINTERNAL_ENTITY_TYPE_ACCOUNT\DLE\SOH\DC2\RS\n\
    \\SUBINTERNAL_ENTITY_TYPE_ORDER\DLE\STX\DC2\US\n\
    \\ESCINTERNAL_ENTITY_TYPE_TRADER\DLE\ETX\DC2!\n\
    \\GSINTERNAL_ENTITY_TYPE_CUSTOMER\DLE\EOT\DC2\US\n\
    \\ESCINTERNAL_ENTITY_TYPE_SYSTEM\DLE\ENQ\DC2\"\n\
    \\RSINTERNAL_ENTITY_TYPE_CAST_USER\DLE\ACK\DC2%\n\
    \!INTERNAL_ENTITY_TYPE_SALES_SERIES\DLE\a\DC2\FS\n\
    \\CANINTERNAL_ENTITY_TYPE_FCM\DLE\b\DC2$\n\
    \ INTERNAL_ENTITY_TYPE_ROUTE_GROUP\DLE\t\DC2!\n\
    \\GSINTERNAL_ENTITY_TYPE_EXCHANGE\DLE\n\
    \\DC2/\n\
    \+INTERNAL_ENTITY_TYPE_EXECUTION_SYSTEM_ROUTE\DLE\vJ\175\208\ETX\n\
    \\a\DC2\ENQ\ENQ\NUL\221\r\SOH\n\
    \f\n\
    \\SOH\f\DC2\ETX\ENQ\NUL\DC22\\ CQG common messages in API Protocols\n\
    \\n\
    \ Last changes were made on 30 Aug 2024\n\
    \ Version 1.63\n\
    \\n\
    \\t\n\
    \\STX\ETX\NUL\DC2\ETX\a\NUL\US\n\
    \\b\n\
    \\SOH\STX\DC2\ETX\t\NUL\DC1\n\
    \]\n\
    \\STX\EOT\NUL\DC2\EOT\SI\NUL.\SOH\SUB\SYN Message from server.\n\
    \29//------------------------------------------\n\
    \// Messages\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\NUL\SOH\DC2\ETX\SI\b\DC3\n\
    \$\n\
    \\EOT\EOT\NUL\EOT\NUL\DC2\EOT\DC2\EOT\US\ENQ\SUB\SYN Type of the message.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\EOT\NUL\SOH\DC2\ETX\DC2\t\DC4\n\
    \(\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\NUL\DC2\ETX\NAK\b\ESC\SUB\EM Critical error message.\n\
    \\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\NUL\SOH\DC2\ETX\NAK\b\SYN\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\NUL\STX\DC2\ETX\NAK\EM\SUB\n\
    \\EM\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\SOH\DC2\ETX\CAN\b\DC4\SUB\n\
    \ Warning.\n\
    \\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\SOH\SOH\DC2\ETX\CAN\b\SI\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\SOH\STX\DC2\ETX\CAN\DC2\DC3\n\
    \%\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\STX\DC2\ETX\ESC\b\DC1\SUB\SYN General information.\n\
    \\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\STX\SOH\DC2\ETX\ESC\b\f\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\STX\STX\DC2\ETX\ESC\SI\DLE\n\
    \Z\n\
    \\ACK\EOT\NUL\EOT\NUL\STX\ETX\DC2\ETX\RS\b\DLE\SUBK This message shouldn't be visible for users, only dumped into a log file.\n\
    \\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\ETX\SOH\DC2\ETX\RS\b\v\n\
    \\SO\n\
    \\a\EOT\NUL\EOT\NUL\STX\ETX\STX\DC2\ETX\RS\SO\SI\n\
    \C\n\
    \\EOT\EOT\NUL\STX\NUL\DC2\ETX!\EOT%\SUB6 This field is associated with MessageType enum type.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\EOT\DC2\ETX!\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\ENQ\DC2\ETX!\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\SOH\DC2\ETX!\DC4 \n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\ETX\DC2\ETX!#$\n\
    \7\n\
    \\EOT\EOT\NUL\STX\SOH\DC2\ETX$\EOT\US\SUB* Information about source of the message.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\EOT\DC2\ETX$\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\ENQ\DC2\ETX$\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\SOH\DC2\ETX$\DC4\SUB\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\ETX\DC2\ETX$\GS\RS\n\
    \\US\n\
    \\EOT\EOT\NUL\STX\STX\DC2\ETX'\EOT \SUB\DC2 Message subject.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\EOT\DC2\ETX'\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\ENQ\DC2\ETX'\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\SOH\DC2\ETX'\DC4\ESC\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\STX\ETX\DC2\ETX'\RS\US\n\
    \\FS\n\
    \\EOT\EOT\NUL\STX\ETX\DC2\ETX*\EOT$\SUB\SI Message text.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\EOT\DC2\ETX*\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\ACK\DC2\ETX*\r\SUB\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\SOH\DC2\ETX*\ESC\US\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\ETX\ETX\DC2\ETX*\"#\n\
    \o\n\
    \\EOT\EOT\NUL\STX\EOT\DC2\ETX-\EOT,\SUBb Optional time when this message is expired, it should be hidden from user after this time (UTC).\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\EOT\EOT\DC2\ETX-\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\EOT\ENQ\DC2\ETX-\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\EOT\SOH\DC2\ETX-\DC4'\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\EOT\ETX\DC2\ETX-*+\n\
    \9\n\
    \\STX\EOT\SOH\DC2\EOT2\NULm\SOH\SUB- Logon to the system and open a new session.\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\SOH\SOH\DC2\ETX2\b\r\n\
    \>\n\
    \\EOT\EOT\SOH\EOT\NUL\DC2\EOT5\EOT@\ENQ\SUB0 Session settings for additional functionality.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\EOT\NUL\SOH\DC2\ETX5\t\ETB\n\
    \\229\STX\n\
    \\ACK\EOT\SOH\EOT\NUL\STX\NUL\DC2\ETX:\b\"\SUB\213\STX Allows restoring session in case of an accidental disconnect (see RestoreOrJoinSession message).\n\
    \ If the setting is not specified then termination of the last connection also terminates the session without ability to restore it.\n\
    \ For security reasons clients should not specify this setting without using the restore session functionality.\n\
    \\n\
    \\SO\n\
    \\a\EOT\SOH\EOT\NUL\STX\NUL\SOH\DC2\ETX:\b\GS\n\
    \\SO\n\
    \\a\EOT\SOH\EOT\NUL\STX\NUL\STX\DC2\ETX: !\n\
    \\147\ETX\n\
    \\ACK\EOT\SOH\EOT\NUL\STX\SOH\DC2\ETX?\b\US\SUB\131\ETX Allows other new connections to join the session (see RestoreOrJoinSession message) and work concurrently.\n\
    \ If the setting is not specified then the session can have only one connection at each moment and a new connection pushes the old one out (if the session restore is allowed).\n\
    \ For security reasons clients should not specify this setting without using join session functionality.\n\
    \\n\
    \\SO\n\
    \\a\EOT\SOH\EOT\NUL\STX\SOH\SOH\DC2\ETX?\b\SUB\n\
    \\SO\n\
    \\a\EOT\SOH\EOT\NUL\STX\SOH\STX\DC2\ETX?\GS\RS\n\
    \\137\SOH\n\
    \\EOT\EOT\SOH\STX\NUL\DC2\ETXC\EOT/\SUB| [required] Current protocol version that is used by a client. Client has to fill it with values from ProtocolVersion enum.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\EOT\DC2\ETXC\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\ENQ\DC2\ETXC\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\SOH\DC2\ETXC\DC4*\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\ETX\DC2\ETXC-.\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\SOH\DC2\ETXD\EOT/\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\EOT\DC2\ETXD\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\ENQ\DC2\ETXD\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\SOH\DC2\ETXD\DC4*\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\ETX\DC2\ETXD-.\n\
    \@\n\
    \\EOT\EOT\SOH\STX\STX\DC2\ETXH\EOT\"\SUB3 Username.\n\
    \ Ignored when access_token is provided.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\EOT\DC2\ETXH\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\ENQ\DC2\ETXH\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\SOH\DC2\ETXH\DC4\GS\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\STX\ETX\DC2\ETXH !\n\
    \E\n\
    \\EOT\EOT\SOH\STX\ETX\DC2\ETXL\EOT!\SUB8 User password.\n\
    \ Ignored when access_token is provided.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\EOT\DC2\ETXL\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\ENQ\DC2\ETXL\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\SOH\DC2\ETXL\DC4\FS\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ETX\ETX\DC2\ETXL\US \n\
    \m\n\
    \\EOT\EOT\SOH\STX\EOT\DC2\ETXP\EOT&\SUB` Identifier of a client application as assigned by CQG.\n\
    \ Ignored when access_token is provided.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\EOT\DC2\ETXP\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\ENQ\DC2\ETXP\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\SOH\DC2\ETXP\DC4!\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\EOT\ETX\DC2\ETXP$%\n\
    \/\n\
    \\EOT\EOT\SOH\STX\ENQ\DC2\ETXS\EOT'\SUB\" Version of a client application.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ENQ\EOT\DC2\ETXS\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ENQ\ENQ\DC2\ETXS\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ENQ\SOH\DC2\ETXS\DC4\"\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ENQ\ETX\DC2\ETXS%&\n\
    \k\n\
    \\EOT\EOT\SOH\STX\ACK\DC2\ETXW\EOT)\SUB^ List of settings for a new session.\n\
    \ This field is associated with SessionSetting enum type.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ACK\EOT\DC2\ETXW\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ACK\ENQ\DC2\ETXW\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ACK\SOH\DC2\ETXW\DC4$\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\ACK\ETX\DC2\ETXW'(\n\
    \\157\STX\n\
    \\EOT\EOT\SOH\STX\a\DC2\ETX\\\EOT.\SUB\143\STX Optional field that indicates if possible concurrent sessions for this user should be forcedly dropped.\n\
    \ If it is set to false then Logon may fail with corresponding error message.\n\
    \ If it is omitted or set to true then concurrent sessions for this user will be dropped.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\a\EOT\DC2\ETX\\\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\a\ENQ\DC2\ETX\\\r\DC1\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\a\SOH\DC2\ETX\\\DC2)\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\a\ETX\DC2\ETX\\,-\n\
    \J\n\
    \\EOT\EOT\SOH\STX\b\DC2\ETX`\EOT&\SUB= Private label name.\n\
    \ Ignored when access_token is provided.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\b\EOT\DC2\ETX`\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\b\ENQ\DC2\ETX`\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\b\SOH\DC2\ETX`\DC4!\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\b\ETX\DC2\ETX`$%\n\
    \1\n\
    \\EOT\EOT\SOH\STX\t\DC2\ETXc\EOT&\SUB$ Access token from CQG auth server.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\t\EOT\DC2\ETXc\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\t\ENQ\DC2\ETXc\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\t\SOH\DC2\ETXc\DC4 \n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\t\ETX\DC2\ETXc#%\n\
    \\134\SOH\n\
    \\EOT\EOT\SOH\STX\n\
    \\DC2\ETXg\EOTL\SUBy Indicates that CMS API must notify client with additional requests statuses:\n\
    \ ACCEPTED, QUEUED, IN_PROCESSING, CANCELED\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\n\
    \\EOT\DC2\ETXg\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\n\
    \\ENQ\DC2\ETXg\r\DC1\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\n\
    \\SOH\DC2\ETXg\DC24\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\n\
    \\ETX\DC2\ETXg79\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\n\
    \\b\DC2\ETXg:K\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\n\
    \\a\DC2\ETXgEJ\n\
    \\207\SOH\n\
    \\EOT\EOT\SOH\STX\v\DC2\ETXl\b1\SUB\193\SOH Overwrites this parameter for messages for this session.\n\
    \ This period is max time period to keep a deferred request in the queue (minutes).\n\
    \ After this period the request is (auto-)cancelled.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\v\EOT\DC2\ETXl\b\DLE\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\v\ENQ\DC2\ETXl\DC1\ETB\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\v\SOH\DC2\ETXl\CAN+\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\v\ETX\DC2\ETXl.0\n\
    \\212\STX\n\
    \\STX\EOT\STX\DC2\ENQs\NUL\142\SOH\SOH\SUB\198\STX Client request to restore session because of accidental disconnect or join the same session.\n\
    \ In non-trusted mode, this operation is possible only from the same IP address.\n\
    \ Permissions to use this functionality is regulated by ALLOW_SESSION_RESTORE/ALLOW_SESSION_JOIN session settings\n\
    \ which are specified in Logon message.\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\STX\SOH\DC2\ETXs\b\FS\n\
    \2\n\
    \\EOT\EOT\STX\EOT\NUL\DC2\EOTv\EOT}\ENQ\SUB$ Type of operation on user session.\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\STX\EOT\NUL\SOH\DC2\ETXv\t\SYN\n\
    \!\n\
    \\ACK\EOT\STX\EOT\NUL\STX\NUL\DC2\ETXy\b\DC4\SUB\DC2 Restore session.\n\
    \\n\
    \\SO\n\
    \\a\EOT\STX\EOT\NUL\STX\NUL\SOH\DC2\ETXy\b\SI\n\
    \\SO\n\
    \\a\EOT\STX\EOT\NUL\STX\NUL\STX\DC2\ETXy\DC2\DC3\n\
    \\RS\n\
    \\ACK\EOT\STX\EOT\NUL\STX\SOH\DC2\ETX|\b\DC1\SUB\SI Join session.\n\
    \\n\
    \\SO\n\
    \\a\EOT\STX\EOT\NUL\STX\SOH\SOH\DC2\ETX|\b\f\n\
    \\SO\n\
    \\a\EOT\STX\EOT\NUL\STX\SOH\STX\DC2\ETX|\SI\DLE\n\
    \b\n\
    \\EOT\EOT\STX\STX\NUL\DC2\EOT\128\SOH\EOT&\SUBT Token of the session to restore or join, it has limited lifetime after disconnect.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\NUL\EOT\DC2\EOT\128\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\NUL\ENQ\DC2\EOT\128\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\NUL\SOH\DC2\EOT\128\SOH\DC4!\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\NUL\ETX\DC2\EOT\128\SOH$%\n\
    \H\n\
    \\EOT\EOT\STX\STX\SOH\DC2\EOT\131\SOH\EOT&\SUB: Identifier of the client application as assigned by CQG.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\SOH\EOT\DC2\EOT\131\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\SOH\ENQ\DC2\EOT\131\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\SOH\SOH\DC2\EOT\131\SOH\DC4!\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\SOH\ETX\DC2\EOT\131\SOH$%\n\
    \\132\SOH\n\
    \\EOT\EOT\STX\STX\STX\DC2\EOT\134\SOH\EOT*\SUBv Can be used by trusted clients (components connected in trust mode) to specify real client IP they act on behalf of.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\STX\EOT\DC2\EOT\134\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\STX\ENQ\DC2\EOT\134\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\STX\SOH\DC2\EOT\134\SOH\DC4%\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\STX\ETX\DC2\EOT\134\SOH()\n\
    \\135\SOH\n\
    \\EOT\EOT\STX\STX\ETX\DC2\EOT\138\SOH\EOTK\SUBy Indicates that CMS API must notify client with additional requests statuses:\n\
    \ ACCEPTED, QUEUED, IN_PROCESSING, CANCELED\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ETX\EOT\DC2\EOT\138\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ETX\ENQ\DC2\EOT\138\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ETX\SOH\DC2\EOT\138\SOH\DC24\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ETX\ETX\DC2\EOT\138\SOH78\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ETX\b\DC2\EOT\138\SOH9J\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\ETX\a\DC2\EOT\138\SOHDI\n\
    \A\n\
    \\EOT\EOT\STX\STX\EOT\DC2\EOT\141\SOH\EOT'\SUB3 This field is associated with OperationType enum.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\EOT\EOT\DC2\EOT\141\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\EOT\ENQ\DC2\EOT\141\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\EOT\SOH\DC2\EOT\141\SOH\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\STX\STX\EOT\ETX\DC2\EOT\141\SOH%&\n\
    \\US\n\
    \\STX\EOT\ETX\DC2\ACK\145\SOH\NUL\147\SOH\SOH\SUB\DC1 Logoff session.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\ETX\SOH\DC2\EOT\145\SOH\b\SO\n\
    \\f\n\
    \\STX\EOT\EOT\DC2\ACK\149\SOH\NUL\156\SOH\SOH\n\
    \\v\n\
    \\ETX\EOT\EOT\SOH\DC2\EOT\149\SOH\b\DC3\n\
    \#\n\
    \\EOT\EOT\EOT\STX\NUL\DC2\EOT\152\SOH\EOT\"\SUB\NAK User name to login.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\NUL\EOT\DC2\EOT\152\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\NUL\ENQ\DC2\EOT\152\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\NUL\SOH\DC2\EOT\152\SOH\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\NUL\ETX\DC2\EOT\152\SOH !\n\
    \\RS\n\
    \\EOT\EOT\EOT\STX\SOH\DC2\EOT\155\SOH\EOT!\SUB\DLE User password.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\SOH\EOT\DC2\EOT\155\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\SOH\ENQ\DC2\EOT\155\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\SOH\SOH\DC2\EOT\155\SOH\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT\EOT\STX\SOH\ETX\DC2\EOT\155\SOH\US \n\
    \.\n\
    \\STX\EOT\ENQ\DC2\ACK\159\SOH\NUL\174\SOH\SOH\SUB  Result of the Logon operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\ENQ\SOH\DC2\EOT\159\SOH\b\DC3\n\
    \M\n\
    \\EOT\EOT\ENQ\STX\NUL\DC2\EOT\162\SOH\EOT/\SUB? Current protocol version of the server. For information only.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\NUL\EOT\DC2\EOT\162\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\NUL\ENQ\DC2\EOT\162\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\NUL\SOH\DC2\EOT\162\SOH\DC4*\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\NUL\ETX\DC2\EOT\162\SOH-.\n\
    \\f\n\
    \\EOT\EOT\ENQ\STX\SOH\DC2\EOT\163\SOH\EOT/\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\SOH\EOT\DC2\EOT\163\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\SOH\ENQ\DC2\EOT\163\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\SOH\SOH\DC2\EOT\163\SOH\DC4*\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\SOH\ETX\DC2\EOT\163\SOH-.\n\
    \V\n\
    \\EOT\EOT\ENQ\STX\STX\DC2\EOT\167\SOH\EOT)\SUBH Operation status.\n\
    \ This field is associated with OperationStatus enum.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\STX\EOT\DC2\EOT\167\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\STX\ENQ\DC2\EOT\167\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\STX\SOH\DC2\EOT\167\SOH\DC4$\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\STX\ETX\DC2\EOT\167\SOH'(\n\
    \1\n\
    \\EOT\EOT\ENQ\STX\ETX\DC2\EOT\170\SOH\EOT-\SUB# Message in case of logon failure.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ETX\EOT\DC2\EOT\170\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ETX\ACK\DC2\EOT\170\SOH\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ETX\SOH\DC2\EOT\170\SOH\ESC(\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\ETX\ETX\DC2\EOT\170\SOH+,\n\
    \:\n\
    \\EOT\EOT\ENQ\STX\EOT\DC2\EOT\173\SOH\EOT&\SUB, Token of a new session if logon succeeded.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\EOT\EOT\DC2\EOT\173\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\EOT\ENQ\DC2\EOT\173\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\EOT\SOH\DC2\EOT\173\SOH\DC4!\n\
    \\r\n\
    \\ENQ\EOT\ENQ\STX\EOT\ETX\DC2\EOT\173\SOH$%\n\
    \:\n\
    \\STX\EOT\ACK\DC2\ACK\177\SOH\NUL\184\SOH\SOH\SUB, Result of session restore or join attempt.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\ACK\SOH\DC2\EOT\177\SOH\b\"\n\
    \C\n\
    \\EOT\EOT\ACK\STX\NUL\DC2\EOT\180\SOH\EOT)\SUB5 This field is associated with OperationStatus enum.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NUL\EOT\DC2\EOT\180\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NUL\ENQ\DC2\EOT\180\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NUL\SOH\DC2\EOT\180\SOH\DC4$\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\NUL\ETX\DC2\EOT\180\SOH'(\n\
    \+\n\
    \\EOT\EOT\ACK\STX\SOH\DC2\EOT\183\SOH\EOT-\SUB\GS Message in case of failure.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SOH\EOT\DC2\EOT\183\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SOH\ACK\DC2\EOT\183\SOH\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SOH\SOH\DC2\EOT\183\SOH\ESC(\n\
    \\r\n\
    \\ENQ\EOT\ACK\STX\SOH\ETX\DC2\EOT\183\SOH+,\n\
    \o\n\
    \\STX\EOT\a\DC2\ACK\188\SOH\NUL\192\SOH\SOH\SUBa Server notification about closing user's session,\n\
    \ server closes connection after this message.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\a\SOH\DC2\EOT\188\SOH\b\DC1\n\
    \\RS\n\
    \\EOT\EOT\a\STX\NUL\DC2\EOT\191\SOH\EOT&\SUB\DLE Logoff reason.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\a\STX\NUL\EOT\DC2\EOT\191\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\a\STX\NUL\ACK\DC2\EOT\191\SOH\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\a\STX\NUL\SOH\DC2\EOT\191\SOH\ESC!\n\
    \\r\n\
    \\ENQ\EOT\a\STX\NUL\ETX\DC2\EOT\191\SOH$%\n\
    \2\n\
    \\STX\EOT\b\DC2\ACK\195\SOH\NUL\197\SOH\SOH\SUB$ Request of entitlement categories.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\b\SOH\DC2\EOT\195\SOH\b&\n\
    \;\n\
    \\STX\EOT\t\DC2\ACK\200\SOH\NUL\204\SOH\SOH\SUB- Request of entitlement service information.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\t\SOH\DC2\EOT\200\SOH\b!\n\
    \,\n\
    \\EOT\EOT\t\STX\NUL\DC2\EOT\203\SOH\EOT/\SUB\RS Id of the requested service.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\EOT\DC2\EOT\203\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\ENQ\DC2\EOT\203\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\SOH\DC2\EOT\203\SOH\DC4*\n\
    \\r\n\
    \\ENQ\EOT\t\STX\NUL\ETX\DC2\EOT\203\SOH-.\n\
    \]\n\
    \\STX\EOT\n\
    \\DC2\ACK\208\SOH\NUL\216\SOH\SOH\SUBO Request of entitlement service list\n\
    \ available for the current session login.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\n\
    \\SOH\DC2\EOT\208\SOH\b%\n\
    \w\n\
    \\EOT\EOT\n\
    \\STX\NUL\DC2\EOT\211\SOH\ETX$\SUBi Optional list of brokerage IDs. If it is not specified all brokerages for current session will be used.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\NUL\EOT\DC2\EOT\211\SOH\ETX\v\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\NUL\ENQ\DC2\EOT\211\SOH\f\DC2\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\NUL\SOH\DC2\EOT\211\SOH\DC3\US\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\NUL\ETX\DC2\EOT\211\SOH\"#\n\
    \{\n\
    \\EOT\EOT\n\
    \\STX\SOH\DC2\EOT\215\SOH\ETX7\SUBm Indicates that CMS API must return retired services as well.\n\
    \ By default retired services are not returned.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\EOT\DC2\EOT\215\SOH\ETX\v\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\ENQ\DC2\EOT\215\SOH\f\DLE\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\SOH\DC2\EOT\215\SOH\DC1 \n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\ETX\DC2\EOT\215\SOH#$\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\b\DC2\EOT\215\SOH%6\n\
    \\r\n\
    \\ENQ\EOT\n\
    \\STX\SOH\a\DC2\EOT\215\SOH05\n\
    \,\n\
    \\STX\EOT\v\DC2\ACK\219\SOH\NUL\174\STX\SOH\SUB\RS Entitlement Service details.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\v\SOH\DC2\EOT\219\SOH\b\SUB\n\
    \-\n\
    \\EOT\EOT\v\EOT\NUL\DC2\ACK\222\SOH\EOT\228\SOH\ENQ\SUB\GS Service authorization type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\EOT\NUL\SOH\DC2\EOT\222\SOH\t\SUB\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\NUL\DC2\EOT\224\SOH\b\EM\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\NUL\SOH\DC2\EOT\224\SOH\b\DC4\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\NUL\STX\DC2\EOT\224\SOH\ETB\CAN\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\SOH\DC2\EOT\225\SOH\b\SYN\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\SOH\SOH\DC2\EOT\225\SOH\b\DC1\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\SOH\STX\DC2\EOT\225\SOH\DC4\NAK\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\STX\DC2\EOT\226\SOH\b\CAN\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\STX\SOH\DC2\EOT\226\SOH\b\DC3\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\STX\STX\DC2\EOT\226\SOH\SYN\ETB\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\ETX\DC2\EOT\227\SOH\b\EM\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\ETX\SOH\DC2\EOT\227\SOH\b\DC4\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\ETX\STX\DC2\EOT\227\SOH\ETB\CAN\n\
    \*\n\
    \\EOT\EOT\v\EOT\SOH\DC2\ACK\231\SOH\EOT\235\SOH\ENQ\SUB\SUB Special service options.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\EOT\SOH\SOH\DC2\EOT\231\SOH\t\SYN\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\SOH\STX\NUL\DC2\EOT\233\SOH\b\GS\n\
    \\SI\n\
    \\a\EOT\v\EOT\SOH\STX\NUL\SOH\DC2\EOT\233\SOH\b\CAN\n\
    \\SI\n\
    \\a\EOT\v\EOT\SOH\STX\NUL\STX\DC2\EOT\233\SOH\ESC\FS\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\SOH\STX\SOH\DC2\EOT\234\SOH\b\GS\n\
    \\SI\n\
    \\a\EOT\v\EOT\SOH\STX\SOH\SOH\DC2\EOT\234\SOH\b\CAN\n\
    \\SI\n\
    \\a\EOT\v\EOT\SOH\STX\SOH\STX\DC2\EOT\234\SOH\ESC\FS\n\
    \\ESC\n\
    \\EOT\EOT\v\STX\NUL\DC2\EOT\238\SOH\EOT\ESC\SUB\r Identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\NUL\EOT\DC2\EOT\238\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\NUL\ENQ\DC2\EOT\238\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\v\STX\NUL\SOH\DC2\EOT\238\SOH\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT\v\STX\NUL\ETX\DC2\EOT\238\SOH\EM\SUB\n\
    \\NAK\n\
    \\EOT\EOT\v\STX\SOH\DC2\EOT\241\SOH\EOT$\SUB\a Name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SOH\EOT\DC2\EOT\241\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SOH\ACK\DC2\EOT\241\SOH\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SOH\SOH\DC2\EOT\241\SOH\ESC\US\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SOH\ETX\DC2\EOT\241\SOH\"#\n\
    \:\n\
    \\EOT\EOT\v\STX\STX\DC2\EOT\244\SOH\EOT$\SUB, List of assigned entitlement category IDs.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\STX\EOT\DC2\EOT\244\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\STX\ENQ\DC2\EOT\244\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\v\STX\STX\SOH\DC2\EOT\244\SOH\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\v\STX\STX\ETX\DC2\EOT\244\SOH\"#\n\
    \\US\n\
    \\EOT\EOT\v\STX\ETX\DC2\EOT\247\SOH\EOT\GS\SUB\DC1 Service prices.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ETX\EOT\DC2\EOT\247\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ETX\ACK\DC2\EOT\247\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ETX\SOH\DC2\EOT\247\SOH\DC3\CAN\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ETX\ETX\DC2\EOT\247\SOH\ESC\FS\n\
    \\FS\n\
    \\EOT\EOT\v\STX\EOT\DC2\EOT\250\SOH\EOT+\SUB\SO Description.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\EOT\EOT\DC2\EOT\250\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\EOT\ACK\DC2\EOT\250\SOH\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\v\STX\EOT\SOH\DC2\EOT\250\SOH\ESC&\n\
    \\r\n\
    \\ENQ\EOT\v\STX\EOT\ETX\DC2\EOT\250\SOH)*\n\
    \r\n\
    \\EOT\EOT\v\STX\ENQ\DC2\EOT\254\SOH\EOT+\SUBd Authorization Type.\n\
    \ This field is associated with EntitlementService.AuthorizationType enum type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ENQ\EOT\DC2\EOT\254\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ENQ\ENQ\DC2\EOT\254\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ENQ\SOH\DC2\EOT\254\SOH\DC4&\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ENQ\ETX\DC2\EOT\254\SOH)*\n\
    \1\n\
    \\EOT\EOT\v\STX\ACK\DC2\EOT\129\STX\EOT2\SUB# List of this service constraints.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ACK\EOT\DC2\EOT\129\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ACK\ACK\DC2\EOT\129\STX\r\"\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ACK\SOH\DC2\EOT\129\STX#-\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ACK\ETX\DC2\EOT\129\STX01\n\
    \\138\SOH\n\
    \\EOT\EOT\v\STX\a\DC2\EOT\133\STX\EOTD\SUB| [obsolete] Indicates if a separate agreement is required according to\n\
    \ original service provider rules (False if omitted).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\a\EOT\DC2\EOT\133\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\a\ENQ\DC2\EOT\133\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\v\STX\a\SOH\DC2\EOT\133\STX\DC2-\n\
    \\r\n\
    \\ENQ\EOT\v\STX\a\ETX\DC2\EOT\133\STX01\n\
    \\r\n\
    \\ENQ\EOT\v\STX\a\b\DC2\EOT\133\STX2C\n\
    \\SO\n\
    \\ACK\EOT\v\STX\a\b\ETX\DC2\EOT\133\STX3B\n\
    \3\n\
    \\EOT\EOT\v\STX\b\DC2\EOT\136\STX\EOTD\SUB% [obsolete] Optional agreement text.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\b\EOT\DC2\EOT\136\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\b\ACK\DC2\EOT\136\STX\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\v\STX\b\SOH\DC2\EOT\136\STX\ESC-\n\
    \\r\n\
    \\ENQ\EOT\v\STX\b\ETX\DC2\EOT\136\STX01\n\
    \\r\n\
    \\ENQ\EOT\v\STX\b\b\DC2\EOT\136\STX2C\n\
    \\SO\n\
    \\ACK\EOT\v\STX\b\b\ETX\DC2\EOT\136\STX3B\n\
    \\187\SOH\n\
    \\EOT\EOT\v\STX\t\DC2\EOT\141\STX\EOT)\SUB\172\SOH Optional link of a service to a subscriber type.\n\
    \ The service is allowed for any subscriber type if omitted.\n\
    \ This field is associated with User.SubscriberType enum type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\t\EOT\DC2\EOT\141\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\t\ENQ\DC2\EOT\141\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\v\STX\t\SOH\DC2\EOT\141\STX\DC4#\n\
    \\r\n\
    \\ENQ\EOT\v\STX\t\ETX\DC2\EOT\141\STX&(\n\
    \l\n\
    \\EOT\EOT\v\STX\n\
    \\DC2\EOT\144\STX\EOT2\SUB^ Indicates whether billing brokerage is mandatory in order to enable the service for a login.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\n\
    \\EOT\DC2\EOT\144\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\n\
    \\ENQ\DC2\EOT\144\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\v\STX\n\
    \\SOH\DC2\EOT\144\STX\DC2,\n\
    \\r\n\
    \\ENQ\EOT\v\STX\n\
    \\ETX\DC2\EOT\144\STX/1\n\
    \T\n\
    \\EOT\EOT\v\STX\v\DC2\EOT\148\STX\EOT'\SUBF Login domains.\n\
    \ This field is associated with LoginDomain enum type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\v\EOT\DC2\EOT\148\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\v\ENQ\DC2\EOT\148\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\v\STX\v\SOH\DC2\EOT\148\STX\DC4!\n\
    \\r\n\
    \\ENQ\EOT\v\STX\v\ETX\DC2\EOT\148\STX$&\n\
    \k\n\
    \\EOT\EOT\v\STX\f\DC2\EOT\152\STX\EOT!\SUB] Special options.\n\
    \ This field is associated with EntitlementService.ServiceOption enum type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\f\EOT\DC2\EOT\152\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\f\ENQ\DC2\EOT\152\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\v\STX\f\SOH\DC2\EOT\152\STX\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT\v\STX\f\ETX\DC2\EOT\152\STX\RS \n\
    \\US\n\
    \\EOT\EOT\v\STX\r\DC2\EOT\155\STX\EOT/\SUB\DC1 Included items.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\r\EOT\DC2\EOT\155\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\r\ACK\DC2\EOT\155\STX\r#\n\
    \\r\n\
    \\ENQ\EOT\v\STX\r\SOH\DC2\EOT\155\STX$)\n\
    \\r\n\
    \\ENQ\EOT\v\STX\r\ETX\DC2\EOT\155\STX,.\n\
    \\\\n\
    \\EOT\EOT\v\STX\SO\DC2\EOT\158\STX\EOT,\SUBN Indicates whether brokerage can be assigned for the services in for a login.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SO\EOT\DC2\EOT\158\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SO\ENQ\DC2\EOT\158\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SO\SOH\DC2\EOT\158\STX\DC2&\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SO\ETX\DC2\EOT\158\STX)+\n\
    \\130\SOH\n\
    \\EOT\EOT\v\STX\SI\DC2\EOT\161\STX\EOT8\SUBt Indicates whether service requires explicit brokerage authorization in order to be available for brokerage logins.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SI\EOT\DC2\EOT\161\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SI\ENQ\DC2\EOT\161\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SI\SOH\DC2\EOT\161\STX\DC22\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SI\ETX\DC2\EOT\161\STX57\n\
    \H\n\
    \\EOT\EOT\v\STX\DLE\DC2\EOT\164\STX\EOT\US\SUB: Service will be added to newly created login by default.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DLE\EOT\DC2\EOT\164\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DLE\ENQ\DC2\EOT\164\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DLE\SOH\DC2\EOT\164\STX\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DLE\ETX\DC2\EOT\164\STX\FS\RS\n\
    \6\n\
    \\EOT\EOT\v\STX\DC1\DC2\EOT\167\STX\EOT+\SUB( Service is visible by CQG admins only.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DC1\EOT\DC2\EOT\167\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DC1\ENQ\DC2\EOT\167\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DC1\SOH\DC2\EOT\167\STX\DC2%\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DC1\ETX\DC2\EOT\167\STX(*\n\
    \\139\SOH\n\
    \\EOT\EOT\v\STX\DC2\DC2\EOT\170\STX\EOT'\SUB} Entitlement Service Contract requirement. This value is corresponding appropriate INFO value for entitlement contract type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DC2\EOT\DC2\EOT\170\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DC2\ENQ\DC2\EOT\170\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DC2\SOH\DC2\EOT\170\STX\DC4!\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DC2\ETX\DC2\EOT\170\STX$&\n\
    \2\n\
    \\EOT\EOT\v\STX\DC3\DC2\EOT\173\STX\EOT\US\SUB$ Indicates that service is retired.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DC3\EOT\DC2\EOT\173\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DC3\ENQ\DC2\EOT\173\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DC3\SOH\DC2\EOT\173\STX\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT\v\STX\DC3\ETX\DC2\EOT\173\STX\FS\RS\n\
    \-\n\
    \\STX\EOT\f\DC2\ACK\177\STX\NUL\187\STX\SOH\SUB\US Entitlement item description.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\f\SOH\DC2\EOT\177\STX\b\RS\n\
    \$\n\
    \\EOT\EOT\f\STX\NUL\DC2\EOT\180\STX\EOT\ESC\SUB\SYN Entitlement Item ID.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\EOT\DC2\EOT\180\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\ENQ\DC2\EOT\180\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\SOH\DC2\EOT\180\STX\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\ETX\DC2\EOT\180\STX\EM\SUB\n\
    \)\n\
    \\EOT\EOT\f\STX\SOH\DC2\EOT\183\STX\EOT1\SUB\ESC Entitlement Item Type ID.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\f\STX\SOH\EOT\DC2\EOT\183\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\f\STX\SOH\ACK\DC2\EOT\183\STX\r'\n\
    \\r\n\
    \\ENQ\EOT\f\STX\SOH\SOH\DC2\EOT\183\STX(,\n\
    \\r\n\
    \\ENQ\EOT\f\STX\SOH\ETX\DC2\EOT\183\STX/0\n\
    \\SUB\n\
    \\EOT\EOT\f\STX\STX\DC2\EOT\186\STX\EOT$\SUB\f Item name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\f\STX\STX\EOT\DC2\EOT\186\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\f\STX\STX\ACK\DC2\EOT\186\STX\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\f\STX\STX\SOH\DC2\EOT\186\STX\ESC\US\n\
    \\r\n\
    \\ENQ\EOT\f\STX\STX\ETX\DC2\EOT\186\STX\"#\n\
    \&\n\
    \\STX\EOT\r\DC2\ACK\190\STX\NUL\203\STX\SOH\SUB\CAN Entitlement item type.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\r\SOH\DC2\EOT\190\STX\b\"\n\
    \0\n\
    \\EOT\EOT\r\STX\NUL\DC2\EOT\193\STX\EOT\ESC\SUB\" Type ID in INFO DB (INFO Value).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\EOT\DC2\EOT\193\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\ENQ\DC2\EOT\193\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\SOH\DC2\EOT\193\STX\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\ETX\DC2\EOT\193\STX\EM\SUB\n\
    \\SUB\n\
    \\EOT\EOT\r\STX\SOH\DC2\EOT\196\STX\EOT$\SUB\f Type name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\EOT\DC2\EOT\196\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\ACK\DC2\EOT\196\STX\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\SOH\DC2\EOT\196\STX\ESC\US\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\ETX\DC2\EOT\196\STX\"#\n\
    \!\n\
    \\EOT\EOT\r\STX\STX\DC2\EOT\199\STX\EOT+\SUB\DC3 Type description.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\r\STX\STX\EOT\DC2\EOT\199\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\r\STX\STX\ACK\DC2\EOT\199\STX\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\r\STX\STX\SOH\DC2\EOT\199\STX\ESC&\n\
    \\r\n\
    \\ENQ\EOT\r\STX\STX\ETX\DC2\EOT\199\STX)*\n\
    \G\n\
    \\EOT\EOT\r\STX\ETX\DC2\EOT\202\STX\EOT%\SUB9 Determines whether item type is exchange (market data).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\r\STX\ETX\EOT\DC2\EOT\202\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\r\STX\ETX\ENQ\DC2\EOT\202\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\r\STX\ETX\SOH\DC2\EOT\202\STX\DC2 \n\
    \\r\n\
    \\ENQ\EOT\r\STX\ETX\ETX\DC2\EOT\202\STX#$\n\
    \,\n\
    \\STX\EOT\SO\DC2\ACK\206\STX\NUL\213\STX\SOH\SUB\RS Price as currency and value.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\SO\SOH\DC2\EOT\206\STX\b\r\n\
    \D\n\
    \\EOT\EOT\SO\STX\NUL\DC2\EOT\209\STX\EOT!\SUB6 Currency code (real currency code is ISO 4217 based.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\NUL\EOT\DC2\EOT\209\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\NUL\ENQ\DC2\EOT\209\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\NUL\SOH\DC2\EOT\209\STX\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\NUL\ETX\DC2\EOT\209\STX\US \n\
    \4\n\
    \\EOT\EOT\SO\STX\SOH\DC2\EOT\212\STX\EOT\RS\SUB& Price value in a specified currency.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\SOH\EOT\DC2\EOT\212\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\SOH\ENQ\DC2\EOT\212\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\SOH\SOH\DC2\EOT\212\STX\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\SOH\ETX\DC2\EOT\212\STX\FS\GS\n\
    \'\n\
    \\STX\EOT\SI\DC2\ACK\216\STX\NUL\223\STX\SOH\SUB\EM Service price override.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\SI\SOH\DC2\EOT\216\STX\b\FS\n\
    \#\n\
    \\EOT\EOT\SI\STX\NUL\DC2\EOT\219\STX\EOT#\SUB\NAK Service identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\NUL\EOT\DC2\EOT\219\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\NUL\ENQ\DC2\EOT\219\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\NUL\SOH\DC2\EOT\219\STX\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\NUL\ETX\DC2\EOT\219\STX!\"\n\
    \&\n\
    \\EOT\EOT\SI\STX\SOH\DC2\EOT\222\STX\EOT\GS\SUB\CAN Price override in USD.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SOH\EOT\DC2\EOT\222\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SOH\ACK\DC2\EOT\222\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SOH\SOH\DC2\EOT\222\STX\DC3\CAN\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SOH\ETX\DC2\EOT\222\STX\ESC\FS\n\
    \(\n\
    \\STX\EOT\DLE\DC2\ACK\226\STX\NUL\239\STX\SOH\SUB\SUB Category of entitlement.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DLE\SOH\DC2\EOT\226\STX\b\ESC\n\
    \\FS\n\
    \\EOT\EOT\DLE\STX\NUL\DC2\EOT\229\STX\EOT\ESC\SUB\SO Category ID.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\EOT\DC2\EOT\229\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\ENQ\DC2\EOT\229\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\SOH\DC2\EOT\229\STX\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\ETX\DC2\EOT\229\STX\EM\SUB\n\
    \\RS\n\
    \\EOT\EOT\DLE\STX\SOH\DC2\EOT\232\STX\EOT$\SUB\DLE Category name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\EOT\DC2\EOT\232\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\ACK\DC2\EOT\232\STX\r\SUB\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\SOH\DC2\EOT\232\STX\ESC\US\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\ETX\DC2\EOT\232\STX\"#\n\
    \'\n\
    \\EOT\EOT\DLE\STX\STX\DC2\EOT\235\STX\EOT2\SUB\EM List of sub-categories.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\EOT\DC2\EOT\235\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\ACK\DC2\EOT\235\STX\r \n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\SOH\DC2\EOT\235\STX!-\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\ETX\DC2\EOT\235\STX01\n\
    \i\n\
    \\EOT\EOT\DLE\STX\ETX\DC2\EOT\238\STX\EOT+\SUB[ Indicates whether brokerage can be assigned for the services in the catogory for a login.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\ETX\EOT\DC2\EOT\238\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\ETX\ENQ\DC2\EOT\238\STX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\ETX\SOH\DC2\EOT\238\STX\DC2&\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\ETX\ETX\DC2\EOT\238\STX)*\n\
    \&\n\
    \\STX\EOT\DC1\DC2\ACK\242\STX\NUL\148\ETX\SOH\SUB\CAN Entitlement constraint\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC1\SOH\DC2\EOT\242\STX\b\GS\n\
    \\"\n\
    \\EOT\EOT\DC1\EOT\NUL\DC2\ACK\245\STX\EOT\139\ETX\ENQ\SUB\DC2 Constraint type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC1\EOT\NUL\SOH\DC2\EOT\245\STX\t\r\n\
    \H\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\NUL\DC2\EOT\248\STX\b\DC4\SUB8 The services in the constraint are mutually exclusive.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\NUL\SOH\DC2\EOT\248\STX\b\SI\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\NUL\STX\DC2\EOT\248\STX\DC2\DC3\n\
    \\143\STX\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\SOH\DC2\EOT\253\STX\b\DC4\SUB\254\SOH Warning constraints are used where two services would normally not be allowed together\n\
    \ because one is a subset of the other, but we can't use the exclude constraint because\n\
    \ we need to allow the user to try out a version of the more extensive service.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\SOH\SOH\DC2\EOT\253\STX\b\SI\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\SOH\STX\DC2\EOT\253\STX\DC2\DC3\n\
    \\174\SOH\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\STX\DC2\EOT\129\ETX\b\US\SUB\157\SOH One of the services is mandatory within constraint group but only one service\n\
    \ from the group can be selected at the same time (if enforced for this user).\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\STX\SOH\DC2\EOT\129\ETX\b\SUB\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\STX\STX\DC2\EOT\129\ETX\GS\RS\n\
    \S\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\ETX\DC2\EOT\132\ETX\b\NAK\SUBC Only one service from the group can be selected at the same time.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\ETX\SOH\DC2\EOT\132\ETX\b\DLE\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\ETX\STX\DC2\EOT\132\ETX\DC3\DC4\n\
    \R\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\EOT\DC2\EOT\135\ETX\b\RS\SUBB Only service in whitelist works with particular product service.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\EOT\SOH\DC2\EOT\135\ETX\b\EM\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\EOT\STX\DC2\EOT\135\ETX\FS\GS\n\
    \n\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\ENQ\DC2\EOT\138\ETX\b\SUB\SUB^ Constraint to show that all service entitlement items are implicitly included in ref-service\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\ENQ\SOH\DC2\EOT\138\ETX\b\NAK\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\ENQ\STX\DC2\EOT\138\ETX\CAN\EM\n\
    \S\n\
    \\EOT\EOT\DC1\STX\NUL\DC2\EOT\141\ETX\EOT(\SUBE This field is associated with EntitlementConstraint.Type enum type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\EOT\DC2\EOT\141\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\ENQ\DC2\EOT\141\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\SOH\DC2\EOT\141\ETX\DC4#\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\ETX\DC2\EOT\141\ETX&'\n\
    \&\n\
    \\EOT\EOT\DC1\STX\SOH\DC2\EOT\144\ETX\EOT'\SUB\CAN Referenced service id.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\EOT\DC2\EOT\144\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\ENQ\DC2\EOT\144\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\SOH\DC2\EOT\144\ETX\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\ETX\DC2\EOT\144\ETX%&\n\
    \@\n\
    \\EOT\EOT\DC1\STX\STX\DC2\EOT\147\ETX\EOT)\SUB2 Constraint group name for some constraint types.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\EOT\DC2\EOT\147\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\ENQ\DC2\EOT\147\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\SOH\DC2\EOT\147\ETX\DC4$\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\ETX\DC2\EOT\147\ETX'(\n\
    \,\n\
    \\STX\EOT\DC2\DC2\ACK\151\ETX\NUL\155\ETX\SOH\SUB\RS Request of user information.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC2\SOH\DC2\EOT\151\ETX\b\ETB\n\
    \4\n\
    \\EOT\EOT\DC2\STX\NUL\DC2\EOT\154\ETX\EOT \SUB& User ID to request user information.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\EOT\DC2\EOT\154\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\ENQ\DC2\EOT\154\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\SOH\DC2\EOT\154\ETX\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\ETX\DC2\EOT\154\ETX\RS\US\n\
    \!\n\
    \\STX\EOT\DC3\DC2\ACK\158\ETX\NUL\155\EOT\SOH\SUB\DC3 User information.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC3\SOH\DC2\EOT\158\ETX\b\f\n\
    \\"\n\
    \\EOT\EOT\DC3\EOT\NUL\DC2\ACK\161\ETX\EOT\168\ETX\ENQ\SUB\DC2 Subscriber Type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\EOT\NUL\SOH\DC2\EOT\161\ETX\t\ETB\n\
    \*\n\
    \\ACK\EOT\DC3\EOT\NUL\STX\NUL\DC2\EOT\164\ETX\b\DLE\SUB\SUB Professional subscriber.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\NUL\STX\NUL\SOH\DC2\EOT\164\ETX\b\v\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\NUL\STX\NUL\STX\DC2\EOT\164\ETX\SO\SI\n\
    \.\n\
    \\ACK\EOT\DC3\EOT\NUL\STX\SOH\DC2\EOT\167\ETX\b\DC4\SUB\RS Non-professional subscriber.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\NUL\STX\SOH\SOH\DC2\EOT\167\ETX\b\SI\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\NUL\STX\SOH\STX\DC2\EOT\167\ETX\DC2\DC3\n\
    \+\n\
    \\EOT\EOT\DC3\EOT\SOH\DC2\ACK\171\ETX\EOT\184\ETX\ENQ\SUB\ESC Defines classes of login.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\EOT\SOH\SOH\DC2\EOT\171\ETX\t\DC3\n\
    \,\n\
    \\ACK\EOT\DC3\EOT\SOH\STX\NUL\DC2\EOT\174\ETX\b\DC4\SUB\FS Regular login for trading.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\SOH\STX\NUL\SOH\DC2\EOT\174\ETX\b\SI\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\SOH\STX\NUL\STX\DC2\EOT\174\ETX\DC2\DC3\n\
    \*\n\
    \\ACK\EOT\DC3\EOT\SOH\STX\SOH\DC2\EOT\177\ETX\b\ETB\SUB\SUB Fix direct access login.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\SOH\STX\SOH\SOH\DC2\EOT\177\ETX\b\DC2\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\SOH\STX\SOH\STX\DC2\EOT\177\ETX\NAK\SYN\n\
    \&\n\
    \\ACK\EOT\DC3\EOT\SOH\STX\STX\DC2\EOT\180\ETX\b\SUB\SUB\SYN Order handler login.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\SOH\STX\STX\SOH\DC2\EOT\180\ETX\b\NAK\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\SOH\STX\STX\STX\DC2\EOT\180\ETX\CAN\EM\n\
    \2\n\
    \\ACK\EOT\DC3\EOT\SOH\STX\ETX\DC2\EOT\183\ETX\b\NAK\SUB\" Template login for cloning only.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\SOH\STX\ETX\SOH\DC2\EOT\183\ETX\b\DLE\n\
    \\SI\n\
    \\a\EOT\DC3\EOT\SOH\STX\ETX\STX\DC2\EOT\183\ETX\DC3\DC4\n\
    \C\n\
    \\EOT\EOT\DC3\STX\NUL\DC2\EOT\187\ETX\EOT(\SUB5 List of field ids to clear during update operation.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\EOT\DC2\EOT\187\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\ENQ\DC2\EOT\187\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\SOH\DC2\EOT\187\ETX\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\ETX\DC2\EOT\187\ETX%'\n\
    \b\n\
    \\EOT\EOT\DC3\STX\SOH\DC2\EOT\191\ETX\EOT\ESC\SUBT [required-update] User Identifier.\n\
    \ The value is ignored for CreateUser operation.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\EOT\DC2\EOT\191\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\ENQ\DC2\EOT\191\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\SOH\DC2\EOT\191\ETX\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\ETX\DC2\EOT\191\ETX\EM\SUB\n\
    \>\n\
    \\EOT\EOT\DC3\STX\STX\DC2\EOT\194\ETX\EOT\"\SUB0 [required-create] User name (max length = 32).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\STX\EOT\DC2\EOT\194\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\STX\ENQ\DC2\EOT\194\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\STX\SOH\DC2\EOT\194\ETX\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\STX\ETX\DC2\EOT\194\ETX !\n\
    \=\n\
    \\EOT\EOT\DC3\STX\ETX\DC2\EOT\197\ETX\EOT>\SUB/ [obsolete] User first name (max length = 20).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\EOT\DC2\EOT\197\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\ENQ\DC2\EOT\197\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\SOH\DC2\EOT\197\ETX\DC4'\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\ETX\DC2\EOT\197\ETX*+\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETX\b\DC2\EOT\197\ETX,=\n\
    \\SO\n\
    \\ACK\EOT\DC3\STX\ETX\b\ETX\DC2\EOT\197\ETX-<\n\
    \<\n\
    \\EOT\EOT\DC3\STX\EOT\DC2\EOT\200\ETX\EOT=\SUB. [obsolete] User last name (max length = 25).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\EOT\DC2\EOT\200\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\ENQ\DC2\EOT\200\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\SOH\DC2\EOT\200\ETX\DC4&\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\ETX\DC2\EOT\200\ETX)*\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\EOT\b\DC2\EOT\200\ETX+<\n\
    \\SO\n\
    \\ACK\EOT\DC3\STX\EOT\b\ETX\DC2\EOT\200\ETX,;\n\
    \9\n\
    \\EOT\EOT\DC3\STX\ENQ\DC2\EOT\203\ETX\EOT9\SUB+ [obsolete] User e-mail (max length = 60).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\EOT\DC2\EOT\203\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\ENQ\DC2\EOT\203\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\SOH\DC2\EOT\203\ETX\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\ETX\DC2\EOT\203\ETX%&\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ENQ\b\DC2\EOT\203\ETX'8\n\
    \\SO\n\
    \\ACK\EOT\DC3\STX\ENQ\b\ETX\DC2\EOT\203\ETX(7\n\
    \\217\SOH\n\
    \\EOT\EOT\DC3\STX\ACK\DC2\EOT\209\ETX\EOT%\SUB\202\SOH [immutable-update] Linked customer ids.\n\
    \ In curent version of protocol only one customer's link is supported.\n\
    \ In futher version it will be changed to support multiple links.\n\
    \ Use profile_ids instead.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ACK\EOT\DC2\EOT\209\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ACK\ENQ\DC2\EOT\209\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ACK\SOH\DC2\EOT\209\ETX\DC4 \n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ACK\ETX\DC2\EOT\209\ETX#$\n\
    \\191\SOH\n\
    \\EOT\EOT\DC3\STX\a\DC2\EOT\214\ETX\EOT(\SUB\176\SOH [required-create] Subscriber Type. PRO by default when created.\n\
    \ This field is associated with User.SubscriberType enum type.\n\
    \ Supported login domains: system, trade-routing.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\a\EOT\DC2\EOT\214\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\a\ENQ\DC2\EOT\214\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\a\SOH\DC2\EOT\214\ETX\DC4#\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\a\ETX\DC2\EOT\214\ETX&'\n\
    \\188\SOH\n\
    \\EOT\EOT\DC3\STX\b\DC2\EOT\219\ETX\EOT%\SUB\173\SOH Date till the user is alive and then the user will be removed.\n\
    \ Datetime format is used but only date part is used, time part is ignored.\n\
    \ Supported login domains: system.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\b\EOT\DC2\EOT\219\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\b\ENQ\DC2\EOT\219\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\b\SOH\DC2\EOT\219\ETX\DC4 \n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\b\ETX\DC2\EOT\219\ETX#$\n\
    \:\n\
    \\EOT\EOT\DC3\STX\t\DC2\EOT\222\ETX\EOT\"\SUB, [immutable] Identifier of CQG System user.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\t\EOT\DC2\EOT\222\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\t\ENQ\DC2\EOT\222\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\t\SOH\DC2\EOT\222\ETX\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\t\ETX\DC2\EOT\222\ETX !\n\
    \=\n\
    \\EOT\EOT\DC3\STX\n\
    \\DC2\EOT\225\ETX\EOT#\SUB/ [immutable] Identifier of Trade Routing user.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\n\
    \\EOT\DC2\EOT\225\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\n\
    \\ENQ\DC2\EOT\225\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\n\
    \\SOH\DC2\EOT\225\ETX\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\n\
    \\ETX\DC2\EOT\225\ETX \"\n\
    \N\n\
    \\EOT\EOT\DC3\STX\v\DC2\EOT\228\ETX\EOT3\SUB@ [immutable] List of enforced mandatory constraint group names.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\v\EOT\DC2\EOT\228\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\v\ENQ\DC2\EOT\228\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\v\SOH\DC2\EOT\228\ETX\DC4-\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\v\ETX\DC2\EOT\228\ETX02\n\
    \<\n\
    \\EOT\EOT\DC3\STX\f\DC2\EOT\231\ETX\EOT\"\SUB. [immutable] Billing currency code (ISO 4217)\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\f\EOT\DC2\EOT\231\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\f\ENQ\DC2\EOT\231\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\f\SOH\DC2\EOT\231\ETX\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\f\ETX\DC2\EOT\231\ETX\US!\n\
    \w\n\
    \\EOT\EOT\DC3\STX\r\DC2\EOT\235\ETX\EOT \SUBi [required-create][immutable-update] Login domain.\n\
    \ This field is associated with LoginDomain enum type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\r\EOT\DC2\EOT\235\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\r\ENQ\DC2\EOT\235\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\r\SOH\DC2\EOT\235\ETX\DC4\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\r\ETX\DC2\EOT\235\ETX\GS\US\n\
    \)\n\
    \\EOT\EOT\DC3\STX\SO\DC2\EOT\238\ETX\EOT\US\SUB\ESC [immutable] Removed flag.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SO\EOT\DC2\EOT\238\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SO\ENQ\DC2\EOT\238\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SO\SOH\DC2\EOT\238\ETX\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SO\ETX\DC2\EOT\238\ETX\FS\RS\n\
    \\209\SOH\n\
    \\EOT\EOT\DC3\STX\SI\DC2\EOT\244\ETX\EOT\US\SUB\194\SOH [immutable-update] Login class.\n\
    \ If not provided during create, default used - regular class.\n\
    \ This field is associated with User.LoginClass enum type.\n\
    \ Supported login domains: trade-routing.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SI\EOT\DC2\EOT\244\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SI\ENQ\DC2\EOT\244\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SI\SOH\DC2\EOT\244\ETX\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SI\ETX\DC2\EOT\244\ETX\FS\RS\n\
    \\201\SOH\n\
    \\EOT\EOT\DC3\STX\DLE\DC2\EOT\249\ETX\EOT$\SUB\186\SOH [immutable] Indicates whether login is used for demo access.\n\
    \ It cannot be used during login creation and cannot be changed for existing login.\n\
    \ Supported login domains: trade-routing.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DLE\EOT\DC2\EOT\249\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DLE\ENQ\DC2\EOT\249\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DLE\SOH\DC2\EOT\249\ETX\DC2\RS\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DLE\ETX\DC2\EOT\249\ETX!#\n\
    \w\n\
    \\EOT\EOT\DC3\STX\DC1\DC2\EOT\253\ETX\EOT!\SUBi [immutable] Determines, whether login can be used for trading.\n\
    \ Supported login domains: trade-routing.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC1\EOT\DC2\EOT\253\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC1\ENQ\DC2\EOT\253\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC1\SOH\DC2\EOT\253\ETX\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC1\ETX\DC2\EOT\253\ETX\RS \n\
    \\140\SOH\n\
    \\EOT\EOT\DC3\STX\DC2\DC2\EOT\129\EOT\EOT)\SUB~ [immutable] Date and Time, when login is deactivated and can't be used for trading.\n\
    \ Supported login domains: trade-routing.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC2\EOT\DC2\EOT\129\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC2\ENQ\DC2\EOT\129\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC2\SOH\DC2\EOT\129\EOT\DC4#\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC2\ETX\DC2\EOT\129\EOT&(\n\
    \4\n\
    \\EOT\EOT\DC3\STX\DC3\DC2\EOT\132\EOT\EOT&\SUB& [immutable] Identifier of CAST user.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC3\EOT\DC2\EOT\132\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC3\ENQ\DC2\EOT\132\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC3\SOH\DC2\EOT\132\EOT\DC4 \n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC3\ETX\DC2\EOT\132\EOT#%\n\
    \z\n\
    \\EOT\EOT\DC3\STX\DC4\DC2\EOT\137\EOT\EOT\US\SUBl Admin login's scope.\n\
    \ Supported login domains: admin.\n\
    \ This field is associated with AdminLoginScope enum.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC4\EOT\DC2\EOT\137\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC4\ENQ\DC2\EOT\137\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC4\SOH\DC2\EOT\137\EOT\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\DC4\ETX\DC2\EOT\137\EOT\FS\RS\n\
    \[\n\
    \\EOT\EOT\DC3\STX\NAK\DC2\EOT\141\EOT\EOT,\SUBM Enforce IP whitelist check.\n\
    \ Supported login domains: admin, trade-routing.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NAK\EOT\DC2\EOT\141\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NAK\ENQ\DC2\EOT\141\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NAK\SOH\DC2\EOT\141\EOT\DC2&\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NAK\ETX\DC2\EOT\141\EOT)+\n\
    \s\n\
    \\EOT\EOT\DC3\STX\SYN\DC2\EOT\145\EOT\EOT&\SUBe [erasable] IP addresses whitelist in CIDR notation.\n\
    \ Supported login domains: admin, trade-routing.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SYN\EOT\DC2\EOT\145\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SYN\ENQ\DC2\EOT\145\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SYN\SOH\DC2\EOT\145\EOT\DC4 \n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SYN\ETX\DC2\EOT\145\EOT#%\n\
    \\194\STX\n\
    \\EOT\EOT\DC3\STX\ETB\DC2\EOT\154\EOT\EOT%\SUB\145\STX [immutable-update][required-create] Direct owner profiles ids.\n\
    \ In curent version of protocol only one profile's link is supported.\n\
    \ In futher version it will be changed to support multiple links.\n\
    \ Has priority over customer_id.\n\
    \ Supported profile types: admin, customer.\n\
    \2  23 is used for cleared_fields.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETB\EOT\DC2\EOT\154\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETB\ENQ\DC2\EOT\154\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETB\SOH\DC2\EOT\154\EOT\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\ETB\ETX\DC2\EOT\154\EOT\"$\n\
    \*\n\
    \\STX\EOT\DC4\DC2\ACK\158\EOT\NUL\239\EOT\SOH\SUB\FS Additional login settings.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC4\SOH\DC2\EOT\158\EOT\b\NAK\n\
    \>\n\
    \\EOT\EOT\DC4\EOT\NUL\DC2\ACK\161\EOT\EOT\171\EOT\ENQ\SUB. Defines actions on login session disconnect.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\EOT\NUL\SOH\DC2\EOT\161\EOT\t\EM\n\
    \%\n\
    \\ACK\EOT\DC4\EOT\NUL\STX\NUL\DC2\EOT\164\EOT\b\DC4\SUB\NAK No specific action.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC4\EOT\NUL\STX\NUL\SOH\DC2\EOT\164\EOT\b\SI\n\
    \\SI\n\
    \\a\EOT\DC4\EOT\NUL\STX\NUL\STX\DC2\EOT\164\EOT\DC2\DC3\n\
    \ \n\
    \\ACK\EOT\DC4\EOT\NUL\STX\SOH\DC2\EOT\167\EOT\b\DC3\SUB\DLE Cancel orders.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC4\EOT\NUL\STX\SOH\SOH\DC2\EOT\167\EOT\b\SO\n\
    \\SI\n\
    \\a\EOT\DC4\EOT\NUL\STX\SOH\STX\DC2\EOT\167\EOT\DC1\DC2\n\
    \!\n\
    \\ACK\EOT\DC4\EOT\NUL\STX\STX\DC2\EOT\170\EOT\b\DC4\SUB\DC1 Suspend orders.\n\
    \\n\
    \\SI\n\
    \\a\EOT\DC4\EOT\NUL\STX\STX\SOH\DC2\EOT\170\EOT\b\SI\n\
    \\SI\n\
    \\a\EOT\DC4\EOT\NUL\STX\STX\STX\DC2\EOT\170\EOT\DC2\DC3\n\
    \C\n\
    \\EOT\EOT\DC4\STX\NUL\DC2\EOT\174\EOT\EOT'\SUB5 List of field ids to clear during update operation.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\EOT\DC2\EOT\174\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\ENQ\DC2\EOT\174\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\SOH\DC2\EOT\174\EOT\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\ETX\DC2\EOT\174\EOT%&\n\
    \,\n\
    \\EOT\EOT\DC4\STX\SOH\DC2\EOT\177\EOT\EOT!\SUB\RS [required] Login Identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SOH\EOT\DC2\EOT\177\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SOH\ENQ\DC2\EOT\177\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SOH\SOH\DC2\EOT\177\EOT\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SOH\ETX\DC2\EOT\177\EOT\US \n\
    \\151\STX\n\
    \\EOT\EOT\DC4\STX\STX\DC2\EOT\183\EOT\EOT6\SUB\136\STX Preferred connection point.\n\
    \ The values are associated with location_1.ConnectionPointListRequest.\n\
    \ In update operation if connection point requires brokerage authorization,\n\
    \ then brokerage of login's customer profile must be authorized on this connection point.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\STX\EOT\DC2\EOT\183\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\STX\ENQ\DC2\EOT\183\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\STX\SOH\DC2\EOT\183\EOT\DC41\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\STX\ETX\DC2\EOT\183\EOT45\n\
    \\140\SOH\n\
    \\EOT\EOT\DC4\STX\ETX\DC2\EOT\187\EOT\EOT3\SUB~ [erasable] Possible concurrent sessions number per one IP.\n\
    \ View and modify access to this field is limited for Admin users.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ETX\EOT\DC2\EOT\187\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ETX\ENQ\DC2\EOT\187\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ETX\SOH\DC2\EOT\187\EOT\DC4.\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ETX\ETX\DC2\EOT\187\EOT12\n\
    \j\n\
    \\EOT\EOT\DC4\STX\EOT\DC2\EOT\191\EOT\EOT-\SUB\\ Determines whether password never expires.\n\
    \ Supported login domains: trade-routing, admin.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\EOT\EOT\DC2\EOT\191\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\EOT\ENQ\DC2\EOT\191\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\EOT\SOH\DC2\EOT\191\EOT\DC2(\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\EOT\ETX\DC2\EOT\191\EOT+,\n\
    \I\n\
    \\EOT\EOT\DC4\STX\ENQ\DC2\EOT\194\EOT\EOTD\SUB; [obsolete] Strategies can be executed through this login.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ENQ\EOT\DC2\EOT\194\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ENQ\ENQ\DC2\EOT\194\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ENQ\SOH\DC2\EOT\194\EOT\DC2-\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ENQ\ETX\DC2\EOT\194\EOT01\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ENQ\b\DC2\EOT\194\EOT2C\n\
    \\SO\n\
    \\ACK\EOT\DC4\STX\ENQ\b\ETX\DC2\EOT\194\EOT3B\n\
    \}\n\
    \\EOT\EOT\DC4\STX\ACK\DC2\EOT\197\EOT\EOT8\SUBo [immutable] This can be used in case when preferred_connection_point_id is missing in connection points list.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ACK\EOT\DC2\EOT\197\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ACK\ENQ\DC2\EOT\197\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ACK\SOH\DC2\EOT\197\EOT\DC43\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\ACK\ETX\DC2\EOT\197\EOT67\n\
    \\204\STX\n\
    \\EOT\EOT\DC4\STX\a\DC2\EOT\204\EOT\EOT(\SUB\189\STX [erasable] Linked login for operations on behave of.\n\
    \ In case of admin login, this linked login can be only order-handler trade-routing login,\n\
    \ which is used for order operations going to exchange.\n\
    \ In case of trade-routing login, this linked login can be only admin login,\n\
    \ which is used for operations in CMS API.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\a\EOT\DC2\EOT\204\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\a\ENQ\DC2\EOT\204\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\a\SOH\DC2\EOT\204\EOT\DC4#\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\a\ETX\DC2\EOT\204\EOT&'\n\
    \g\n\
    \\EOT\EOT\DC4\STX\b\DC2\EOT\208\EOT\EOT,\SUBY Parameters of external authentication, if any.\n\
    \ Supported login domains: trade-routing.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\b\EOT\DC2\EOT\208\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\b\ACK\DC2\EOT\208\EOT\r\EM\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\b\SOH\DC2\EOT\208\EOT\SUB'\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\b\ETX\DC2\EOT\208\EOT*+\n\
    \m\n\
    \\EOT\EOT\DC4\STX\t\DC2\EOT\212\EOT\EOT+\SUB_ Per-user override of limit of allowed logons per day. Zero or absent field\n\
    \ mean no override.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\t\EOT\DC2\EOT\212\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\t\ENQ\DC2\EOT\212\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\t\SOH\DC2\EOT\212\EOT\DC4%\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\t\ETX\DC2\EOT\212\EOT(*\n\
    \\227\SOH\n\
    \\EOT\EOT\DC4\STX\n\
    \\DC2\EOT\217\EOT\EOT+\SUB\212\SOH [immutable] Number of performed logons for current day. Absent field means zero.\n\
    \ Note: This property is intentionally mutable, allowing reset of the logon counter by FCMs/ops.\n\
    \ Note: day boundary is 00:00 UTC.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\n\
    \\EOT\DC2\EOT\217\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\n\
    \\ENQ\DC2\EOT\217\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\n\
    \\SOH\DC2\EOT\217\EOT\DC4%\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\n\
    \\ETX\DC2\EOT\217\EOT(*\n\
    \\192\SOH\n\
    \\EOT\EOT\DC4\STX\v\DC2\EOT\222\EOT\EOT/\SUB\177\SOH Authentication system identifier.\n\
    \ LookupPropertyListRequest { property_type = CommonLookupPropertyType.AUTHENTICATION_SYSTEM }\n\
    \ Supported login domains: trade-routing, admin.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\v\EOT\DC2\EOT\222\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\v\ENQ\DC2\EOT\222\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\v\SOH\DC2\EOT\222\EOT\DC4)\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\v\ETX\DC2\EOT\222\EOT,.\n\
    \g\n\
    \\EOT\EOT\DC4\STX\f\DC2\EOT\225\EOT\EOT2\SUBY [immutable] Determines whether login is allowed to exceed account authorizations limit.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\f\EOT\DC2\EOT\225\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\f\ENQ\DC2\EOT\225\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\f\SOH\DC2\EOT\225\EOT\DC2,\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\f\ETX\DC2\EOT\225\EOT/1\n\
    \\129\SOH\n\
    \\EOT\EOT\DC4\STX\r\DC2\EOT\229\EOT\EOT6\SUBs This field is associated with LoginSettings.DisconnectActions enum type.\n\
    \ Supported login domains: trade-routing.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\r\EOT\DC2\EOT\229\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\r\ENQ\DC2\EOT\229\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\r\SOH\DC2\EOT\229\EOT\DC40\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\r\ETX\DC2\EOT\229\EOT35\n\
    \\236\SOH\n\
    \\EOT\EOT\DC4\STX\SO\DC2\EOT\234\EOT\EOT<\SUB\221\SOH Timeout in seconds. If the login reconnects during this period, orders won't be canceled/suspended.\n\
    \ Applied only if on_session_disconnect_action field does not equal to NOTHING.\n\
    \ Supported login domains: trade-routing.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SO\EOT\DC2\EOT\234\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SO\ENQ\DC2\EOT\234\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SO\SOH\DC2\EOT\234\EOT\DC46\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SO\ETX\DC2\EOT\234\EOT9;\n\
    \\169\SOH\n\
    \\EOT\EOT\DC4\STX\SI\DC2\EOT\238\EOT\EOT#\SUB\154\SOH Time zone in IANA (Olson) format: \"Area/Location\". See https://www.iana.org/time-zones\n\
    \ Sets preferred time zone for date/time in notification messages.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SI\EOT\DC2\EOT\238\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SI\ENQ\DC2\EOT\238\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SI\SOH\DC2\EOT\238\EOT\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\SI\ETX\DC2\EOT\238\EOT \"\n\
    \-\n\
    \\STX\EOT\NAK\DC2\ACK\242\EOT\NUL\197\ENQ\SOH\SUB\US Request to search for a user.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\NAK\SOH\DC2\EOT\242\EOT\b\EM\n\
    \:\n\
    \\EOT\EOT\NAK\EOT\NUL\DC2\ACK\245\EOT\EOT\181\ENQ\ENQ\SUB* List of possible search refine criteria.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\NAK\EOT\NUL\SOH\DC2\EOT\245\EOT\t\ETB\n\
    \p\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\NUL\DC2\EOT\249\EOT\b\DC4\SUB` Search by user_id.\n\
    \ With 'CONTAINS' rule, minimal query text length is limited with 3 symbols.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\NUL\SOH\DC2\EOT\249\EOT\b\SI\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\NUL\STX\DC2\EOT\249\EOT\DC2\DC3\n\
    \r\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\SOH\DC2\EOT\253\EOT\b\SYN\SUBb Search by user name.\n\
    \ With 'CONTAINS' rule, minimal query text length is limited with 3 symbols.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\SOH\SOH\DC2\EOT\253\EOT\b\DC1\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\SOH\STX\DC2\EOT\253\EOT\DC4\NAK\n\
    \8\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\STX\DC2\EOT\128\ENQ\b(\SUB( Search by profile sales series number.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\STX\SOH\DC2\EOT\128\ENQ\b#\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\STX\STX\DC2\EOT\128\ENQ&'\n\
    \6\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\ETX\DC2\EOT\131\ENQ\b&\SUB& Search by profile sales series name.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\ETX\SOH\DC2\EOT\131\ENQ\b!\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\ETX\STX\DC2\EOT\131\ENQ$%\n\
    \R\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\EOT\DC2\EOT\135\ENQ\b\FS\SUBB Search by sales series ID.\n\
    \ Use PROFILE_SALES_SERIES_ID instead.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\EOT\SOH\DC2\EOT\135\ENQ\b\ETB\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\EOT\STX\DC2\EOT\135\ENQ\SUB\ESC\n\
    \\133\STX\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\ENQ\DC2\EOT\141\ENQ\b\CAN\SUB\244\SOH Search by customer ID for all linked users.\n\
    \ With 'CONTAINS' rule, minimal query text length is limited with 3 symbols.\n\
    \ In case of system logins, only EXACT_EQUALITY rule is used, regardless provided rule in request.\n\
    \ Use PROFILE_ID instead.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\ENQ\SOH\DC2\EOT\141\ENQ\b\DC3\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\ENQ\STX\DC2\EOT\141\ENQ\SYN\ETB\n\
    \d\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\ACK\DC2\EOT\145\ENQ\b\EM\SUBT Search by authorized brokerage id.\n\
    \ Supported login domains: admin, trade-routing.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\ACK\SOH\DC2\EOT\145\ENQ\b\DC4\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\ACK\STX\DC2\EOT\145\ENQ\ETB\CAN\n\
    \f\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\a\DC2\EOT\149\ENQ\b\FS\SUBV Search by authorized brokerage name.\n\
    \ Supported login domains: admin, trade-routing.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\a\SOH\DC2\EOT\149\ENQ\b\SYN\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\a\STX\DC2\EOT\149\ENQ\EM\ESC\n\
    \\231\SOH\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\b\DC2\EOT\155\ENQ\b\DC3\SUB\214\SOH Login class.\n\
    \ Supported login domains: trade-routing.\n\
    \ This field is associated with User.LoginClass enum type.\n\
    \ LIMITED USE: Only explicitly, one per search option with EXACT_EQUALITY rule and in all match mode.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\b\SOH\DC2\EOT\155\ENQ\b\r\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\b\STX\DC2\EOT\155\ENQ\DLE\DC2\n\
    \\187\SOH\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\t\DC2\EOT\160\ENQ\b\SUB\SUB\170\SOH Login domain.\n\
    \ This field is associated with LoginDomain enum type.\n\
    \ LIMITED USE: Only explicitly, one per search option with EXACT_EQUALITY rule and in all match mode.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\t\SOH\DC2\EOT\160\ENQ\b\DC4\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\t\STX\DC2\EOT\160\ENQ\ETB\EM\n\
    \\252\SOH\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\n\
    \\DC2\EOT\165\ENQ\b\CAN\SUB\235\SOH Search by profile (customer/admin) ID for all linked users.\n\
    \ With 'CONTAINS' rule, minimal query text length is limited with 3 symbols.\n\
    \ In case of system logins, only EXACT_EQUALITY rule is used, regardless provided rule in request.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\n\
    \\SOH\DC2\EOT\165\ENQ\b\DC2\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\n\
    \\STX\DC2\EOT\165\ENQ\NAK\ETB\n\
    \4\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\v\DC2\EOT\168\ENQ\b%\SUB$ Search by profile sales series ID.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\v\SOH\DC2\EOT\168\ENQ\b\US\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\v\STX\DC2\EOT\168\ENQ\"$\n\
    \n\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\f\DC2\EOT\172\ENQ\b\GS\SUB^ Search by assigned authentication partner identifier\n\
    \ Supported login domain: trade-routing.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\f\SOH\DC2\EOT\172\ENQ\b\ETB\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\f\STX\DC2\EOT\172\ENQ\SUB\FS\n\
    \\DEL\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\r\DC2\EOT\176\ENQ\b\RS\SUBo Search by id of user (username) registered for authentication partner\n\
    \ Supported login domain: trade-routing.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\r\SOH\DC2\EOT\176\ENQ\b\CAN\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\r\STX\DC2\EOT\176\ENQ\ESC\GS\n\
    \h\n\
    \\ACK\EOT\NAK\EOT\NUL\STX\SO\DC2\EOT\180\ENQ\b\US\SUBX Search by assigned authentication partner name\n\
    \ Supported login domain: trade-routing.\n\
    \\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\SO\SOH\DC2\EOT\180\ENQ\b\EM\n\
    \\SI\n\
    \\a\EOT\NAK\EOT\NUL\STX\SO\STX\DC2\EOT\180\ENQ\FS\RS\n\
    \*\n\
    \\EOT\EOT\NAK\STX\NUL\DC2\EOT\184\ENQ\EOT8\SUB\FS [obsolete] Text to search.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\EOT\DC2\EOT\184\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\ENQ\DC2\EOT\184\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\SOH\DC2\EOT\184\ENQ\DC4!\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\ETX\DC2\EOT\184\ENQ$%\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\b\DC2\EOT\184\ENQ&7\n\
    \\SO\n\
    \\ACK\EOT\NAK\STX\NUL\b\ETX\DC2\EOT\184\ENQ'6\n\
    \\158\SOH\n\
    \\EOT\EOT\NAK\STX\SOH\DC2\EOT\189\ENQ\EOTE\SUB\143\SOH [obsolete] List of search options.\n\
    \ This field is associated with SearchCriteria enum type.\n\
    \ Empty list means search by any possible options.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\EOT\DC2\EOT\189\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\ENQ\DC2\EOT\189\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\SOH\DC2\EOT\189\ENQ\DC4,\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\ETX\DC2\EOT\189\ENQ/0\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\SOH\b\DC2\EOT\189\ENQ1D\n\
    \\SO\n\
    \\ACK\EOT\NAK\STX\SOH\b\ETX\DC2\EOT\189\ENQ2C\n\
    \h\n\
    \\EOT\EOT\NAK\STX\STX\DC2\EOT\192\ENQ\EOT-\SUBZ List of search options. Each option has its own search text, criteria and matching rule.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\EOT\DC2\EOT\192\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\ACK\DC2\EOT\192\ENQ\r\EM\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\SOH\DC2\EOT\192\ENQ\SUB(\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\STX\ETX\DC2\EOT\192\ENQ+,\n\
    \h\n\
    \\EOT\EOT\NAK\STX\ETX\DC2\EOT\196\ENQ\EOT7\SUBZ Indicates, whether all criteria must match at once.\n\
    \ By default any criteria must match.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\EOT\DC2\EOT\196\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\ENQ\DC2\EOT\196\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\SOH\DC2\EOT\196\ENQ\DC2 \n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\ETX\DC2\EOT\196\ENQ#$\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\b\DC2\EOT\196\ENQ%6\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\ETX\a\DC2\EOT\196\ENQ05\n\
    \*\n\
    \\STX\EOT\SYN\DC2\ACK\200\ENQ\NUL\242\ENQ\SOH\SUB\FS User search result record.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\SYN\SOH\DC2\EOT\200\ENQ\b\RS\n\
    \ \n\
    \\EOT\EOT\SYN\STX\NUL\DC2\EOT\203\ENQ\EOT \SUB\DC2 User identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\EOT\DC2\EOT\203\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\ENQ\DC2\EOT\203\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\SOH\DC2\EOT\203\ENQ\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\ETX\DC2\EOT\203\ENQ\RS\US\n\
    \\SUB\n\
    \\EOT\EOT\SYN\STX\SOH\DC2\EOT\206\ENQ\EOT\"\SUB\f User name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\EOT\DC2\EOT\206\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\ENQ\DC2\EOT\206\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\SOH\DC2\EOT\206\ENQ\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\ETX\DC2\EOT\206\ENQ !\n\
    \&\n\
    \\EOT\EOT\SYN\STX\STX\DC2\EOT\209\ENQ\EOT#\SUB\CAN Customer's first name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\EOT\DC2\EOT\209\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\ENQ\DC2\EOT\209\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\SOH\DC2\EOT\209\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\ETX\DC2\EOT\209\ENQ!\"\n\
    \%\n\
    \\EOT\EOT\SYN\STX\ETX\DC2\EOT\212\ENQ\EOT\"\SUB\ETB Customer's last name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\EOT\DC2\EOT\212\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\ENQ\DC2\EOT\212\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\SOH\DC2\EOT\212\ENQ\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\ETX\DC2\EOT\212\ENQ !\n\
    \5\n\
    \\EOT\EOT\SYN\STX\EOT\DC2\EOT\216\ENQ\EOT$\SUB' Customer id.\n\
    \ Use profile_id instead.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\EOT\EOT\DC2\EOT\216\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\EOT\ENQ\DC2\EOT\216\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\EOT\SOH\DC2\EOT\216\ENQ\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\EOT\ETX\DC2\EOT\216\ENQ\"#\n\
    \\RS\n\
    \\EOT\EOT\SYN\STX\ENQ\DC2\EOT\219\ENQ\EOT&\SUB\DLE Customer name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ENQ\EOT\DC2\EOT\219\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ENQ\ENQ\DC2\EOT\219\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ENQ\SOH\DC2\EOT\219\ENQ\DC4!\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ENQ\ETX\DC2\EOT\219\ENQ$%\n\
    \*\n\
    \\EOT\EOT\SYN\STX\ACK\DC2\EOT\222\ENQ\EOT0\SUB\FS Customer's brokerage name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ACK\EOT\DC2\EOT\222\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ACK\ENQ\DC2\EOT\222\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ACK\SOH\DC2\EOT\222\ENQ\DC4+\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ACK\ETX\DC2\EOT\222\ENQ./\n\
    \\GS\n\
    \\EOT\EOT\SYN\STX\a\DC2\EOT\225\ENQ\EOT\RS\SUB\SI Removed flag.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\a\EOT\DC2\EOT\225\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\a\ENQ\DC2\EOT\225\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\a\SOH\DC2\EOT\225\ENQ\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\a\ETX\DC2\EOT\225\ENQ\FS\GS\n\
    \U\n\
    \\EOT\EOT\SYN\STX\b\DC2\EOT\229\ENQ\EOT\RS\SUBG User class.\n\
    \ This field is associated with User.LoginClass enum type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\b\EOT\DC2\EOT\229\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\b\ENQ\DC2\EOT\229\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\b\SOH\DC2\EOT\229\ENQ\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\b\ETX\DC2\EOT\229\ENQ\FS\GS\n\
    \/\n\
    \\EOT\EOT\SYN\STX\t\DC2\EOT\232\ENQ\EOT$\SUB! Temporary user for demo access.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\t\EOT\DC2\EOT\232\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\t\ENQ\DC2\EOT\232\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\t\SOH\DC2\EOT\232\ENQ\DC2\RS\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\t\ETX\DC2\EOT\232\ENQ!#\n\
    \!\n\
    \\EOT\EOT\SYN\STX\n\
    \\DC2\EOT\235\ENQ\EOT$\SUB\DC3 Owner profile id.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\n\
    \\EOT\DC2\EOT\235\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\n\
    \\ENQ\DC2\EOT\235\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\n\
    \\SOH\DC2\EOT\235\ENQ\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\n\
    \\ETX\DC2\EOT\235\ENQ!#\n\
    \>\n\
    \\EOT\EOT\SYN\STX\v\DC2\EOT\238\ENQ\EOT-\SUB0 Parameters of external authentication, if any.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\v\EOT\DC2\EOT\238\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\v\ACK\DC2\EOT\238\ENQ\r\EM\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\v\SOH\DC2\EOT\238\ENQ\SUB'\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\v\ETX\DC2\EOT\238\ENQ*,\n\
    \P\n\
    \\EOT\EOT\SYN\STX\f\DC2\EOT\241\ENQ\EOT!\SUBB Determines, whether trade-routing login can be used for trading.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\f\EOT\DC2\EOT\241\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\f\ENQ\DC2\EOT\241\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\f\SOH\DC2\EOT\241\ENQ\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\f\ETX\DC2\EOT\241\ENQ\RS \n\
    \\161\SOH\n\
    \\STX\EOT\ETB\DC2\ACK\247\ENQ\NUL\153\ACK\SOH\SUB\146\SOH Clone traderouting login.\n\
    \ When target_profile_id is provided, new user will be linked with it,\n\
    \ otherwise new customer profile will be created.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\ETB\SOH\DC2\EOT\247\ENQ\b\DC1\n\
    \2\n\
    \\EOT\EOT\ETB\STX\NUL\DC2\EOT\250\ENQ\EOT'\SUB$ [required] Source user identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\EOT\DC2\EOT\250\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\ENQ\DC2\EOT\250\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\SOH\DC2\EOT\250\ENQ\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\ETX\DC2\EOT\250\ENQ%&\n\
    \?\n\
    \\EOT\EOT\ETB\STX\SOH\DC2\EOT\253\ENQ\EOT*\SUB1 [required] New user username (max length = 32).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\EOT\DC2\EOT\253\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\ENQ\DC2\EOT\253\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\SOH\DC2\EOT\253\ENQ\DC4%\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\ETX\DC2\EOT\253\ENQ()\n\
    \A\n\
    \\EOT\EOT\ETB\STX\STX\DC2\EOT\128\ACK\EOTG\SUB3 [obsolete] New user first name (max length = 20).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\EOT\DC2\EOT\128\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\ENQ\DC2\EOT\128\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\SOH\DC2\EOT\128\ACK\DC40\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\ETX\DC2\EOT\128\ACK34\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\STX\b\DC2\EOT\128\ACK5F\n\
    \\SO\n\
    \\ACK\EOT\ETB\STX\STX\b\ETX\DC2\EOT\128\ACK6E\n\
    \@\n\
    \\EOT\EOT\ETB\STX\ETX\DC2\EOT\131\ACK\EOTF\SUB2 [obsolete] New user last name (max length = 25).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\EOT\DC2\EOT\131\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\ENQ\DC2\EOT\131\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\SOH\DC2\EOT\131\ACK\DC4/\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\ETX\DC2\EOT\131\ACK23\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ETX\b\DC2\EOT\131\ACK4E\n\
    \\SO\n\
    \\ACK\EOT\ETB\STX\ETX\b\ETX\DC2\EOT\131\ACK5D\n\
    \,\n\
    \\EOT\EOT\ETB\STX\EOT\DC2\EOT\134\ACK\EOTE\SUB\RS [obsolete] New user address.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\EOT\EOT\DC2\EOT\134\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\EOT\ACK\DC2\EOT\134\ACK\r\DC4\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\EOT\SOH\DC2\EOT\134\ACK\NAK.\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\EOT\ETX\DC2\EOT\134\ACK12\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\EOT\b\DC2\EOT\134\ACK3D\n\
    \\SO\n\
    \\ACK\EOT\ETB\STX\EOT\b\ETX\DC2\EOT\134\ACK4C\n\
    \\139\SOH\n\
    \\EOT\EOT\ETB\STX\ENQ\DC2\EOT\138\ACK\EOTA\SUB} Contact information of new customer profile that will be linked with new login.\n\
    \ Mutually exclusive with target_profile_id.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ENQ\EOT\DC2\EOT\138\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ENQ\ACK\DC2\EOT\138\ACK\r\US\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ENQ\SOH\DC2\EOT\138\ACK <\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ENQ\ETX\DC2\EOT\138\ACK?@\n\
    \D\n\
    \\EOT\EOT\ETB\STX\ACK\DC2\EOT\141\ACK\EOTK\SUB6 [obsolete] New user middle initial (max length = 1).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ACK\EOT\DC2\EOT\141\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ACK\ENQ\DC2\EOT\141\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ACK\SOH\DC2\EOT\141\ACK\DC44\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ACK\ETX\DC2\EOT\141\ACK78\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\ACK\b\DC2\EOT\141\ACK9J\n\
    \\SO\n\
    \\ACK\EOT\ETB\STX\ACK\b\ETX\DC2\EOT\141\ACK:I\n\
    \\132\SOH\n\
    \\EOT\EOT\ETB\STX\a\DC2\EOT\145\ACK\EOT*\SUBv Existing customer profile that new login will be linked with.\n\
    \ Mutually exclusive with new_user_contact_information.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\a\EOT\DC2\EOT\145\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\a\ENQ\DC2\EOT\145\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\a\SOH\DC2\EOT\145\ACK\DC4%\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\a\ETX\DC2\EOT\145\ACK()\n\
    \Z\n\
    \\EOT\EOT\ETB\STX\b\DC2\EOT\148\ACK\EOT'\SUBL This flag if set to true prohibit to send welcome email for cloned trader.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\b\EOT\DC2\EOT\148\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\b\ENQ\DC2\EOT\148\ACK\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\b\SOH\DC2\EOT\148\ACK\DC2\"\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\b\ETX\DC2\EOT\148\ACK%&\n\
    \\166\SOH\n\
    \\EOT\EOT\ETB\STX\t\DC2\EOT\152\ACK\EOT2\SUB\151\SOH Brokerage_id for new customer profile. If not provided it is copied from customer profile of source user.\n\
    \ Mutually exclusive with target_profile_id.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\t\EOT\DC2\EOT\152\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\t\ENQ\DC2\EOT\152\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\t\SOH\DC2\EOT\152\ACK\DC4,\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\t\ETX\DC2\EOT\152\ACK/1\n\
    \\f\n\
    \\STX\EOT\CAN\DC2\ACK\155\ACK\NUL\162\ACK\SOH\n\
    \\v\n\
    \\ETX\EOT\CAN\SOH\DC2\EOT\155\ACK\b\ETB\n\
    \2\n\
    \\EOT\EOT\CAN\STX\NUL\DC2\EOT\158\ACK\EOT$\SUB$ New traderouting login identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\EOT\DC2\EOT\158\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\ENQ\DC2\EOT\158\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\SOH\DC2\EOT\158\ACK\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\ETX\DC2\EOT\158\ACK\"#\n\
    \7\n\
    \\EOT\EOT\CAN\STX\SOH\DC2\EOT\161\ACK\EOT'\SUB) New linked customer profile identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\EOT\DC2\EOT\161\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\ENQ\DC2\EOT\161\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\SOH\DC2\EOT\161\ACK\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\ETX\DC2\EOT\161\ACK%&\n\
    \$\n\
    \\STX\EOT\EM\DC2\ACK\165\ACK\NUL\205\ACK\SOH\SUB\SYN Address information.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\EM\SOH\DC2\EOT\165\ACK\b\SI\n\
    \E\n\
    \\EOT\EOT\EM\EOT\NUL\DC2\ACK\168\ACK\EOT\174\ACK\ENQ\SUB5 List of possible validation statuses of an address.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\EOT\NUL\SOH\DC2\EOT\168\ACK\t\SYN\n\
    \\SO\n\
    \\ACK\EOT\EM\EOT\NUL\STX\NUL\DC2\EOT\170\ACK\b\DC4\n\
    \\SI\n\
    \\a\EOT\EM\EOT\NUL\STX\NUL\SOH\DC2\EOT\170\ACK\b\SI\n\
    \\SI\n\
    \\a\EOT\EM\EOT\NUL\STX\NUL\STX\DC2\EOT\170\ACK\DC2\DC3\n\
    \\SO\n\
    \\ACK\EOT\EM\EOT\NUL\STX\SOH\DC2\EOT\171\ACK\b\DC2\n\
    \\SI\n\
    \\a\EOT\EM\EOT\NUL\STX\SOH\SOH\DC2\EOT\171\ACK\b\r\n\
    \\SI\n\
    \\a\EOT\EM\EOT\NUL\STX\SOH\STX\DC2\EOT\171\ACK\DLE\DC1\n\
    \\SO\n\
    \\ACK\EOT\EM\EOT\NUL\STX\STX\DC2\EOT\172\ACK\b\SUB\n\
    \\SI\n\
    \\a\EOT\EM\EOT\NUL\STX\STX\SOH\DC2\EOT\172\ACK\b\NAK\n\
    \\SI\n\
    \\a\EOT\EM\EOT\NUL\STX\STX\STX\DC2\EOT\172\ACK\CAN\EM\n\
    \\SO\n\
    \\ACK\EOT\EM\EOT\NUL\STX\ETX\DC2\EOT\173\ACK\b\DLE\n\
    \\SI\n\
    \\a\EOT\EM\EOT\NUL\STX\ETX\SOH\DC2\EOT\173\ACK\b\v\n\
    \\SI\n\
    \\a\EOT\EM\EOT\NUL\STX\ETX\STX\DC2\EOT\173\ACK\SO\SI\n\
    \o\n\
    \\EOT\EOT\EM\STX\NUL\DC2\EOT\177\ACK\EOT'\SUBa List of field ids to clear. Erasable fields must be defined in a message where Address is used.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\EOT\DC2\EOT\177\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\ENQ\DC2\EOT\177\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\SOH\DC2\EOT\177\ACK\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\ETX\DC2\EOT\177\ACK%&\n\
    \?\n\
    \\EOT\EOT\EM\STX\SOH\DC2\EOT\180\ACK\EOT \SUB1 Country code (ISO 3166 based) (max length = 2).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\EOT\DC2\EOT\180\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\ENQ\DC2\EOT\180\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\SOH\DC2\EOT\180\ACK\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\ETX\DC2\EOT\180\ACK\RS\US\n\
    \=\n\
    \\EOT\EOT\EM\STX\STX\DC2\EOT\183\ACK\EOT\RS\SUB/ State code (ISO 3166 based) (max length = 2).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\EOT\DC2\EOT\183\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\ENQ\DC2\EOT\183\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\SOH\DC2\EOT\183\ACK\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\ETX\DC2\EOT\183\ACK\FS\GS\n\
    \'\n\
    \\EOT\EOT\EM\STX\ETX\DC2\EOT\186\ACK\EOT\GS\SUB\EM City (max length = 25).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\EOT\DC2\EOT\186\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\ENQ\DC2\EOT\186\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\SOH\DC2\EOT\186\ACK\DC4\CAN\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\ETX\DC2\EOT\186\ACK\ESC\FS\n\
    \1\n\
    \\EOT\EOT\EM\STX\EOT\DC2\EOT\189\ACK\EOT\FS\SUB# ZIP/Postal code (max length = 9).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\EOT\DC2\EOT\189\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\ENQ\DC2\EOT\189\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\SOH\DC2\EOT\189\ACK\DC4\ETB\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\ETX\DC2\EOT\189\ACK\SUB\ESC\n\
    \1\n\
    \\EOT\EOT\EM\STX\ENQ\DC2\EOT\192\ACK\EOT \SUB# Address line 1 (max length = 58).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\EOT\DC2\EOT\192\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\ENQ\DC2\EOT\192\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\SOH\DC2\EOT\192\ACK\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\ETX\DC2\EOT\192\ACK\RS\US\n\
    \1\n\
    \\EOT\EOT\EM\STX\ACK\DC2\EOT\195\ACK\EOT\"\SUB# Address line 2 (max length = 58).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\EOT\DC2\EOT\195\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\ENQ\DC2\EOT\195\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\SOH\DC2\EOT\195\ACK\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\ETX\DC2\EOT\195\ACK !\n\
    \7\n\
    \\EOT\EOT\EM\STX\a\DC2\EOT\198\ACK\EOT\GS\SUB) Name of address for its identification.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\a\EOT\DC2\EOT\198\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\a\ENQ\DC2\EOT\198\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\a\SOH\DC2\EOT\198\ACK\DC4\CAN\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\a\ETX\DC2\EOT\198\ACK\ESC\FS\n\
    \q\n\
    \\EOT\EOT\EM\STX\b\DC2\EOT\202\ACK\EOT'\SUBc Validation status of the address.\n\
    \ This field is associated with Address.AddressStatus enum type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\b\EOT\DC2\EOT\202\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\b\ENQ\DC2\EOT\202\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\b\SOH\DC2\EOT\202\ACK\DC4\"\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\b\ETX\DC2\EOT\202\ACK%&\n\
    \$\n\
    \\STX\EOT\SUB\DC2\ACK\208\ACK\NUL\231\ACK\SOH\SUB\SYN Contact information.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\SUB\SOH\DC2\EOT\208\ACK\b\SUB\n\
    \N\n\
    \\EOT\EOT\SUB\STX\NUL\DC2\EOT\212\ACK\EOT\GS\SUB@ List of e-mail addresses.\n\
    \ Maximum allowed size is 2 elements.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\EOT\DC2\EOT\212\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\ACK\DC2\EOT\212\ACK\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\SOH\DC2\EOT\212\ACK\DC3\CAN\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\ETX\DC2\EOT\212\ACK\ESC\FS\n\
    \D\n\
    \\EOT\EOT\SUB\STX\SOH\DC2\EOT\216\ACK\EOT\GS\SUB6 List of phones.\n\
    \ Maximum allowed size is 3 elements.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\EOT\DC2\EOT\216\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\ACK\DC2\EOT\216\ACK\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\SOH\DC2\EOT\216\ACK\DC3\CAN\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\ETX\DC2\EOT\216\ACK\ESC\FS\n\
    \B\n\
    \\EOT\EOT\SUB\STX\STX\DC2\EOT\220\ACK\EOT\ESC\SUB4 List of faxes.\n\
    \ Maximum allowed size is 1 element.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\EOT\DC2\EOT\220\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\ACK\DC2\EOT\220\ACK\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\SOH\DC2\EOT\220\ACK\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\ETX\DC2\EOT\220\ACK\EM\SUB\n\
    \5\n\
    \\EOT\EOT\SUB\STX\ETX\DC2\EOT\223\ACK\EOT#\SUB' Contact first name (max length = 20).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\EOT\DC2\EOT\223\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\ENQ\DC2\EOT\223\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\SOH\DC2\EOT\223\ACK\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\ETX\DC2\EOT\223\ACK!\"\n\
    \4\n\
    \\EOT\EOT\SUB\STX\EOT\DC2\EOT\226\ACK\EOT\"\SUB& Contact last name (max length = 25).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\EOT\DC2\EOT\226\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\ENQ\DC2\EOT\226\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\SOH\DC2\EOT\226\ACK\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\ETX\DC2\EOT\226\ACK !\n\
    \M\n\
    \\EOT\EOT\SUB\STX\ENQ\DC2\EOT\230\ACK\EOT!\SUB? Mail address information.\n\
    \ Maximum allowed size is 1 element.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ENQ\EOT\DC2\EOT\230\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ENQ\ACK\DC2\EOT\230\ACK\r\DC4\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ENQ\SOH\DC2\EOT\230\ACK\NAK\FS\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ENQ\ETX\DC2\EOT\230\ACK\US \n\
    \+\n\
    \\STX\EOT\ESC\DC2\ACK\234\ACK\NUL\239\ACK\SOH\SUB\GS e-mail address information.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\ESC\SOH\DC2\EOT\234\ACK\b\r\n\
    \\128\SOH\n\
    \\EOT\EOT\ESC\STX\NUL\DC2\EOT\238\ACK\EOT\RS\SUBr e-mail (max length = 60).\n\
    \ It should be valid email address according to RFC 5322 standard or single period '.'.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\EOT\DC2\EOT\238\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\ENQ\DC2\EOT\238\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\SOH\DC2\EOT\238\ACK\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\ESC\STX\NUL\ETX\DC2\EOT\238\ACK\FS\GS\n\
    \\"\n\
    \\STX\EOT\FS\DC2\ACK\242\ACK\NUL\246\ACK\SOH\SUB\DC4 Phone information.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\FS\SOH\DC2\EOT\242\ACK\b\r\n\
    \/\n\
    \\EOT\EOT\FS\STX\NUL\DC2\EOT\245\ACK\EOT\US\SUB! Phone number (max length = 20).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\EOT\DC2\EOT\245\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\ENQ\DC2\EOT\245\ACK\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\SOH\DC2\EOT\245\ACK\DC4\SUB\n\
    \\r\n\
    \\ENQ\EOT\FS\STX\NUL\ETX\DC2\EOT\245\ACK\GS\RS\n\
    \&\n\
    \\STX\EOT\GS\DC2\ACK\249\ACK\NUL\253\ACK\SOH\SUB\CAN Create user operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\GS\SOH\DC2\EOT\249\ACK\b\DC2\n\
    \\US\n\
    \\EOT\EOT\GS\STX\NUL\DC2\EOT\252\ACK\EOT\ESC\SUB\DC1 User to create.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\EOT\DC2\EOT\252\ACK\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\ACK\DC2\EOT\252\ACK\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\SOH\DC2\EOT\252\ACK\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\GS\STX\NUL\ETX\DC2\EOT\252\ACK\EM\SUB\n\
    \&\n\
    \\STX\EOT\RS\DC2\ACK\128\a\NUL\136\a\SOH\SUB\CAN Update user operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\RS\SOH\DC2\EOT\128\a\b\DC2\n\
    \T\n\
    \\EOT\EOT\RS\STX\NUL\DC2\EOT\132\a\EOT\ESC\SUBF [required] User to update.\n\
    \ Only fields for update must be provided.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\NUL\EOT\DC2\EOT\132\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\NUL\ACK\DC2\EOT\132\a\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\NUL\SOH\DC2\EOT\132\a\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\NUL\ETX\DC2\EOT\132\a\EM\SUB\n\
    \7\n\
    \\EOT\EOT\RS\STX\SOH\DC2\EOT\135\a\EOTA\SUB) [obsolete] Use only user field instead.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\EOT\DC2\EOT\135\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\ACK\DC2\EOT\135\a\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\SOH\DC2\EOT\135\a\DC2(\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\ETX\DC2\EOT\135\a+,\n\
    \\r\n\
    \\ENQ\EOT\RS\STX\SOH\b\DC2\EOT\135\a-@\n\
    \\SO\n\
    \\ACK\EOT\RS\STX\SOH\b\ETX\DC2\EOT\135\a.?\n\
    \&\n\
    \\STX\EOT\US\DC2\ACK\139\a\NUL\143\a\SOH\SUB\CAN Remove user operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\US\SOH\DC2\EOT\139\a\b\DC2\n\
    \*\n\
    \\EOT\EOT\US\STX\NUL\DC2\EOT\142\a\EOT\ESC\SUB\FS User identifier to remove.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\EOT\DC2\EOT\142\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\ENQ\DC2\EOT\142\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\SOH\DC2\EOT\142\a\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT\US\STX\NUL\ETX\DC2\EOT\142\a\EM\SUB\n\
    \'\n\
    \\STX\EOT \DC2\ACK\146\a\NUL\150\a\SOH\SUB\EM Restore user operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOT \SOH\DC2\EOT\146\a\b\DC3\n\
    \+\n\
    \\EOT\EOT \STX\NUL\DC2\EOT\149\a\EOT\ESC\SUB\GS User identifier to restore.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\EOT\DC2\EOT\149\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\ENQ\DC2\EOT\149\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\SOH\DC2\EOT\149\a\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT \STX\NUL\ETX\DC2\EOT\149\a\EM\SUB\n\
    \0\n\
    \\STX\EOT!\DC2\ACK\153\a\NUL\157\a\SOH\SUB\" Result of create user operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOT!\SOH\DC2\EOT\153\a\b\CAN\n\
    \/\n\
    \\EOT\EOT!\STX\NUL\DC2\EOT\156\a\EOT\ESC\SUB! Assigned user id, if succeeded.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\EOT\DC2\EOT\156\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\ENQ\DC2\EOT\156\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\SOH\DC2\EOT\156\a\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT!\STX\NUL\ETX\DC2\EOT\156\a\EM\SUB\n\
    \0\n\
    \\STX\EOT\"\DC2\ACK\160\a\NUL\162\a\SOH\SUB\" Result of update user operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\"\SOH\DC2\EOT\160\a\b\CAN\n\
    \1\n\
    \\STX\EOT#\DC2\ACK\165\a\NUL\167\a\SOH\SUB# Result of restore user operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOT#\SOH\DC2\EOT\165\a\b\EM\n\
    \0\n\
    \\STX\EOT$\DC2\ACK\170\a\NUL\172\a\SOH\SUB\" Result of remove user operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOT$\SOH\DC2\EOT\170\a\b\CAN\n\
    \`\n\
    \\STX\EOT%\DC2\ACK\175\a\NUL\189\a\SOH\SUBR This entity is used as a common list of name - value pairs for different fields.\n\
    \\n\
    \\v\n\
    \\ETX\EOT%\SOH\DC2\EOT\175\a\b\SYN\n\
    \h\n\
    \\EOT\EOT%\STX\NUL\DC2\EOT\178\a\EOT\GS\SUBZ The value is associated with Lookup Property type enum defined within the request scope.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\EOT\DC2\EOT\178\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\ENQ\DC2\EOT\178\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\SOH\DC2\EOT\178\a\DC4\CAN\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\ETX\DC2\EOT\178\a\ESC\FS\n\
    \\132\SOH\n\
    \\EOT\EOT%\STX\SOH\DC2\EOT\182\a\EOT\RS\SUBv Property Value.\n\
    \ This value must be provided as corresponding field value (usually <entity>_id) in specific message.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\EOT\DC2\EOT\182\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\ENQ\DC2\EOT\182\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\SOH\DC2\EOT\182\a\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\ETX\DC2\EOT\182\a\FS\GS\n\
    \\RS\n\
    \\EOT\EOT%\STX\STX\DC2\EOT\185\a\EOT$\SUB\DLE Property Name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\EOT\DC2\EOT\185\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\ACK\DC2\EOT\185\a\r\SUB\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\SOH\DC2\EOT\185\a\ESC\US\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\ETX\DC2\EOT\185\a\"#\n\
    \.\n\
    \\EOT\EOT%\STX\ETX\DC2\EOT\188\a\EOT+\SUB  Optional property description.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\ETX\EOT\DC2\EOT\188\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\ETX\ACK\DC2\EOT\188\a\r\SUB\n\
    \\r\n\
    \\ENQ\EOT%\STX\ETX\SOH\DC2\EOT\188\a\ESC&\n\
    \\r\n\
    \\ENQ\EOT%\STX\ETX\ETX\DC2\EOT\188\a)*\n\
    \0\n\
    \\STX\EOT&\DC2\ACK\192\a\NUL\198\a\SOH\SUB\" Get a list of lookup properties.\n\
    \\n\
    \\v\n\
    \\ETX\EOT&\SOH\DC2\EOT\192\a\b!\n\
    \\186\SOH\n\
    \\EOT\EOT&\STX\NUL\DC2\EOT\197\a\EOT&\SUB\171\SOH List of property types to request.\n\
    \ Empty list means all types are requested.\n\
    \ The values are associated with Lookup Property type enum defined within the request scope.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\EOT\DC2\EOT\197\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\ENQ\DC2\EOT\197\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\SOH\DC2\EOT\197\a\DC4!\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\ETX\DC2\EOT\197\a$%\n\
    \>\n\
    \\STX\EOT'\DC2\ACK\201\a\NUL\205\a\SOH\SUB0 Result of a list of lookup properties request.\n\
    \\n\
    \\v\n\
    \\ETX\EOT'\SOH\DC2\EOT\201\a\b \n\
    \4\n\
    \\EOT\EOT'\STX\NUL\DC2\EOT\204\a\EOT0\SUB& List of requested lookup properties.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\EOT\DC2\EOT\204\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\ACK\DC2\EOT\204\a\r\ESC\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\SOH\DC2\EOT\204\a\FS+\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\ETX\DC2\EOT\204\a./\n\
    \(\n\
    \\STX\EOT(\DC2\ACK\208\a\NUL\249\a\SOH\SUB\SUB Search for sales series.\n\
    \\n\
    \\v\n\
    \\ETX\EOT(\SOH\DC2\EOT\208\a\b \n\
    \:\n\
    \\EOT\EOT(\EOT\NUL\DC2\ACK\211\a\EOT\233\a\ENQ\SUB* List of possible search refine criteria.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\EOT\NUL\SOH\DC2\EOT\211\a\t\ETB\n\
    \,\n\
    \\ACK\EOT(\EOT\NUL\STX\NUL\DC2\EOT\214\a\b\SI\SUB\FS Search by sales series ID.\n\
    \\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\NUL\SOH\DC2\EOT\214\a\b\n\
    \\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\NUL\STX\DC2\EOT\214\a\r\SO\n\
    \0\n\
    \\ACK\EOT(\EOT\NUL\STX\SOH\DC2\EOT\217\a\b\DC3\SUB  Search by sales series number.\n\
    \\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\SOH\SOH\DC2\EOT\217\a\b\SO\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\SOH\STX\DC2\EOT\217\a\DC1\DC2\n\
    \.\n\
    \\ACK\EOT(\EOT\NUL\STX\STX\DC2\EOT\220\a\b\DC1\SUB\RS Search by sales series name.\n\
    \\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\STX\SOH\DC2\EOT\220\a\b\f\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\STX\STX\DC2\EOT\220\a\SI\DLE\n\
    \)\n\
    \\ACK\EOT(\EOT\NUL\STX\ETX\DC2\EOT\223\a\b\EM\SUB\EM Search by brokerage id.\n\
    \\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\ETX\SOH\DC2\EOT\223\a\b\DC4\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\ETX\STX\DC2\EOT\223\a\ETB\CAN\n\
    \&\n\
    \\ACK\EOT(\EOT\NUL\STX\EOT\DC2\EOT\226\a\b\ETB\SUB\SYN Search by first name\n\
    \\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\EOT\SOH\DC2\EOT\226\a\b\DC2\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\EOT\STX\DC2\EOT\226\a\NAK\SYN\n\
    \%\n\
    \\ACK\EOT(\EOT\NUL\STX\ENQ\DC2\EOT\229\a\b\SYN\SUB\NAK Search by last name\n\
    \\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\ENQ\SOH\DC2\EOT\229\a\b\DC1\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\ENQ\STX\DC2\EOT\229\a\DC4\NAK\n\
    \!\n\
    \\ACK\EOT(\EOT\NUL\STX\ACK\DC2\EOT\232\a\b\DC2\SUB\DC1 Search by email\n\
    \\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\ACK\SOH\DC2\EOT\232\a\b\r\n\
    \\SI\n\
    \\a\EOT(\EOT\NUL\STX\ACK\STX\DC2\EOT\232\a\DLE\DC1\n\
    \*\n\
    \\EOT\EOT(\STX\NUL\DC2\EOT\236\a\EOT:\SUB\FS [obsolete] Text to search.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\EOT\DC2\EOT\236\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\ENQ\DC2\EOT\236\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\SOH\DC2\EOT\236\a\DC4!\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\ETX\DC2\EOT\236\a$%\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\b\DC2\EOT\236\a&9\n\
    \\SO\n\
    \\ACK\EOT(\STX\NUL\b\ETX\DC2\EOT\236\a'8\n\
    \\158\SOH\n\
    \\EOT\EOT(\STX\SOH\DC2\EOT\241\a\EOTC\SUB\143\SOH [obsolete] List of search options.\n\
    \ This field is associated with SearchCriteria enum type.\n\
    \ Empty list means search by any possible options.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\EOT\DC2\EOT\241\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\ENQ\DC2\EOT\241\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\SOH\DC2\EOT\241\a\DC4,\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\ETX\DC2\EOT\241\a/0\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\b\DC2\EOT\241\a1B\n\
    \\SO\n\
    \\ACK\EOT(\STX\SOH\b\ETX\DC2\EOT\241\a2A\n\
    \h\n\
    \\EOT\EOT(\STX\STX\DC2\EOT\244\a\EOT-\SUBZ List of search options. Each option has its own search text, criteria and matching rule.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\STX\EOT\DC2\EOT\244\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT(\STX\STX\ACK\DC2\EOT\244\a\r\EM\n\
    \\r\n\
    \\ENQ\EOT(\STX\STX\SOH\DC2\EOT\244\a\SUB(\n\
    \\r\n\
    \\ENQ\EOT(\STX\STX\ETX\DC2\EOT\244\a+,\n\
    \h\n\
    \\EOT\EOT(\STX\ETX\DC2\EOT\248\a\EOT7\SUBZ Indicates, whether all criteria must match at once.\n\
    \ By default any criteria must match.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\ETX\EOT\DC2\EOT\248\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT(\STX\ETX\ENQ\DC2\EOT\248\a\r\DC1\n\
    \\r\n\
    \\ENQ\EOT(\STX\ETX\SOH\DC2\EOT\248\a\DC2 \n\
    \\r\n\
    \\ENQ\EOT(\STX\ETX\ETX\DC2\EOT\248\a#$\n\
    \\r\n\
    \\ENQ\EOT(\STX\ETX\b\DC2\EOT\248\a%6\n\
    \\r\n\
    \\ENQ\EOT(\STX\ETX\a\DC2\EOT\248\a05\n\
    \5\n\
    \\STX\EOT)\DC2\ACK\252\a\NUL\144\b\SOH\SUB' Represents single found sales series.\n\
    \\n\
    \\v\n\
    \\ETX\EOT)\SOH\DC2\EOT\252\a\b%\n\
    \\f\n\
    \\EOT\EOT)\STX\NUL\DC2\EOT\254\a\EOT(\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\EOT\DC2\EOT\254\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\ENQ\DC2\EOT\254\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\SOH\DC2\EOT\254\a\DC4#\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\ETX\DC2\EOT\254\a&'\n\
    \\f\n\
    \\EOT\EOT)\STX\SOH\DC2\EOT\128\b\EOT*\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\EOT\DC2\EOT\128\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\ENQ\DC2\EOT\128\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\SOH\DC2\EOT\128\b\DC4%\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\ETX\DC2\EOT\128\b()\n\
    \\f\n\
    \\EOT\EOT)\STX\STX\DC2\EOT\130\b\EOT,\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\EOT\DC2\EOT\130\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\ENQ\DC2\EOT\130\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\SOH\DC2\EOT\130\b\DC4'\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\ETX\DC2\EOT\130\b*+\n\
    \\f\n\
    \\EOT\EOT)\STX\ETX\DC2\EOT\132\b\EOT%\n\
    \\r\n\
    \\ENQ\EOT)\STX\ETX\EOT\DC2\EOT\132\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\ETX\ENQ\DC2\EOT\132\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\ETX\SOH\DC2\EOT\132\b\DC4 \n\
    \\r\n\
    \\ENQ\EOT)\STX\ETX\ETX\DC2\EOT\132\b#$\n\
    \\f\n\
    \\EOT\EOT)\STX\EOT\DC2\EOT\134\b\EOT'\n\
    \\r\n\
    \\ENQ\EOT)\STX\EOT\EOT\DC2\EOT\134\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\EOT\ENQ\DC2\EOT\134\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\EOT\SOH\DC2\EOT\134\b\DC4\"\n\
    \\r\n\
    \\ENQ\EOT)\STX\EOT\ETX\DC2\EOT\134\b%&\n\
    \\f\n\
    \\EOT\EOT)\STX\ENQ\DC2\EOT\136\b\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT)\STX\ENQ\EOT\DC2\EOT\136\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\ENQ\ENQ\DC2\EOT\136\b\r\DC1\n\
    \\r\n\
    \\ENQ\EOT)\STX\ENQ\SOH\DC2\EOT\136\b\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT)\STX\ENQ\ETX\DC2\EOT\136\b\FS\GS\n\
    \\f\n\
    \\EOT\EOT)\STX\ACK\DC2\EOT\138\b\EOT\US\n\
    \\r\n\
    \\ENQ\EOT)\STX\ACK\EOT\DC2\EOT\138\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\ACK\ENQ\DC2\EOT\138\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\ACK\SOH\DC2\EOT\138\b\DC4\SUB\n\
    \\r\n\
    \\ENQ\EOT)\STX\ACK\ETX\DC2\EOT\138\b\GS\RS\n\
    \\f\n\
    \\EOT\EOT)\STX\a\DC2\EOT\140\b\EOT#\n\
    \\r\n\
    \\ENQ\EOT)\STX\a\EOT\DC2\EOT\140\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\a\ENQ\DC2\EOT\140\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\a\SOH\DC2\EOT\140\b\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT)\STX\a\ETX\DC2\EOT\140\b!\"\n\
    \\f\n\
    \\EOT\EOT)\STX\b\DC2\EOT\142\b\EOT\"\n\
    \\r\n\
    \\ENQ\EOT)\STX\b\EOT\DC2\EOT\142\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\b\ENQ\DC2\EOT\142\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\b\SOH\DC2\EOT\142\b\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT)\STX\b\ETX\DC2\EOT\142\b !\n\
    \6\n\
    \\STX\EOT*\DC2\ACK\147\b\NUL\152\b\SOH\SUB( Common tuple message of string values.\n\
    \\n\
    \\v\n\
    \\ETX\EOT*\SOH\DC2\EOT\147\b\b\r\n\
    \\f\n\
    \\EOT\EOT*\STX\NUL\DC2\EOT\149\b\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\EOT\DC2\EOT\149\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\ENQ\DC2\EOT\149\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\SOH\DC2\EOT\149\b\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\ETX\DC2\EOT\149\b\FS\GS\n\
    \\f\n\
    \\EOT\EOT*\STX\SOH\DC2\EOT\150\b\EOT\US\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\EOT\DC2\EOT\150\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\ENQ\DC2\EOT\150\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\SOH\DC2\EOT\150\b\DC4\SUB\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\ETX\DC2\EOT\150\b\GS\RS\n\
    \\f\n\
    \\EOT\EOT*\STX\STX\DC2\EOT\151\b\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT*\STX\STX\EOT\DC2\EOT\151\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT*\STX\STX\ENQ\DC2\EOT\151\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT*\STX\STX\SOH\DC2\EOT\151\b\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT*\STX\STX\ETX\DC2\EOT\151\b\FS\GS\n\
    \\193\STX\n\
    \\STX\EOT+\DC2\ACK\158\b\NUL\179\b\SOH\SUB\178\STX Customer to sales series authorization list request message.\n\
    \ By default result contains at most DEFAULT_RESULT_RECORDS_NUMBER records.\n\
    \ Set parameter top to a larger number to receive more.\n\
    \ Either customer_id or sales_series_id or profile_id or profile_sales_series_id is required (mutually exclusive).\n\
    \\n\
    \\v\n\
    \\ETX\EOT+\SOH\DC2\EOT\158\b\b3\n\
    \5\n\
    \\EOT\EOT+\STX\NUL\DC2\EOT\162\b\EOT$\SUB' Customer ID.\n\
    \ Use profile_id instead.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\EOT\DC2\EOT\162\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\ENQ\DC2\EOT\162\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\SOH\DC2\EOT\162\b\DC4\US\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\ETX\DC2\EOT\162\b\"#\n\
    \F\n\
    \\EOT\EOT+\STX\SOH\DC2\EOT\166\b\EOT(\SUB8 Sales series ID.\n\
    \ Use profile_sales_series_id instead.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\EOT\DC2\EOT\166\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\ENQ\DC2\EOT\166\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\SOH\DC2\EOT\166\b\DC4#\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\ETX\DC2\EOT\166\b&'\n\
    \Q\n\
    \\EOT\EOT+\STX\STX\DC2\EOT\169\b\EOT\FS\SUBC optionally restrict results by returning the first 'top' records.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT+\STX\STX\EOT\DC2\EOT\169\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT+\STX\STX\ENQ\DC2\EOT\169\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT+\STX\STX\SOH\DC2\EOT\169\b\DC4\ETB\n\
    \\r\n\
    \\ENQ\EOT+\STX\STX\ETX\DC2\EOT\169\b\SUB\ESC\n\
    \^\n\
    \\EOT\EOT+\STX\ETX\DC2\EOT\174\b\EOT#\SUBP Profile ID.\n\
    \ Has priority over customer_id.\n\
    \ Supported types: customer, admin.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT+\STX\ETX\EOT\DC2\EOT\174\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT+\STX\ETX\ENQ\DC2\EOT\174\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT+\STX\ETX\SOH\DC2\EOT\174\b\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT+\STX\ETX\ETX\DC2\EOT\174\b!\"\n\
    \L\n\
    \\EOT\EOT+\STX\EOT\DC2\EOT\178\b\EOT0\SUB> Profile sales series ID.\n\
    \ Has priority over sales_series_id.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT+\STX\EOT\EOT\DC2\EOT\178\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT+\STX\EOT\ENQ\DC2\EOT\178\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT+\STX\EOT\SOH\DC2\EOT\178\b\DC4+\n\
    \\r\n\
    \\ENQ\EOT+\STX\EOT\ETX\DC2\EOT\178\b./\n\
    \M\n\
    \\STX\EOT,\DC2\ACK\182\b\NUL\190\b\SOH\SUB? Update customer to sales series authorization list operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOT,\SOH\DC2\EOT\182\b\b2\n\
    \r\n\
    \\EOT\EOT,\STX\NUL\DC2\EOT\186\b\EOT6\SUBd Links to add.\n\
    \ Authorization is added if it does not exist with this customer and sales series id.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\EOT\DC2\EOT\186\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\ACK\DC2\EOT\186\b\r$\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\SOH\DC2\EOT\186\b%1\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\ETX\DC2\EOT\186\b45\n\
    \v\n\
    \\EOT\EOT,\STX\SOH\DC2\EOT\189\b\EOT'\SUBh Links to remove. First - customer id (profile id), second - sales series id (profile sales series id).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\EOT\DC2\EOT\189\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\ACK\DC2\EOT\189\b\r\DC2\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\SOH\DC2\EOT\189\b\DC3\"\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\ETX\DC2\EOT\189\b%&\n\
    \K\n\
    \\STX\EOT-\DC2\ACK\193\b\NUL\201\b\SOH\SUB= Customer to sales series authorization list result message.\n\
    \\n\
    \\v\n\
    \\ETX\EOT-\SOH\DC2\EOT\193\b\b2\n\
    \E\n\
    \\EOT\EOT-\STX\NUL\DC2\EOT\196\b\EOTE\SUB7 List of customer to sales series authorization links.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\EOT\DC2\EOT\196\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\ACK\DC2\EOT\196\b\r$\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\SOH\DC2\EOT\196\b%@\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\ETX\DC2\EOT\196\bCD\n\
    \r\n\
    \\EOT\EOT-\STX\SOH\DC2\EOT\200\b\EOT3\SUBd This flag is set to true if all results are sent\n\
    \ and nothing was filtered out by 'top' parameter.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\EOT\DC2\EOT\200\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\ENQ\DC2\EOT\200\b\r\DC1\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\SOH\DC2\EOT\200\b\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\ETX\DC2\EOT\200\b !\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\b\DC2\EOT\200\b\"2\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\a\DC2\EOT\200\b-1\n\
    \\152\SOH\n\
    \\STX\EOT.\DC2\ACK\204\b\NUL\207\b\SOH\SUBA Result of customer to sales series authorization list updation.\n\
    \\"G If message is received then authorizations were updated successfully.\n\
    \\n\
    \\v\n\
    \\ETX\EOT.\SOH\DC2\EOT\204\b\b8\n\
    \<\n\
    \\STX\EOT/\DC2\ACK\210\b\NUL\234\b\SOH\SUB. Customer to sales series authorization link.\n\
    \\n\
    \\v\n\
    \\ETX\EOT/\SOH\DC2\EOT\210\b\b\US\n\
    \5\n\
    \\EOT\EOT/\STX\NUL\DC2\EOT\214\b\EOT$\SUB' Customer ID.\n\
    \ Use profile_id instead.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\EOT\DC2\EOT\214\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\ENQ\DC2\EOT\214\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\SOH\DC2\EOT\214\b\DC4\US\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\ETX\DC2\EOT\214\b\"#\n\
    \F\n\
    \\EOT\EOT/\STX\SOH\DC2\EOT\218\b\EOT(\SUB8 Sales series ID.\n\
    \ Use profile_sales_series_id instead.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\EOT\DC2\EOT\218\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\ENQ\DC2\EOT\218\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\SOH\DC2\EOT\218\b\DC4#\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\ETX\DC2\EOT\218\b&'\n\
    \.\n\
    \\EOT\EOT/\STX\STX\DC2\EOT\221\b\EOT*\SUB  [immutable] Sales series name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\EOT\DC2\EOT\221\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\ENQ\DC2\EOT\221\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\SOH\DC2\EOT\221\b\DC4%\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\ETX\DC2\EOT\221\b()\n\
    \0\n\
    \\EOT\EOT/\STX\ETX\DC2\EOT\224\b\EOT,\SUB\" [immutable] Sales series number.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT/\STX\ETX\EOT\DC2\EOT\224\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\ETX\ENQ\DC2\EOT\224\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT/\STX\ETX\SOH\DC2\EOT\224\b\DC4'\n\
    \\r\n\
    \\ENQ\EOT/\STX\ETX\ETX\DC2\EOT\224\b*+\n\
    \n\n\
    \\EOT\EOT/\STX\EOT\DC2\EOT\229\b\EOT#\SUB` [required] Main profile id.\n\
    \ Has priority over customer_id.\n\
    \ Supported types: customer, admin.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT/\STX\EOT\EOT\DC2\EOT\229\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\EOT\ENQ\DC2\EOT\229\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT/\STX\EOT\SOH\DC2\EOT\229\b\DC4\RS\n\
    \\r\n\
    \\ENQ\EOT/\STX\EOT\ETX\DC2\EOT\229\b!\"\n\
    \W\n\
    \\EOT\EOT/\STX\ENQ\DC2\EOT\233\b\EOT0\SUBI [required] Sales series profile id.\n\
    \ Has priority over sales_series_id.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT/\STX\ENQ\EOT\DC2\EOT\233\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\ENQ\ENQ\DC2\EOT\233\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT/\STX\ENQ\SOH\DC2\EOT\233\b\DC4+\n\
    \\r\n\
    \\ENQ\EOT/\STX\ENQ\ETX\DC2\EOT\233\b./\n\
    \2\n\
    \\STX\EOT0\DC2\ACK\237\b\NUL\241\b\SOH\SUB$ Login additional settings request.\n\
    \\n\
    \\v\n\
    \\ETX\EOT0\SOH\DC2\EOT\237\b\b\FS\n\
    \,\n\
    \\EOT\EOT0\STX\NUL\DC2\EOT\240\b\EOT!\SUB\RS [required] Login identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\EOT\DC2\EOT\240\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\ENQ\DC2\EOT\240\b\r\DC3\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\SOH\DC2\EOT\240\b\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\ETX\DC2\EOT\240\b\US \n\
    \/\n\
    \\STX\EOT1\DC2\ACK\244\b\NUL\248\b\SOH\SUB! Result of LoginSettingsRequest.\n\
    \\n\
    \\v\n\
    \\ETX\EOT1\SOH\DC2\EOT\244\b\b\ESC\n\
    \\US\n\
    \\EOT\EOT1\STX\NUL\DC2\EOT\247\b\EOT.\SUB\DC1 Login settings.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\EOT\DC2\EOT\247\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\ACK\DC2\EOT\247\b\r\SUB\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\SOH\DC2\EOT\247\b\ESC)\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\ETX\DC2\EOT\247\b,-\n\
    \&\n\
    \\STX\EOT2\DC2\ACK\251\b\NUL\255\b\SOH\SUB\CAN Update Login settings.\n\
    \\n\
    \\v\n\
    \\ETX\EOT2\SOH\DC2\EOT\251\b\b\ESC\n\
    \*\n\
    \\EOT\EOT2\STX\NUL\DC2\EOT\254\b\EOT.\SUB\FS [required] Login settings.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\EOT\DC2\EOT\254\b\EOT\f\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\ACK\DC2\EOT\254\b\r\SUB\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\SOH\DC2\EOT\254\b\ESC)\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\ETX\DC2\EOT\254\b,-\n\
    \i\n\
    \\STX\EOT3\DC2\ACK\130\t\NUL\133\t\SOH\SUB  Result of UpdateLoginSettings.\n\
    \\"9 If message is received then operation was successfully.\n\
    \\n\
    \\v\n\
    \\ETX\EOT3\SOH\DC2\EOT\130\t\b!\n\
    \,\n\
    \\STX\EOT4\DC2\ACK\136\t\NUL\140\t\SOH\SUB\RS Requests login's member ids.\n\
    \\n\
    \\v\n\
    \\ETX\EOT4\SOH\DC2\EOT\136\t\b(\n\
    \,\n\
    \\EOT\EOT4\STX\NUL\DC2\EOT\139\t\EOT!\SUB\RS [required] Login identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\EOT\DC2\EOT\139\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\ENQ\DC2\EOT\139\t\r\DC3\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\SOH\DC2\EOT\139\t\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\ETX\DC2\EOT\139\t\US \n\
    \,\n\
    \\STX\EOT5\DC2\ACK\143\t\NUL\147\t\SOH\SUB\RS Requests login's member ids.\n\
    \\n\
    \\v\n\
    \\ETX\EOT5\SOH\DC2\EOT\143\t\b'\n\
    \\ESC\n\
    \\EOT\EOT5\STX\NUL\DC2\EOT\146\t\EOT8\SUB\r Member ids.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\EOT\DC2\EOT\146\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\ACK\DC2\EOT\146\t\r\"\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\SOH\DC2\EOT\146\t#3\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\ETX\DC2\EOT\146\t67\n\
    \ \n\
    \\STX\EOT6\DC2\ACK\150\t\NUL\161\t\SOH\SUB\DC2 Login member id.\n\
    \\n\
    \\v\n\
    \\ETX\EOT6\SOH\DC2\EOT\150\t\b\GS\n\
    \,\n\
    \\EOT\EOT6\STX\NUL\DC2\EOT\153\t\EOT!\SUB\RS [required] Login identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\EOT\DC2\EOT\153\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\ENQ\DC2\EOT\153\t\r\DC3\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\SOH\DC2\EOT\153\t\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\ETX\DC2\EOT\153\t\US \n\
    \\128\SOH\n\
    \\EOT\EOT6\STX\SOH\DC2\EOT\157\t\EOT$\SUBr [required] Exchange identifier.\n\
    \ LookupPropertyListRequest { property_type = CommonLookupPropertyType.EXCHANGE }\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\EOT\DC2\EOT\157\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\ENQ\DC2\EOT\157\t\r\DC3\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\SOH\DC2\EOT\157\t\DC4\US\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\ETX\DC2\EOT\157\t\"#\n\
    \6\n\
    \\EOT\EOT6\STX\STX\DC2\EOT\160\t\EOT\"\SUB( [required] Exchange member identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\EOT\DC2\EOT\160\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\ENQ\DC2\EOT\160\t\r\DC3\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\SOH\DC2\EOT\160\t\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\ETX\DC2\EOT\160\t !\n\
    \5\n\
    \\STX\EOT7\DC2\ACK\164\t\NUL\175\t\SOH\SUB' Update login exchange member id list.\n\
    \\n\
    \\v\n\
    \\ETX\EOT7\SOH\DC2\EOT\164\t\b'\n\
    \9\n\
    \\EOT\EOT7\STX\NUL\DC2\EOT\167\t\EOT!\SUB+ [required] Login id to update member ids.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\EOT\DC2\EOT\167\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\ENQ\DC2\EOT\167\t\r\DC3\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\SOH\DC2\EOT\167\t\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\ETX\DC2\EOT\167\t\US \n\
    \,\n\
    \\EOT\EOT7\STX\SOH\DC2\EOT\170\t\EOT9\SUB\RS Member ids to add or change.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\EOT\DC2\EOT\170\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\ACK\DC2\EOT\170\t\r\"\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\SOH\DC2\EOT\170\t#4\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\ETX\DC2\EOT\170\t78\n\
    \o\n\
    \\EOT\EOT7\STX\STX\DC2\EOT\174\t\EOT5\SUBa Member ids to remove from login.\n\
    \ First - login id [required], second - exchange id [required].\n\
    \\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\EOT\DC2\EOT\174\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\ACK\DC2\EOT\174\t\r\ESC\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\SOH\DC2\EOT\174\t\FS0\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\ETX\DC2\EOT\174\t34\n\
    \u\n\
    \\STX\EOT8\DC2\ACK\178\t\NUL\181\t\SOH\SUB, Result of UpdateLoginExchangeMemberIdList.\n\
    \\"9 If message is received then operation was successfully.\n\
    \\n\
    \\v\n\
    \\ETX\EOT8\SOH\DC2\EOT\178\t\b-\n\
    \)\n\
    \\STX\EOT9\DC2\ACK\184\t\NUL\188\t\SOH\SUB\ESC Activate login operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOT9\SOH\DC2\EOT\184\t\b\NAK\n\
    \8\n\
    \\EOT\EOT9\STX\NUL\DC2\EOT\187\t\EOT!\SUB* [required] Login identifier to activate.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\EOT\DC2\EOT\187\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\ENQ\DC2\EOT\187\t\r\DC3\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\SOH\DC2\EOT\187\t\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\ETX\DC2\EOT\187\t\US \n\
    \+\n\
    \\STX\EOT:\DC2\ACK\191\t\NUL\202\t\SOH\SUB\GS Deactivate login operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOT:\SOH\DC2\EOT\191\t\b\ETB\n\
    \:\n\
    \\EOT\EOT:\STX\NUL\DC2\EOT\194\t\EOT!\SUB, [required] Login identifier to deactivate.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\EOT\DC2\EOT\194\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\ENQ\DC2\EOT\194\t\r\DC3\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\SOH\DC2\EOT\194\t\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\ETX\DC2\EOT\194\t\US \n\
    \=\n\
    \\EOT\EOT:\STX\SOH\DC2\EOT\197\t\EOT(\SUB/ Date and time when login will be deactivated.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\EOT\DC2\EOT\197\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\ENQ\DC2\EOT\197\t\r\DC3\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\SOH\DC2\EOT\197\t\DC4#\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\ETX\DC2\EOT\197\t&'\n\
    \\140\SOH\n\
    \\EOT\EOT:\STX\STX\DC2\EOT\201\t\EOTE\SUB~ Flag to show that event subscription must be removed.\n\
    \ Could be set only on immediate deactivation (absent expiration_time).\n\
    \\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\EOT\DC2\EOT\201\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\ENQ\DC2\EOT\201\t\r\DC1\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\SOH\DC2\EOT\201\t\DC2.\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\ETX\DC2\EOT\201\t12\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\b\DC2\EOT\201\t3D\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\a\DC2\EOT\201\t>C\n\
    \'\n\
    \\STX\EOT;\DC2\ACK\205\t\NUL\207\t\SOH\SUB\EM Result of ActivateLogin\n\
    \\n\
    \\v\n\
    \\ETX\EOT;\SOH\DC2\EOT\205\t\b\ESC\n\
    \)\n\
    \\STX\EOT<\DC2\ACK\210\t\NUL\212\t\SOH\SUB\ESC Result of DeactivateLogin\n\
    \\n\
    \\v\n\
    \\ETX\EOT<\SOH\DC2\EOT\210\t\b\GS\n\
    \>\n\
    \\STX\EOT=\DC2\ACK\215\t\NUL\223\t\SOH\SUB0 Erases current credentials of specified types.\n\
    \\n\
    \\v\n\
    \\ETX\EOT=\SOH\DC2\EOT\215\t\b\US\n\
    \,\n\
    \\EOT\EOT=\STX\NUL\DC2\EOT\218\t\EOT!\SUB\RS [required] Login identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\EOT\DC2\EOT\218\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\ENQ\DC2\EOT\218\t\r\DC3\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\SOH\DC2\EOT\218\t\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\ETX\DC2\EOT\218\t\US \n\
    \j\n\
    \\EOT\EOT=\STX\SOH\DC2\EOT\222\t\EOT)\SUB\\ List of credentials to erase.\n\
    \ This filed is associated with common_1.CredentialType enum.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\EOT\DC2\EOT\222\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\ENQ\DC2\EOT\222\t\r\DC3\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\SOH\DC2\EOT\222\t\DC4$\n\
    \\r\n\
    \\ENQ\EOT=\STX\SOH\ETX\DC2\EOT\222\t'(\n\
    \1\n\
    \\STX\EOT>\DC2\ACK\226\t\NUL\228\t\SOH\SUB# Result of EraseCurrentCredentials\n\
    \\n\
    \\v\n\
    \\ETX\EOT>\SOH\DC2\EOT\226\t\b%\n\
    \=\n\
    \\STX\EOT?\DC2\ACK\231\t\NUL\131\n\
    \\SOH\SUB/ Represents search option for search requests.\n\
    \\n\
    \\v\n\
    \\ETX\EOT?\SOH\DC2\EOT\231\t\b\DC4\n\
    \\SO\n\
    \\EOT\EOT?\EOT\NUL\DC2\ACK\233\t\EOT\244\t\ENQ\n\
    \\r\n\
    \\ENQ\EOT?\EOT\NUL\SOH\DC2\EOT\233\t\t\NAK\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\NUL\DC2\EOT\235\t\b\NAK\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\NUL\SOH\DC2\EOT\235\t\b\DLE\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\NUL\STX\DC2\EOT\235\t\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\SOH\DC2\EOT\236\t\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\SOH\SOH\DC2\EOT\236\t\b\DC3\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\SOH\STX\DC2\EOT\236\t\SYN\ETB\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\STX\DC2\EOT\237\t\b\SYN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\STX\SOH\DC2\EOT\237\t\b\DC1\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\STX\STX\DC2\EOT\237\t\DC4\NAK\n\
    \\SO\n\
    \\ACK\EOT?\EOT\NUL\STX\ETX\DC2\EOT\238\t\b\ESC\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\ETX\SOH\DC2\EOT\238\t\b\SYN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\ETX\STX\DC2\EOT\238\t\EM\SUB\n\
    \\202\SOH\n\
    \\ACK\EOT?\EOT\NUL\STX\EOT\DC2\EOT\243\t\b\GS\SUB\185\SOH Only criteria marked as supported for this rule can be used with.\n\
    \ Format: value1,value2. Where each value matches by EXACT_EQUALITY.\n\
    \ Searches records that match any of these values.\n\
    \\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\EOT\SOH\DC2\EOT\243\t\b\CAN\n\
    \\SI\n\
    \\a\EOT?\EOT\NUL\STX\EOT\STX\DC2\EOT\243\t\ESC\FS\n\
    \E\n\
    \\EOT\EOT?\STX\NUL\DC2\EOT\248\t\EOT\GS\SUB7 [required] Text to search.\n\
    \ Empty text is prohibited.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\EOT\DC2\EOT\248\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\ENQ\DC2\EOT\248\t\r\DC3\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\SOH\DC2\EOT\248\t\DC4\CAN\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\ETX\DC2\EOT\248\t\ESC\FS\n\
    \\147\STX\n\
    \\EOT\EOT?\STX\SOH\DC2\EOT\254\t\EOT!\SUB\132\STX Search criteria.\n\
    \ For each type of search request corresponding enum values should be used.\n\
    \ Empty means search by any possible criterion.\n\
    \ Regardless 'all match mode' set on search request level, criteria given here match between each other with 'any' mode.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\EOT\DC2\EOT\254\t\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\ENQ\DC2\EOT\254\t\r\DC3\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\SOH\DC2\EOT\254\t\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\ETX\DC2\EOT\254\t\US \n\
    \\190\SOH\n\
    \\EOT\EOT?\STX\STX\DC2\EOT\130\n\
    \\EOT&\SUB\175\SOH Comparing matching rule. Associated with MatchingRule enum.\n\
    \ By default all matching rules are used in the following order: EXACT_EQUALITY, STARTS_WITH, ENDS_WITH, CONTAINS.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT?\STX\STX\EOT\DC2\EOT\130\n\
    \\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\STX\ENQ\DC2\EOT\130\n\
    \\r\DC3\n\
    \\r\n\
    \\ENQ\EOT?\STX\STX\SOH\DC2\EOT\130\n\
    \\DC4!\n\
    \\r\n\
    \\ENQ\EOT?\STX\STX\ETX\DC2\EOT\130\n\
    \$%\n\
    \e\n\
    \\STX\ENQ\NUL\DC2\ACK\138\n\
    \\NUL\157\n\
    \\SOH\SUB\CAN Operation result enum.\n\
    \2=//------------------------------------------\n\
    \// Enumerations\n\
    \\n\
    \\v\n\
    \\ETX\ENQ\NUL\SOH\DC2\EOT\138\n\
    \\ENQ\DC4\n\
    \\"\n\
    \\EOT\ENQ\NUL\STX\NUL\DC2\EOT\141\n\
    \\EOT\DLE\SUB\DC4 Successful result.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\NUL\SOH\DC2\EOT\141\n\
    \\EOT\v\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\NUL\STX\DC2\EOT\141\n\
    \\SO\SI\n\
    \\RS\n\
    \\EOT\ENQ\NUL\STX\SOH\DC2\EOT\144\n\
    \\EOT\DLE\SUB\DLE Failed result.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\SOH\SOH\DC2\EOT\144\n\
    \\EOT\v\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\SOH\STX\DC2\EOT\144\n\
    \\SO\SI\n\
    \P\n\
    \\EOT\ENQ\NUL\STX\STX\DC2\EOT\147\n\
    \\EOT\DC1\SUBB Request accepted by CMS API and will be scheduled for processing\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\STX\SOH\DC2\EOT\147\n\
    \\EOT\f\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\STX\STX\DC2\EOT\147\n\
    \\SI\DLE\n\
    \<\n\
    \\EOT\ENQ\NUL\STX\ETX\DC2\EOT\150\n\
    \\EOT\SI\SUB. Request was defered in CMS API Waiting Queue\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ETX\SOH\DC2\EOT\150\n\
    \\EOT\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ETX\STX\DC2\EOT\150\n\
    \\r\SO\n\
    \5\n\
    \\EOT\ENQ\NUL\STX\EOT\DC2\EOT\153\n\
    \\EOT\SYN\SUB' Request processing started by CMS API\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\EOT\SOH\DC2\EOT\153\n\
    \\EOT\DC1\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\EOT\STX\DC2\EOT\153\n\
    \\DC4\NAK\n\
    \8\n\
    \\EOT\ENQ\NUL\STX\ENQ\DC2\EOT\156\n\
    \\EOT\DC1\SUB* Request was cancelled from Waiting Queue\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ENQ\SOH\DC2\EOT\156\n\
    \\EOT\f\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ENQ\STX\DC2\EOT\156\n\
    \\SI\DLE\n\
    \/\n\
    \\STX\ENQ\SOH\DC2\ACK\160\n\
    \\NUL\170\n\
    \\SOH\SUB! Domain of the login information\n\
    \\n\
    \\v\n\
    \\ETX\ENQ\SOH\SOH\DC2\EOT\160\n\
    \\ENQ\DLE\n\
    \)\n\
    \\EOT\ENQ\SOH\STX\NUL\DC2\EOT\163\n\
    \\EOT\SUB\SUB\ESC CQG Gateway login domain.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\NUL\SOH\DC2\EOT\163\n\
    \\EOT\NAK\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\NUL\STX\DC2\EOT\163\n\
    \\CAN\EM\n\
    \<\n\
    \\EOT\ENQ\SOH\STX\SOH\DC2\EOT\166\n\
    \\EOT\DC3\SUB. CQG System (IC, QTrader, etc.) login domain.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\SOH\SOH\DC2\EOT\166\n\
    \\EOT\SO\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\SOH\STX\DC2\EOT\166\n\
    \\DC1\DC2\n\
    \:\n\
    \\EOT\ENQ\SOH\STX\STX\DC2\EOT\169\n\
    \\EOT\DC2\SUB, CQG Admin (CMS, CAST, CAST2) login domain.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\STX\SOH\DC2\EOT\169\n\
    \\EOT\r\n\
    \\r\n\
    \\ENQ\ENQ\SOH\STX\STX\STX\DC2\EOT\169\n\
    \\DLE\DC1\n\
    \2\n\
    \\STX\ENQ\STX\DC2\ACK\173\n\
    \\NUL\188\n\
    \\SOH\SUB$ Types of common lookup properties.\n\
    \\n\
    \\v\n\
    \\ETX\ENQ\STX\SOH\DC2\EOT\173\n\
    \\ENQ\GS\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\NUL\DC2\EOT\175\n\
    \\EOT \n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\NUL\SOH\DC2\EOT\175\n\
    \\EOT\EM\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\NUL\STX\DC2\EOT\175\n\
    \\FS\US\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\SOH\DC2\EOT\177\n\
    \\EOT\ESC\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\SOH\SOH\DC2\EOT\177\n\
    \\EOT\DC4\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\SOH\STX\DC2\EOT\177\n\
    \\ETB\SUB\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\STX\DC2\EOT\179\n\
    \\EOT\DC3\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\STX\SOH\DC2\EOT\179\n\
    \\EOT\f\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\STX\STX\DC2\EOT\179\n\
    \\SI\DC2\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\ETX\DC2\EOT\181\n\
    \\EOT\DC2\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\ETX\SOH\DC2\EOT\181\n\
    \\EOT\v\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\ETX\STX\DC2\EOT\181\n\
    \\SO\DC1\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\EOT\DC2\EOT\183\n\
    \\EOT\DC1\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\EOT\SOH\DC2\EOT\183\n\
    \\EOT\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\EOT\STX\DC2\EOT\183\n\
    \\r\DLE\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\ENQ\DC2\EOT\185\n\
    \\EOT\EM\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\ENQ\SOH\DC2\EOT\185\n\
    \\EOT\DC2\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\ENQ\STX\DC2\EOT\185\n\
    \\NAK\CAN\n\
    \\f\n\
    \\EOT\ENQ\STX\STX\ACK\DC2\EOT\187\n\
    \\EOT \n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\ACK\SOH\DC2\EOT\187\n\
    \\EOT\EM\n\
    \\r\n\
    \\ENQ\ENQ\STX\STX\ACK\STX\DC2\EOT\187\n\
    \\FS\US\n\
    \F\n\
    \\STX\ENQ\ETX\DC2\ACK\191\n\
    \\NUL\219\n\
    \\SOH\SUB8 List of allowed AuthServer special service operations.\n\
    \\n\
    \\v\n\
    \\ETX\ENQ\ETX\SOH\DC2\EOT\191\n\
    \\ENQ\US\n\
    \\208\STX\n\
    \\EOT\ENQ\ETX\STX\NUL\DC2\EOT\200\n\
    \\EOT\ETB\SUB\193\STX Complete regular logon that was previously failed due to required operations\n\
    \ exist for logon. This operation is enabled only for SSTs returned by AuthServer\n\
    \ in LogonResult when logon fails with one of following codes:\n\
    \ - PASSWORD_EXPIRED;\n\
    \ - UNSIGNED_AGREEMENT;\n\
    \ - OPERATIONS_REQUIRED;\n\
    \ - SECOND_FACTOR_INIT_REQUIRED.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\NUL\SOH\DC2\EOT\200\n\
    \\EOT\DC2\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\NUL\STX\DC2\EOT\200\n\
    \\NAK\SYN\n\
    \J\n\
    \\EOT\ENQ\ETX\STX\SOH\DC2\EOT\203\n\
    \\EOT\NAK\SUB< Set static password without providing old static password.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\SOH\SOH\DC2\EOT\203\n\
    \\EOT\DLE\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\SOH\STX\DC2\EOT\203\n\
    \\DC3\DC4\n\
    \H\n\
    \\EOT\ENQ\ETX\STX\STX\DC2\EOT\206\n\
    \\EOT\FS\SUB: Setup new second factor regardless if it is set already.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\STX\SOH\DC2\EOT\206\n\
    \\EOT\ETB\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\STX\STX\DC2\EOT\206\n\
    \\SUB\ESC\n\
    \/\n\
    \\EOT\ENQ\ETX\STX\ETX\DC2\EOT\209\n\
    \\EOT \SUB! Change expired static password.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ETX\SOH\DC2\EOT\209\n\
    \\EOT\ESC\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ETX\STX\DC2\EOT\209\n\
    \\RS\US\n\
    \\"\n\
    \\EOT\ENQ\ETX\STX\EOT\DC2\EOT\212\n\
    \\EOT\ETB\SUB\DC4 Sign agreement(s).\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\EOT\SOH\DC2\EOT\212\n\
    \\EOT\DC2\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\EOT\STX\DC2\EOT\212\n\
    \\NAK\SYN\n\
    \+\n\
    \\EOT\ENQ\ETX\STX\ENQ\DC2\EOT\215\n\
    \\EOT\NAK\SUB\GS Verify user's phone number.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ENQ\SOH\DC2\EOT\215\n\
    \\EOT\DLE\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ENQ\STX\DC2\EOT\215\n\
    \\DC3\DC4\n\
    \+\n\
    \\EOT\ENQ\ETX\STX\ACK\DC2\EOT\218\n\
    \\EOT\ESC\SUB\GS Pass certification request.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ACK\SOH\DC2\EOT\218\n\
    \\EOT\SYN\n\
    \\r\n\
    \\ENQ\ENQ\ETX\STX\ACK\STX\DC2\EOT\218\n\
    \\EM\SUB\n\
    \)\n\
    \\STX\ENQ\EOT\DC2\ACK\222\n\
    \\NUL\226\n\
    \\SOH\SUB\ESC List of credential types.\n\
    \\n\
    \\v\n\
    \\ETX\ENQ\EOT\SOH\DC2\EOT\222\n\
    \\ENQ\DC3\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\NUL\DC2\EOT\224\n\
    \\EOT\CAN\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\NUL\SOH\DC2\EOT\224\n\
    \\EOT\DC3\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\NUL\STX\DC2\EOT\224\n\
    \\SYN\ETB\n\
    \\f\n\
    \\EOT\ENQ\EOT\STX\SOH\DC2\EOT\225\n\
    \\EOT\SYN\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\SOH\SOH\DC2\EOT\225\n\
    \\EOT\DC1\n\
    \\r\n\
    \\ENQ\ENQ\EOT\STX\SOH\STX\DC2\EOT\225\n\
    \\DC4\NAK\n\
    \*\n\
    \\STX\ENQ\ENQ\DC2\ACK\229\n\
    \\NUL\236\n\
    \\SOH\SUB\FS List of possible entities.\n\
    \\n\
    \\v\n\
    \\ETX\ENQ\ENQ\SOH\DC2\EOT\229\n\
    \\ENQ\SI\n\
    \\f\n\
    \\EOT\ENQ\ENQ\STX\NUL\DC2\EOT\231\n\
    \\EOT\FS\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\NUL\SOH\DC2\EOT\231\n\
    \\EOT\ETB\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\NUL\STX\DC2\EOT\231\n\
    \\SUB\ESC\n\
    \\f\n\
    \\EOT\ENQ\ENQ\STX\SOH\DC2\EOT\232\n\
    \\EOT\SUB\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\SOH\SOH\DC2\EOT\232\n\
    \\EOT\NAK\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\SOH\STX\DC2\EOT\232\n\
    \\CAN\EM\n\
    \\f\n\
    \\EOT\ENQ\ENQ\STX\STX\DC2\EOT\233\n\
    \\EOT\SUB\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\STX\SOH\DC2\EOT\233\n\
    \\EOT\NAK\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\STX\STX\DC2\EOT\233\n\
    \\CAN\EM\n\
    \\f\n\
    \\EOT\ENQ\ENQ\STX\ETX\DC2\EOT\234\n\
    \\EOT\FS\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\ETX\SOH\DC2\EOT\234\n\
    \\EOT\ETB\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\ETX\STX\DC2\EOT\234\n\
    \\SUB\ESC\n\
    \\f\n\
    \\EOT\ENQ\ENQ\STX\EOT\DC2\EOT\235\n\
    \\EOT#\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\EOT\SOH\DC2\EOT\235\n\
    \\EOT\RS\n\
    \\r\n\
    \\ENQ\ENQ\ENQ\STX\EOT\STX\DC2\EOT\235\n\
    \!\"\n\
    \\f\n\
    \\STX\ENQ\ACK\DC2\ACK\238\n\
    \\NUL\156\v\SOH\n\
    \\v\n\
    \\ETX\ENQ\ACK\SOH\DC2\EOT\238\n\
    \\ENQ\DC4\n\
    \A\n\
    \\EOT\ENQ\ACK\STX\NUL\DC2\EOT\242\n\
    \\EOT\SYN\SUB3// success codes\n\
    \ User is logged in to the system.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\NUL\SOH\DC2\EOT\242\n\
    \\EOT\DC1\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\NUL\STX\DC2\EOT\242\n\
    \\DC4\NAK\n\
    \8\n\
    \\EOT\ENQ\ACK\STX\SOH\DC2\EOT\246\n\
    \\EOT\CAN\SUB*// failure codes (100+)\n\
    \ General failure.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\SOH\SOH\DC2\EOT\246\n\
    \\EOT\DC1\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\SOH\STX\DC2\EOT\246\n\
    \\DC4\ETB\n\
    \v\n\
    \\EOT\ENQ\ACK\STX\STX\DC2\EOT\250\n\
    \\EOT\RS\SUBh One-time password is required for this user but it was not sent, repeat logon\n\
    \ with one-time password.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\STX\SOH\DC2\EOT\250\n\
    \\EOT\ETB\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\STX\STX\DC2\EOT\250\n\
    \\SUB\GS\n\
    \T\n\
    \\EOT\ENQ\ACK\STX\ETX\DC2\EOT\253\n\
    \\EOT\ESC\SUBF User password is expired, only change password operation is allowed.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\ETX\SOH\DC2\EOT\253\n\
    \\EOT\DC4\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\ETX\STX\DC2\EOT\253\n\
    \\ETB\SUB\n\
    \\144\SOH\n\
    \\EOT\ENQ\ACK\STX\EOT\DC2\EOT\128\v\EOT\CAN\SUB\129\SOH The negotiation rules for LogonRoutineClient have been violated, e.g. user has specified several fields at once in one message.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\EOT\SOH\DC2\EOT\128\v\EOT\DC1\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\EOT\STX\DC2\EOT\128\v\DC4\ETB\n\
    \;\n\
    \\EOT\ENQ\ACK\STX\ENQ\DC2\EOT\131\v\EOT\ESC\SUB- Some fields in LogonInit have wrong values.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\ENQ\SOH\DC2\EOT\131\v\EOT\DC4\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\ENQ\STX\DC2\EOT\131\v\ETB\SUB\n\
    \7\n\
    \\EOT\ENQ\ACK\STX\ACK\DC2\EOT\134\v\EOT\FS\SUB) User has been locked out by the system.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\ACK\SOH\DC2\EOT\134\v\EOT\NAK\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\ACK\STX\DC2\EOT\134\v\CAN\ESC\n\
    \3\n\
    \\EOT\ENQ\ACK\STX\a\DC2\EOT\137\v\EOT\RS\SUB% User has been locked out by admins.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\a\SOH\DC2\EOT\137\v\EOT\ETB\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\a\STX\DC2\EOT\137\v\SUB\GS\n\
    \\DEL\n\
    \\EOT\ENQ\ACK\STX\b\DC2\EOT\140\v\EOT&\SUBq Second factor authentication is required from this user, but it is not initialised, initialize and repeat logon\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\b\SOH\DC2\EOT\140\v\EOT\US\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\b\STX\DC2\EOT\140\v\"%\n\
    \d\n\
    \\EOT\ENQ\ACK\STX\t\DC2\EOT\143\v\EOT\RS\SUBV Client application version isn't supported, the client application must be upgraded.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\t\SOH\DC2\EOT\143\v\EOT\ETB\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\t\STX\DC2\EOT\143\v\SUB\GS\n\
    \J\n\
    \\EOT\ENQ\ACK\STX\n\
    \\DC2\EOT\146\v\EOT\GS\SUB< There is unsigned/rejected agreement(s) that denies logon.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\n\
    \\SOH\DC2\EOT\146\v\EOT\SYN\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\n\
    \\STX\DC2\EOT\146\v\EM\FS\n\
    \7\n\
    \\EOT\ENQ\ACK\STX\v\DC2\EOT\149\v\EOT\SUB\SUB) User exceeded allowed number of logons.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\v\SOH\DC2\EOT\149\v\EOT\DC3\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\v\STX\DC2\EOT\149\v\SYN\EM\n\
    \@\n\
    \\EOT\ENQ\ACK\STX\f\DC2\EOT\152\v\EOT&\SUB2 Verification of user's phone number is required.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\f\SOH\DC2\EOT\152\v\EOT\US\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\f\STX\DC2\EOT\152\v\"%\n\
    \1\n\
    \\EOT\ENQ\ACK\STX\r\DC2\EOT\155\v\EOT\CAN\SUB# No resources granted to the user.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\r\SOH\DC2\EOT\155\v\EOT\DC1\n\
    \\r\n\
    \\ENQ\ENQ\ACK\STX\r\STX\DC2\EOT\155\v\DC4\ETB\n\
    \-\n\
    \\STX\ENQ\a\DC2\ACK\159\v\NUL\165\v\SOH\SUB\US Represents admin login scope.\n\
    \\n\
    \\v\n\
    \\ETX\ENQ\a\SOH\DC2\EOT\159\v\ENQ\DC4\n\
    \\f\n\
    \\EOT\ENQ\a\STX\NUL\DC2\EOT\161\v\EOT\f\n\
    \\r\n\
    \\ENQ\ENQ\a\STX\NUL\SOH\DC2\EOT\161\v\EOT\a\n\
    \\r\n\
    \\ENQ\ENQ\a\STX\NUL\STX\DC2\EOT\161\v\n\
    \\v\n\
    \\f\n\
    \\EOT\ENQ\a\STX\SOH\DC2\EOT\162\v\EOT\DC2\n\
    \\r\n\
    \\ENQ\ENQ\a\STX\SOH\SOH\DC2\EOT\162\v\EOT\r\n\
    \\r\n\
    \\ENQ\ENQ\a\STX\SOH\STX\DC2\EOT\162\v\DLE\DC1\n\
    \\f\n\
    \\EOT\ENQ\a\STX\STX\DC2\EOT\163\v\EOT\DC2\n\
    \\r\n\
    \\ENQ\ENQ\a\STX\STX\SOH\DC2\EOT\163\v\EOT\r\n\
    \\r\n\
    \\ENQ\ENQ\a\STX\STX\STX\DC2\EOT\163\v\DLE\DC1\n\
    \\f\n\
    \\EOT\ENQ\a\STX\ETX\DC2\EOT\164\v\EOT\SI\n\
    \\r\n\
    \\ENQ\ENQ\a\STX\ETX\SOH\DC2\EOT\164\v\EOT\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\a\STX\ETX\STX\DC2\EOT\164\v\r\SO\n\
    \9\n\
    \\STX\EOT@\DC2\ACK\168\v\NUL\175\v\SOH\SUB+ Represents common message of id and name.\n\
    \\n\
    \\v\n\
    \\ETX\EOT@\SOH\DC2\EOT\168\v\b\DC3\n\
    \\ESC\n\
    \\EOT\EOT@\STX\NUL\DC2\EOT\171\v\EOT\ESC\SUB\r Identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT@\STX\NUL\EOT\DC2\EOT\171\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOT@\STX\NUL\ENQ\DC2\EOT\171\v\r\DC3\n\
    \\r\n\
    \\ENQ\EOT@\STX\NUL\SOH\DC2\EOT\171\v\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT@\STX\NUL\ETX\DC2\EOT\171\v\EM\SUB\n\
    \\NAK\n\
    \\EOT\EOT@\STX\SOH\DC2\EOT\174\v\EOT$\SUB\a Name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT@\STX\SOH\EOT\DC2\EOT\174\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOT@\STX\SOH\ACK\DC2\EOT\174\v\r\SUB\n\
    \\r\n\
    \\ENQ\EOT@\STX\SOH\SOH\DC2\EOT\174\v\ESC\US\n\
    \\r\n\
    \\ENQ\EOT@\STX\SOH\ETX\DC2\EOT\174\v\"#\n\
    \W\n\
    \\STX\EOTA\DC2\ACK\178\v\NUL\185\v\SOH\SUBI Represents template message for adding/removing links between entities.\n\
    \\n\
    \\v\n\
    \\ETX\EOTA\SOH\DC2\EOT\178\v\b\EM\n\
    \G\n\
    \\EOT\EOTA\STX\NUL\DC2\EOT\181\v\EOT$\SUB9 Links to add. Tuple.First, Tuple.Second are [required].\n\
    \\n\
    \\r\n\
    \\ENQ\EOTA\STX\NUL\EOT\DC2\EOT\181\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOTA\STX\NUL\ACK\DC2\EOT\181\v\r\DC2\n\
    \\r\n\
    \\ENQ\EOTA\STX\NUL\SOH\DC2\EOT\181\v\DC3\US\n\
    \\r\n\
    \\ENQ\EOTA\STX\NUL\ETX\DC2\EOT\181\v\"#\n\
    \J\n\
    \\EOT\EOTA\STX\SOH\DC2\EOT\184\v\EOT'\SUB< Links to remove. Tuple.First, Tuple.Second are [required].\n\
    \\n\
    \\r\n\
    \\ENQ\EOTA\STX\SOH\EOT\DC2\EOT\184\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOTA\STX\SOH\ACK\DC2\EOT\184\v\r\DC2\n\
    \\r\n\
    \\ENQ\EOTA\STX\SOH\SOH\DC2\EOT\184\v\DC3\"\n\
    \\r\n\
    \\ENQ\EOTA\STX\SOH\ETX\DC2\EOT\184\v%&\n\
    \w\n\
    \\STX\EOTB\DC2\ACK\188\v\NUL\191\v\SOH\SUB* Result of update entity links operation.\n\
    \\"= If message is received then links was updated successfully.\n\
    \\n\
    \\v\n\
    \\ETX\EOTB\SOH\DC2\EOT\188\v\b\US\n\
    \\222\SOH\n\
    \\STX\EOTC\DC2\ACK\196\v\NUL\203\v\SOH\SUB\207\SOH Represents template message for requesting linked entities for some entity.\n\
    \ By default result contains at most DEFAULT_RESULT_RECORDS_NUMBER records.\n\
    \ Set parameter top to a larger number to receive more.\n\
    \\n\
    \\v\n\
    \\ETX\EOTC\SOH\DC2\EOT\196\v\b\US\n\
    \\"\n\
    \\EOT\EOTC\STX\NUL\DC2\EOT\199\v\EOT\ESC\SUB\DC4 Entity identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\NUL\EOT\DC2\EOT\199\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOTC\STX\NUL\ENQ\DC2\EOT\199\v\r\DC3\n\
    \\r\n\
    \\ENQ\EOTC\STX\NUL\SOH\DC2\EOT\199\v\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOTC\STX\NUL\ETX\DC2\EOT\199\v\EM\SUB\n\
    \Q\n\
    \\EOT\EOTC\STX\SOH\DC2\EOT\202\v\EOT\FS\SUBC optionally restrict results by returning the first 'top' records.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\SOH\EOT\DC2\EOT\202\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOTC\STX\SOH\ENQ\DC2\EOT\202\v\r\DC3\n\
    \\r\n\
    \\ENQ\EOTC\STX\SOH\SOH\DC2\EOT\202\v\DC4\ETB\n\
    \\r\n\
    \\ENQ\EOTC\STX\SOH\ETX\DC2\EOT\202\v\SUB\ESC\n\
    \<\n\
    \\STX\EOTD\DC2\ACK\206\v\NUL\213\v\SOH\SUB. Result of linked entities request operation.\n\
    \\n\
    \\v\n\
    \\ETX\EOTD\SOH\DC2\EOT\206\v\b\RS\n\
    \\f\n\
    \\EOT\EOTD\STX\NUL\DC2\EOT\208\v\EOT&\n\
    \\r\n\
    \\ENQ\EOTD\STX\NUL\EOT\DC2\EOT\208\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOTD\STX\NUL\ACK\DC2\EOT\208\v\r\CAN\n\
    \\r\n\
    \\ENQ\EOTD\STX\NUL\SOH\DC2\EOT\208\v\EM!\n\
    \\r\n\
    \\ENQ\EOTD\STX\NUL\ETX\DC2\EOT\208\v$%\n\
    \r\n\
    \\EOT\EOTD\STX\SOH\DC2\EOT\212\v\EOT3\SUBd This flag is set to true if all results are sent\n\
    \ and nothing was filtered out by 'top' parameter.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\EOT\DC2\EOT\212\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\ENQ\DC2\EOT\212\v\r\DC1\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\SOH\DC2\EOT\212\v\DC2\GS\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\ETX\DC2\EOT\212\v !\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\b\DC2\EOT\212\v\"2\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\a\DC2\EOT\212\v-1\n\
    \<\n\
    \\STX\EOTE\DC2\ACK\216\v\NUL\223\v\SOH\SUB. Common message for sales series list result.\n\
    \\n\
    \\v\n\
    \\ETX\EOTE\SOH\DC2\EOT\216\v\b\GS\n\
    \\f\n\
    \\EOT\EOTE\STX\NUL\DC2\EOT\218\v\EOT.\n\
    \\r\n\
    \\ENQ\EOTE\STX\NUL\EOT\DC2\EOT\218\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOTE\STX\NUL\ACK\DC2\EOT\218\v\r\FS\n\
    \\r\n\
    \\ENQ\EOTE\STX\NUL\SOH\DC2\EOT\218\v\GS)\n\
    \\r\n\
    \\ENQ\EOTE\STX\NUL\ETX\DC2\EOT\218\v,-\n\
    \r\n\
    \\EOT\EOTE\STX\SOH\DC2\EOT\222\v\EOT3\SUBd This flag is set to true if all results are sent\n\
    \ and nothing was filtered out by 'top' parameter.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\EOT\DC2\EOT\222\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\ENQ\DC2\EOT\222\v\r\DC1\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\SOH\DC2\EOT\222\v\DC2\GS\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\ETX\DC2\EOT\222\v !\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\b\DC2\EOT\222\v\"2\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\a\DC2\EOT\222\v-1\n\
    \(\n\
    \\STX\EOTF\DC2\ACK\226\v\NUL\239\v\SOH\SUB\SUB Represents sales series.\n\
    \\n\
    \\v\n\
    \\ETX\EOTF\SOH\DC2\EOT\226\v\b\ETB\n\
    \ \n\
    \\EOT\EOTF\STX\NUL\DC2\EOT\229\v\EOT\ESC\SUB\DC2 Sales series ID.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\NUL\EOT\DC2\EOT\229\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOTF\STX\NUL\ENQ\DC2\EOT\229\v\r\DC3\n\
    \\r\n\
    \\ENQ\EOTF\STX\NUL\SOH\DC2\EOT\229\v\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOTF\STX\NUL\ETX\DC2\EOT\229\v\EM\SUB\n\
    \\"\n\
    \\EOT\EOTF\STX\SOH\DC2\EOT\232\v\EOT*\SUB\DC4 Sales series name.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\SOH\EOT\DC2\EOT\232\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOTF\STX\SOH\ENQ\DC2\EOT\232\v\r\DC3\n\
    \\r\n\
    \\ENQ\EOTF\STX\SOH\SOH\DC2\EOT\232\v\DC4%\n\
    \\r\n\
    \\ENQ\EOTF\STX\SOH\ETX\DC2\EOT\232\v()\n\
    \$\n\
    \\EOT\EOTF\STX\STX\DC2\EOT\235\v\EOT,\SUB\SYN Sales series number.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\EOT\DC2\EOT\235\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\ENQ\DC2\EOT\235\v\r\DC3\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\SOH\DC2\EOT\235\v\DC4'\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\ETX\DC2\EOT\235\v*+\n\
    \(\n\
    \\EOT\EOTF\STX\ETX\DC2\EOT\238\v\EOT#\SUB\SUB Sales series profile id.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\ETX\EOT\DC2\EOT\238\v\EOT\f\n\
    \\r\n\
    \\ENQ\EOTF\STX\ETX\ENQ\DC2\EOT\238\v\r\DC3\n\
    \\r\n\
    \\ENQ\EOTF\STX\ETX\SOH\DC2\EOT\238\v\DC4\RS\n\
    \\r\n\
    \\ENQ\EOTF\STX\ETX\ETX\DC2\EOT\238\v!\"\n\
    \.\n\
    \\STX\ENQ\b\DC2\ACK\242\v\NUL\133\f\SOH\SUB  Authentication activity types.\n\
    \\n\
    \\v\n\
    \\ETX\ENQ\b\SOH\DC2\EOT\242\v\ENQ\NAK\n\
    \\SYN\n\
    \\EOT\ENQ\b\STX\NUL\DC2\EOT\245\v\EOT\SO\SUB\b Login.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\b\STX\NUL\SOH\DC2\EOT\245\v\EOT\t\n\
    \\r\n\
    \\ENQ\ENQ\b\STX\NUL\STX\DC2\EOT\245\v\f\r\n\
    \ \n\
    \\EOT\ENQ\b\STX\SOH\DC2\EOT\248\v\EOT\CAN\SUB\DC2 Password change.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\b\STX\SOH\SOH\DC2\EOT\248\v\EOT\DC3\n\
    \\r\n\
    \\ENQ\ENQ\b\STX\SOH\STX\DC2\EOT\248\v\SYN\ETB\n\
    \*\n\
    \\EOT\ENQ\b\STX\STX\DC2\EOT\251\v\EOT\SYN\SUB\FS Clear lockout (from CAST).\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\b\STX\STX\SOH\DC2\EOT\251\v\EOT\DC1\n\
    \\r\n\
    \\ENQ\ENQ\b\STX\STX\STX\DC2\EOT\251\v\DC4\NAK\n\
    \\SUB\n\
    \\EOT\ENQ\b\STX\ETX\DC2\EOT\254\v\EOT\DC3\SUB\f Change 2FA\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\b\STX\ETX\SOH\DC2\EOT\254\v\EOT\SO\n\
    \\r\n\
    \\ENQ\ENQ\b\STX\ETX\STX\DC2\EOT\254\v\DC1\DC2\n\
    \\EM\n\
    \\EOT\ENQ\b\STX\EOT\DC2\EOT\129\f\EOT\DC2\SUB\v Erase 2FA\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\b\STX\EOT\SOH\DC2\EOT\129\f\EOT\r\n\
    \\r\n\
    \\ENQ\ENQ\b\STX\EOT\STX\DC2\EOT\129\f\DLE\DC1\n\
    \\RS\n\
    \\EOT\ENQ\b\STX\ENQ\DC2\EOT\132\f\EOT\ETB\SUB\DLE Erase password\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\b\STX\ENQ\SOH\DC2\EOT\132\f\EOT\DC2\n\
    \\r\n\
    \\ENQ\ENQ\b\STX\ENQ\STX\DC2\EOT\132\f\NAK\SYN\n\
    \6\n\
    \\STX\EOTG\DC2\ACK\136\f\NUL\144\f\SOH\SUB( Parameters of external authentication.\n\
    \\n\
    \\v\n\
    \\ETX\EOTG\SOH\DC2\EOT\136\f\b\DC4\n\
    \I\n\
    \\EOT\EOTG\STX\NUL\DC2\EOT\139\f\EOT#\SUB; [required] ID of external authentication partner, if any.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTG\STX\NUL\EOT\DC2\EOT\139\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTG\STX\NUL\ENQ\DC2\EOT\139\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTG\STX\NUL\SOH\DC2\EOT\139\f\DC4\RS\n\
    \\r\n\
    \\ENQ\EOTG\STX\NUL\ETX\DC2\EOT\139\f!\"\n\
    \~\n\
    \\EOT\EOTG\STX\SOH\DC2\EOT\143\f\EOT!\SUBp [required] Username as registered by authentication partner, if any (max length = 255).\n\
    \ UTF8 encoding string.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTG\STX\SOH\EOT\DC2\EOT\143\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTG\STX\SOH\ENQ\DC2\EOT\143\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTG\STX\SOH\SOH\DC2\EOT\143\f\DC4\FS\n\
    \\r\n\
    \\ENQ\EOTG\STX\SOH\ETX\DC2\EOT\143\f\US \n\
    \=\n\
    \\STX\EOTH\DC2\ACK\147\f\NUL\154\f\SOH\SUB/ Request for update login billing custom data.\n\
    \\n\
    \\v\n\
    \\ETX\EOTH\SOH\DC2\EOT\147\f\b$\n\
    \,\n\
    \\EOT\EOTH\STX\NUL\DC2\EOT\150\f\EOT!\SUB\RS [required] Login identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTH\STX\NUL\EOT\DC2\EOT\150\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTH\STX\NUL\ENQ\DC2\EOT\150\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTH\STX\NUL\SOH\DC2\EOT\150\f\DC4\FS\n\
    \\r\n\
    \\ENQ\EOTH\STX\NUL\ETX\DC2\EOT\150\f\US \n\
    \5\n\
    \\EOT\EOTH\STX\SOH\DC2\EOT\153\f\EOTB\SUB' [required] Login billing custom data.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTH\STX\SOH\EOT\DC2\EOT\153\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTH\STX\SOH\ACK\DC2\EOT\153\f\r#\n\
    \\r\n\
    \\ENQ\EOTH\STX\SOH\SOH\DC2\EOT\153\f$=\n\
    \\r\n\
    \\ENQ\EOTH\STX\SOH\ETX\DC2\EOT\153\f@A\n\
    \7\n\
    \\STX\EOTI\DC2\ACK\157\f\NUL\159\f\SOH\SUB) Result of UpdateLoginBillingCustomData.\n\
    \\n\
    \\v\n\
    \\ETX\EOTI\SOH\DC2\EOT\157\f\b*\n\
    \\f\n\
    \\STX\EOTJ\DC2\ACK\161\f\NUL\169\f\SOH\n\
    \\v\n\
    \\ETX\EOTJ\SOH\DC2\EOT\161\f\b\RS\n\
    \5\n\
    \\EOT\EOTJ\STX\NUL\DC2\EOT\164\f\EOT#\SUB' [required-update] Account identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTJ\STX\NUL\EOT\DC2\EOT\164\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTJ\STX\NUL\ENQ\DC2\EOT\164\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTJ\STX\NUL\SOH\DC2\EOT\164\f\DC4\RS\n\
    \\r\n\
    \\ENQ\EOTJ\STX\NUL\ETX\DC2\EOT\164\f!\"\n\
    \L\n\
    \\EOT\EOTJ\STX\SOH\DC2\EOT\168\f\EOT,\SUB> Billing custom data.\n\
    \ Maximum count is 3 (max length = 256).\n\
    \\n\
    \\r\n\
    \\ENQ\EOTJ\STX\SOH\EOT\DC2\EOT\168\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTJ\STX\SOH\ENQ\DC2\EOT\168\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTJ\STX\SOH\SOH\DC2\EOT\168\f\DC4'\n\
    \\r\n\
    \\ENQ\EOTJ\STX\SOH\ETX\DC2\EOT\168\f*+\n\
    \5\n\
    \\STX\EOTK\DC2\ACK\172\f\NUL\176\f\SOH\SUB' Request of login billing custom data.\n\
    \\n\
    \\v\n\
    \\ETX\EOTK\SOH\DC2\EOT\172\f\b%\n\
    \,\n\
    \\EOT\EOTK\STX\NUL\DC2\EOT\175\f\EOT!\SUB\RS [required] Login identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTK\STX\NUL\EOT\DC2\EOT\175\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTK\STX\NUL\ENQ\DC2\EOT\175\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTK\STX\NUL\SOH\DC2\EOT\175\f\DC4\FS\n\
    \\r\n\
    \\ENQ\EOTK\STX\NUL\ETX\DC2\EOT\175\f\US \n\
    \8\n\
    \\STX\EOTL\DC2\ACK\179\f\NUL\183\f\SOH\SUB* Result of LoginBillingCustomDataRequest.\n\
    \\n\
    \\v\n\
    \\ETX\EOTL\SOH\DC2\EOT\179\f\b$\n\
    \*\n\
    \\EOT\EOTL\STX\NUL\DC2\EOT\182\f\EOTB\SUB\FS Login billing custom data.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTL\STX\NUL\EOT\DC2\EOT\182\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTL\STX\NUL\ACK\DC2\EOT\182\f\r#\n\
    \\r\n\
    \\ENQ\EOTL\STX\NUL\SOH\DC2\EOT\182\f$=\n\
    \\r\n\
    \\ENQ\EOTL\STX\NUL\ETX\DC2\EOT\182\f@A\n\
    \\f\n\
    \\STX\EOTM\DC2\ACK\185\f\NUL\187\f\SOH\n\
    \\v\n\
    \\ETX\EOTM\SOH\DC2\EOT\185\f\b\RS\n\
    \\f\n\
    \\STX\EOTN\DC2\ACK\189\f\NUL\192\f\SOH\n\
    \\v\n\
    \\ETX\EOTN\SOH\DC2\EOT\189\f\b\GS\n\
    \\f\n\
    \\EOT\EOTN\STX\NUL\DC2\EOT\191\f\EOTD\n\
    \\r\n\
    \\ENQ\EOTN\STX\NUL\EOT\DC2\EOT\191\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTN\STX\NUL\ACK\DC2\EOT\191\f\r$\n\
    \\r\n\
    \\ENQ\EOTN\STX\NUL\SOH\DC2\EOT\191\f%?\n\
    \\r\n\
    \\ENQ\EOTN\STX\NUL\ETX\DC2\EOT\191\fBC\n\
    \\f\n\
    \\STX\EOTO\DC2\ACK\194\f\NUL\205\f\SOH\n\
    \\v\n\
    \\ETX\EOTO\SOH\DC2\EOT\194\f\b\US\n\
    \4\n\
    \\EOT\EOTO\STX\NUL\DC2\EOT\197\f\EOT\ESC\SUB& ID of the trading interface element.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\NUL\EOT\DC2\EOT\197\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTO\STX\NUL\ENQ\DC2\EOT\197\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTO\STX\NUL\SOH\DC2\EOT\197\f\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOTO\STX\NUL\ETX\DC2\EOT\197\f\EM\SUB\n\
    \2\n\
    \\EOT\EOTO\STX\SOH\DC2\EOT\200\f\EOT$\SUB$ Name of trading interface element.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\SOH\EOT\DC2\EOT\200\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTO\STX\SOH\ACK\DC2\EOT\200\f\r\SUB\n\
    \\r\n\
    \\ENQ\EOTO\STX\SOH\SOH\DC2\EOT\200\f\ESC\US\n\
    \\r\n\
    \\ENQ\EOTO\STX\SOH\ETX\DC2\EOT\200\f\"#\n\
    \f\n\
    \\EOT\EOTO\STX\STX\DC2\EOT\204\f\EOT#\SUBX Indicates if trading interface is not allowed to be enabled\n\
    \ and can be only disabled.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\STX\EOT\DC2\EOT\204\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTO\STX\STX\ENQ\DC2\EOT\204\f\r\DC1\n\
    \\r\n\
    \\ENQ\EOTO\STX\STX\SOH\DC2\EOT\204\f\DC2\RS\n\
    \\r\n\
    \\ENQ\EOTO\STX\STX\ETX\DC2\EOT\204\f!\"\n\
    \$\n\
    \\STX\EOTP\DC2\ACK\208\f\NUL\141\r\SOH\SUB\SYN Profile information.\n\
    \\n\
    \\v\n\
    \\ETX\EOTP\SOH\DC2\EOT\208\f\b\SI\n\
    \C\n\
    \\EOT\EOTP\STX\NUL\DC2\EOT\211\f\EOT'\SUB5 List of field ids to clear during update operation.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\NUL\EOT\DC2\EOT\211\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\NUL\ENQ\DC2\EOT\211\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTP\STX\NUL\SOH\DC2\EOT\211\f\DC4\"\n\
    \\r\n\
    \\ENQ\EOTP\STX\NUL\ETX\DC2\EOT\211\f%&\n\
    \\161\SOH\n\
    \\EOT\EOTP\STX\SOH\DC2\EOT\216\f\EOT$\SUB\146\SOH [immutable] Associated customer.\n\
    \ [required-update] for customer and admin profile type and profile_id is not provided.\n\
    \ Use profile_id instead.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\SOH\EOT\DC2\EOT\216\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\SOH\ENQ\DC2\EOT\216\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTP\STX\SOH\SOH\DC2\EOT\216\f\DC4\US\n\
    \\r\n\
    \\ENQ\EOTP\STX\SOH\ETX\DC2\EOT\216\f\"#\n\
    \\212\SOH\n\
    \\EOT\EOTP\STX\STX\DC2\EOT\222\f\EOT#\SUB\197\SOH [required-create] Profile legal type.\n\
    \ Profile of admin profile type can be only Individual.\n\
    \ This field is associated with common_1.LegalType enum type.\n\
    \ Supported profile type: customer, admin.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\STX\EOT\DC2\EOT\222\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\STX\ENQ\DC2\EOT\222\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTP\STX\STX\SOH\DC2\EOT\222\f\DC4\RS\n\
    \\r\n\
    \\ENQ\EOTP\STX\STX\ETX\DC2\EOT\222\f!\"\n\
    \\158\SOH\n\
    \\EOT\EOTP\STX\ETX\DC2\EOT\227\f\EOT\GS\SUB\143\SOH Profile name (max length = 32).\n\
    \ [required-create] for customer/admin and non-Individual legal types.\n\
    \ [immutable] for Individual legal type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\ETX\EOT\DC2\EOT\227\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\ETX\ENQ\DC2\EOT\227\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTP\STX\ETX\SOH\DC2\EOT\227\f\DC4\CAN\n\
    \\r\n\
    \\ENQ\EOTP\STX\ETX\ETX\DC2\EOT\227\f\ESC\FS\n\
    \,\n\
    \\EOT\EOTP\STX\EOT\DC2\EOT\230\f\EOT8\SUB\RS Profile contact information.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\EOT\EOT\DC2\EOT\230\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\EOT\ACK\DC2\EOT\230\f\r\US\n\
    \\r\n\
    \\ENQ\EOTP\STX\EOT\SOH\DC2\EOT\230\f 3\n\
    \\r\n\
    \\ENQ\EOTP\STX\EOT\ETX\DC2\EOT\230\f67\n\
    \\159\STX\n\
    \\EOT\EOTP\STX\ENQ\DC2\EOT\237\f\EOT.\SUB\144\STX Profile Brokerage IDs.\n\
    \ In curent version of protocol only one brokerage's profile link is supported.\n\
    \ In futher version it will be changed to support multiple links.\n\
    \ [erasable] only for admin profile type.\n\
    \ [required-create] for customer and sales series profile type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\ENQ\EOT\DC2\EOT\237\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\ENQ\ENQ\DC2\EOT\237\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTP\STX\ENQ\SOH\DC2\EOT\237\f\DC4)\n\
    \\r\n\
    \\ENQ\EOTP\STX\ENQ\ETX\DC2\EOT\237\f,-\n\
    \)\n\
    \\EOT\EOTP\STX\ACK\DC2\EOT\240\f\EOT\RS\SUB\ESC [immutable] Removed flag.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\ACK\EOT\DC2\EOT\240\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\ACK\ENQ\DC2\EOT\240\f\r\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\ACK\SOH\DC2\EOT\240\f\DC2\EM\n\
    \\r\n\
    \\ENQ\EOTP\STX\ACK\ETX\DC2\EOT\240\f\FS\GS\n\
    \\252\SOH\n\
    \\EOT\EOTP\STX\a\DC2\EOT\245\f\EOTK\SUB\237\SOH [obsolete] Authentication system of login (LoginSettings.authentication_system field) must be used instead.\n\
    \ Profile's authentication system.\n\
    \ LookupPropertyListRequest { property_type = CommonLookupPropertyType.AUTHENTICATION_SYSTEM }\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\a\EOT\DC2\EOT\245\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\a\ENQ\DC2\EOT\245\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTP\STX\a\SOH\DC2\EOT\245\f\DC42\n\
    \\r\n\
    \\ENQ\EOTP\STX\a\ETX\DC2\EOT\245\f56\n\
    \\r\n\
    \\ENQ\EOTP\STX\a\b\DC2\EOT\245\f7J\n\
    \\SO\n\
    \\ACK\EOTP\STX\a\b\ETX\DC2\EOT\245\f8I\n\
    \\162\SOH\n\
    \\EOT\EOTP\STX\b\DC2\EOT\250\f\EOT3\SUB\147\SOH Profile type - represents main type of profile.\n\
    \ This field is associated with ProfileType enum type.\n\
    \ [immutable] for sales series profile type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\b\EOT\DC2\EOT\250\f\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\b\ENQ\DC2\EOT\250\f\r\DC3\n\
    \\r\n\
    \\ENQ\EOTP\STX\b\SOH\DC2\EOT\250\f\DC4 \n\
    \\r\n\
    \\ENQ\EOTP\STX\b\ETX\DC2\EOT\250\f#$\n\
    \\r\n\
    \\ENQ\EOTP\STX\b\b\DC2\EOT\250\f%2\n\
    \\r\n\
    \\ENQ\EOTP\STX\b\a\DC2\EOT\250\f01\n\
    \\204\SOH\n\
    \\EOT\EOTP\STX\t\DC2\EOT\129\r\EOT$\SUB\156\SOH [required-update] Profile identifier.\n\
    \ For backward compatibility if customer_id is given, it isn't required during update.\n\
    \ Has priority over customer_id\n\
    \2\US 9 is used for cleared_fields.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\t\EOT\DC2\EOT\129\r\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\t\ENQ\DC2\EOT\129\r\r\DC3\n\
    \\r\n\
    \\ENQ\EOTP\STX\t\SOH\DC2\EOT\129\r\DC4\RS\n\
    \\r\n\
    \\ENQ\EOTP\STX\t\ETX\DC2\EOT\129\r!#\n\
    \7\n\
    \\EOT\EOTP\STX\n\
    \\DC2\EOT\132\r\EOT)\SUB) [immutable] Associated sales series id.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\n\
    \\EOT\DC2\EOT\132\r\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\n\
    \\ENQ\DC2\EOT\132\r\r\DC3\n\
    \\r\n\
    \\ENQ\EOTP\STX\n\
    \\SOH\DC2\EOT\132\r\DC4#\n\
    \\r\n\
    \\ENQ\EOTP\STX\n\
    \\ETX\DC2\EOT\132\r&(\n\
    \b\n\
    \\EOT\EOTP\STX\v\DC2\EOT\136\r\EOT \SUBT Unique number (max length = 16).\n\
    \ [required-create] for sales series profile type.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\v\EOT\DC2\EOT\136\r\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\v\ENQ\DC2\EOT\136\r\r\DC3\n\
    \\r\n\
    \\ENQ\EOTP\STX\v\SOH\DC2\EOT\136\r\DC4\SUB\n\
    \\r\n\
    \\ENQ\EOTP\STX\v\ETX\DC2\EOT\136\r\GS\US\n\
    \\147\SOH\n\
    \\EOT\EOTP\STX\f\DC2\EOT\140\r\EOT\"\SUB\132\SOH Determines, whether profile is simplified, used for cases of auto-generation.\n\
    \ Only name is required in this case during creation.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\f\EOT\DC2\EOT\140\r\EOT\f\n\
    \\r\n\
    \\ENQ\EOTP\STX\f\ENQ\DC2\EOT\140\r\r\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\f\SOH\DC2\EOT\140\r\DC2\FS\n\
    \\r\n\
    \\ENQ\EOTP\STX\f\ETX\DC2\EOT\140\r\US!\n\
    \+\n\
    \\STX\EOTQ\DC2\ACK\144\r\NUL\157\r\SOH\SUB\GS Password policy descriptor.\n\
    \\n\
    \\v\n\
    \\ETX\EOTQ\SOH\DC2\EOT\144\r\b\SYN\n\
    \\"\n\
    \\EOT\EOTQ\STX\NUL\DC2\EOT\147\r\EOT\SUB\SUB\DC4 Policy identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTQ\STX\NUL\EOT\DC2\EOT\147\r\EOT\f\n\
    \\r\n\
    \\ENQ\EOTQ\STX\NUL\ENQ\DC2\EOT\147\r\r\DC2\n\
    \\r\n\
    \\ENQ\EOTQ\STX\NUL\SOH\DC2\EOT\147\r\DC3\NAK\n\
    \\r\n\
    \\ENQ\EOTQ\STX\NUL\ETX\DC2\EOT\147\r\CAN\EM\n\
    \\GS\n\
    \\EOT\EOTQ\STX\SOH\DC2\EOT\150\r\EOT%\SUB\SI Policy title.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTQ\STX\SOH\EOT\DC2\EOT\150\r\EOT\f\n\
    \\r\n\
    \\ENQ\EOTQ\STX\SOH\ACK\DC2\EOT\150\r\r\SUB\n\
    \\r\n\
    \\ENQ\EOTQ\STX\SOH\SOH\DC2\EOT\150\r\ESC \n\
    \\r\n\
    \\ENQ\EOTQ\STX\SOH\ETX\DC2\EOT\150\r#$\n\
    \4\n\
    \\EOT\EOTQ\STX\STX\DC2\EOT\153\r\EOT%\SUB& Policy parameter label if it exists.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTQ\STX\STX\EOT\DC2\EOT\153\r\EOT\f\n\
    \\r\n\
    \\ENQ\EOTQ\STX\STX\ACK\DC2\EOT\153\r\r\SUB\n\
    \\r\n\
    \\ENQ\EOTQ\STX\STX\SOH\DC2\EOT\153\r\ESC \n\
    \\r\n\
    \\ENQ\EOTQ\STX\STX\ETX\DC2\EOT\153\r#$\n\
    \'\n\
    \\EOT\EOTQ\STX\ETX\DC2\EOT\156\r\EOT\GS\SUB\EM Policy parameter value.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTQ\STX\ETX\EOT\DC2\EOT\156\r\EOT\f\n\
    \\r\n\
    \\ENQ\EOTQ\STX\ETX\ENQ\DC2\EOT\156\r\r\DC2\n\
    \\r\n\
    \\ENQ\EOTQ\STX\ETX\SOH\DC2\EOT\156\r\DC3\CAN\n\
    \\r\n\
    \\ENQ\EOTQ\STX\ETX\ETX\DC2\EOT\156\r\ESC\FS\n\
    \1\n\
    \\STX\EOTR\DC2\ACK\160\r\NUL\162\r\SOH\SUB# Generic message to retrieve data.\n\
    \\n\
    \\v\n\
    \\ETX\EOTR\SOH\DC2\EOT\160\r\b\DC3\n\
    \M\n\
    \\STX\EOTS\DC2\ACK\165\r\NUL\169\r\SOH\SUB? Generic message to retrieve data associated with some entity.\n\
    \\n\
    \\v\n\
    \\ETX\EOTS\SOH\DC2\EOT\165\r\b\EM\n\
    \-\n\
    \\EOT\EOTS\STX\NUL\DC2\EOT\168\r\EOT\"\SUB\US [required] Entity identifier.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\NUL\EOT\DC2\EOT\168\r\EOT\f\n\
    \\r\n\
    \\ENQ\EOTS\STX\NUL\ENQ\DC2\EOT\168\r\r\DC3\n\
    \\r\n\
    \\ENQ\EOTS\STX\NUL\SOH\DC2\EOT\168\r\DC4\GS\n\
    \\r\n\
    \\ENQ\EOTS\STX\NUL\ETX\DC2\EOT\168\r !\n\
    \\f\n\
    \\STX\EOTT\DC2\ACK\171\r\NUL\175\r\SOH\n\
    \\v\n\
    \\ETX\EOTT\SOH\DC2\EOT\171\r\b\ESC\n\
    \0\n\
    \\EOT\EOTT\STX\NUL\DC2\EOT\174\r\EOT\"\SUB\" [required] Entities identifiers.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTT\STX\NUL\EOT\DC2\EOT\174\r\EOT\f\n\
    \\r\n\
    \\ENQ\EOTT\STX\NUL\ENQ\DC2\EOT\174\r\r\DC3\n\
    \\r\n\
    \\ENQ\EOTT\STX\NUL\SOH\DC2\EOT\174\r\DC4\GS\n\
    \\r\n\
    \\ENQ\EOTT\STX\NUL\ETX\DC2\EOT\174\r !\n\
    \5\n\
    \\STX\ENQ\t\DC2\ACK\178\r\NUL\197\r\SOH\SUB' List of possible profile legal types.\n\
    \\n\
    \\v\n\
    \\ETX\ENQ\t\SOH\DC2\EOT\178\r\ENQ\SO\n\
    \\ESC\n\
    \\EOT\ENQ\t\STX\NUL\DC2\EOT\181\r\EOT\DC3\SUB\r Individual.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\t\STX\NUL\SOH\DC2\EOT\181\r\EOT\SO\n\
    \\r\n\
    \\ENQ\ENQ\t\STX\NUL\STX\DC2\EOT\181\r\DC1\DC2\n\
    \$\n\
    \\EOT\ENQ\t\STX\SOH\DC2\EOT\184\r\EOT\SO\SUB\SYN Joint-stock company.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\t\STX\SOH\SOH\DC2\EOT\184\r\EOT\t\n\
    \\r\n\
    \\ENQ\ENQ\t\STX\SOH\STX\DC2\EOT\184\r\f\r\n\
    \$\n\
    \\EOT\ENQ\t\STX\STX\DC2\EOT\187\r\EOT\DLE\SUB\SYN Limited partnership.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\t\STX\STX\SOH\DC2\EOT\187\r\EOT\v\n\
    \\r\n\
    \\ENQ\ENQ\t\STX\STX\STX\DC2\EOT\187\r\SO\SI\n\
    \\RS\n\
    \\EOT\ENQ\t\STX\ETX\DC2\EOT\190\r\EOT\SO\SUB\DLE Trust company.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\t\STX\ETX\SOH\DC2\EOT\190\r\EOT\t\n\
    \\r\n\
    \\ENQ\ENQ\t\STX\ETX\STX\DC2\EOT\190\r\f\r\n\
    \ \n\
    \\EOT\ENQ\t\STX\EOT\DC2\EOT\193\r\EOT\DC2\SUB\DC2 Corporate group.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\t\STX\EOT\SOH\DC2\EOT\193\r\EOT\r\n\
    \\r\n\
    \\ENQ\ENQ\t\STX\EOT\STX\DC2\EOT\193\r\DLE\DC1\n\
    \$\n\
    \\EOT\ENQ\t\STX\ENQ\DC2\EOT\196\r\EOT\DC4\SUB\SYN General partnership.\n\
    \\n\
    \\r\n\
    \\ENQ\ENQ\t\STX\ENQ\SOH\DC2\EOT\196\r\EOT\SI\n\
    \\r\n\
    \\ENQ\ENQ\t\STX\ENQ\STX\DC2\EOT\196\r\DC2\DC3\n\
    \\f\n\
    \\STX\ENQ\n\
    \\DC2\ACK\199\r\NUL\206\r\SOH\n\
    \\v\n\
    \\ETX\ENQ\n\
    \\SOH\DC2\EOT\199\r\ENQ\DLE\n\
    \\f\n\
    \\EOT\ENQ\n\
    \\STX\NUL\DC2\EOT\201\r\EOT\RS\n\
    \\r\n\
    \\ENQ\ENQ\n\
    \\STX\NUL\SOH\DC2\EOT\201\r\EOT\EM\n\
    \\r\n\
    \\ENQ\ENQ\n\
    \\STX\NUL\STX\DC2\EOT\201\r\FS\GS\n\
    \\f\n\
    \\EOT\ENQ\n\
    \\STX\SOH\DC2\EOT\202\r\EOT\ESC\n\
    \\r\n\
    \\ENQ\ENQ\n\
    \\STX\SOH\SOH\DC2\EOT\202\r\EOT\SYN\n\
    \\r\n\
    \\ENQ\ENQ\n\
    \\STX\SOH\STX\DC2\EOT\202\r\EM\SUB\n\
    \\f\n\
    \\EOT\ENQ\n\
    \\STX\STX\DC2\EOT\203\r\EOT\US\n\
    \\r\n\
    \\ENQ\ENQ\n\
    \\STX\STX\SOH\DC2\EOT\203\r\EOT\SUB\n\
    \\r\n\
    \\ENQ\ENQ\n\
    \\STX\STX\STX\DC2\EOT\203\r\GS\RS\n\
    \\f\n\
    \\EOT\ENQ\n\
    \\STX\ETX\DC2\EOT\204\r\EOT \n\
    \\r\n\
    \\ENQ\ENQ\n\
    \\STX\ETX\SOH\DC2\EOT\204\r\EOT\ESC\n\
    \\r\n\
    \\ENQ\ENQ\n\
    \\STX\ETX\STX\DC2\EOT\204\r\RS\US\n\
    \\f\n\
    \\EOT\ENQ\n\
    \\STX\EOT\DC2\EOT\205\r\EOT\"\n\
    \\r\n\
    \\ENQ\ENQ\n\
    \\STX\EOT\SOH\DC2\EOT\205\r\EOT\GS\n\
    \\r\n\
    \\ENQ\ENQ\n\
    \\STX\EOT\STX\DC2\EOT\205\r !\n\
    \\f\n\
    \\STX\ENQ\v\DC2\ACK\208\r\NUL\221\r\SOH\n\
    \\v\n\
    \\ETX\ENQ\v\SOH\DC2\EOT\208\r\ENQ\ETB\n\
    \\f\n\
    \\EOT\ENQ\v\STX\NUL\DC2\EOT\210\r\EOT%\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\NUL\SOH\DC2\EOT\210\r\EOT \n\
    \\r\n\
    \\ENQ\ENQ\v\STX\NUL\STX\DC2\EOT\210\r#$\n\
    \\f\n\
    \\EOT\ENQ\v\STX\SOH\DC2\EOT\211\r\EOT#\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\SOH\SOH\DC2\EOT\211\r\EOT\RS\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\SOH\STX\DC2\EOT\211\r!\"\n\
    \\f\n\
    \\EOT\ENQ\v\STX\STX\DC2\EOT\212\r\EOT$\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\STX\SOH\DC2\EOT\212\r\EOT\US\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\STX\STX\DC2\EOT\212\r\"#\n\
    \\f\n\
    \\EOT\ENQ\v\STX\ETX\DC2\EOT\213\r\EOT&\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\ETX\SOH\DC2\EOT\213\r\EOT!\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\ETX\STX\DC2\EOT\213\r$%\n\
    \\f\n\
    \\EOT\ENQ\v\STX\EOT\DC2\EOT\214\r\EOT$\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\EOT\SOH\DC2\EOT\214\r\EOT\US\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\EOT\STX\DC2\EOT\214\r\"#\n\
    \\f\n\
    \\EOT\ENQ\v\STX\ENQ\DC2\EOT\215\r\EOT'\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\ENQ\SOH\DC2\EOT\215\r\EOT\"\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\ENQ\STX\DC2\EOT\215\r%&\n\
    \\f\n\
    \\EOT\ENQ\v\STX\ACK\DC2\EOT\216\r\EOT*\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\ACK\SOH\DC2\EOT\216\r\EOT%\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\ACK\STX\DC2\EOT\216\r()\n\
    \\f\n\
    \\EOT\ENQ\v\STX\a\DC2\EOT\217\r\EOT!\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\a\SOH\DC2\EOT\217\r\EOT\FS\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\a\STX\DC2\EOT\217\r\US \n\
    \\f\n\
    \\EOT\ENQ\v\STX\b\DC2\EOT\218\r\EOT)\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\b\SOH\DC2\EOT\218\r\EOT$\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\b\STX\DC2\EOT\218\r'(\n\
    \\f\n\
    \\EOT\ENQ\v\STX\t\DC2\EOT\219\r\EOT'\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\t\SOH\DC2\EOT\219\r\EOT!\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\t\STX\DC2\EOT\219\r$&\n\
    \\f\n\
    \\EOT\ENQ\v\STX\n\
    \\DC2\EOT\220\r\EOT5\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\n\
    \\SOH\DC2\EOT\220\r\EOT/\n\
    \\r\n\
    \\ENQ\ENQ\v\STX\n\
    \\STX\DC2\EOT\220\r24"